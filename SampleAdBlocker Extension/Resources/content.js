/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ _asyncToGenerator)\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGUtYWRibG9ja2VyLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanM/MWRhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! regenerator-runtime */ \"./node_modules/regenerator-runtime/runtime.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGUtYWRibG9ja2VyLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzP2EzNGEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsZ0hBQStDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime/regenerator/index.js\n");

/***/ }),

/***/ "./src/common/constants.ts":
/*!*********************************!*\
  !*** ./src/common/constants.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Messages\": () => (/* binding */ Messages)\n/* harmony export */ });\nvar Messages;\n\n(function (Messages) {\n  Messages[\"GetSelectorsAndScripts\"] = \"get_selectors_and_scripts\";\n})(Messages || (Messages = {}));//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGUtYWRibG9ja2VyLy4vc3JjL2NvbW1vbi9jb25zdGFudHMudHM/MmZjMiJdLCJuYW1lcyI6WyJNZXNzYWdlcyJdLCJtYXBwaW5ncyI6Ijs7OztBQUFPLElBQUtBLFFBQVo7O1dBQVlBLFE7QUFBQUEsVTtHQUFBQSxRLEtBQUFBLFEiLCJmaWxlIjoiLi9zcmMvY29tbW9uL2NvbnN0YW50cy50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIE1lc3NhZ2VzIHtcbiAgICBHZXRTZWxlY3RvcnNBbmRTY3JpcHRzID0gJ2dldF9zZWxlY3RvcnNfYW5kX3NjcmlwdHMnLFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/common/constants.ts\n");

/***/ }),

/***/ "./src/content.ts":
/*!************************!*\
  !*** ./src/content.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var webextension_polyfill_ts__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! webextension-polyfill-ts */ \"./node_modules/webextension-polyfill-ts/lib/index.js\");\n/* harmony import */ var scriptlets__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! scriptlets */ \"./node_modules/scriptlets/dist/cjs/scriptlets.cjs.js\");\n/* harmony import */ var scriptlets__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(scriptlets__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var extended_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! extended-css */ \"./node_modules/extended-css/dist/extended-css.esm.js\");\n/* harmony import */ var _common_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common/constants */ \"./src/common/constants.ts\");\n\n\n\n/* eslint-disable no-console */\n\n\n\n\n/**\n * Logs a message if verbose is true\n *\n * @param verbose\n * @param message\n */\n\nvar logMessage = function logMessage(verbose, message) {\n  if (verbose) {\n    console.log(\"(AG) \".concat(message));\n  }\n};\n\nvar getSelectorsAndScripts = /*#__PURE__*/function () {\n  var _ref = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", webextension_polyfill_ts__WEBPACK_IMPORTED_MODULE_2__.browser.runtime.sendMessage({\n              type: _common_constants__WEBPACK_IMPORTED_MODULE_5__.Messages.GetSelectorsAndScripts,\n              data: {\n                url: window.location.href\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getSelectorsAndScripts() {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Execute scripts in a page context and cleanup itself when execution completes\n * @param scripts Scripts array to execute\n */\n\n\nvar executeScripts = function executeScripts(scripts) {\n  // Wrap with try catch\n  scripts.unshift('( function () { try {');\n  scripts.push(\"} catch (ex) { console.error('Error executing AG js: ' + ex); } })();\");\n  var scriptTag = document.createElement('script');\n  scriptTag.setAttribute('type', 'text/javascript');\n  scriptTag.textContent = scripts.join('\\r\\n');\n  var parent = document.head || document.documentElement;\n  parent.appendChild(scriptTag);\n\n  if (scriptTag.parentNode) {\n    scriptTag.parentNode.removeChild(scriptTag);\n  }\n};\n/**\n * Applies JS injections.\n * @param scripts Array with JS scripts\n * @param verbose logging\n */\n\n\nvar applyScripts = function applyScripts(scripts, verbose) {\n  if (!scripts || scripts.length === 0) {\n    return;\n  }\n\n  logMessage(verbose, \"scripts length: \".concat(scripts.length));\n  executeScripts(scripts.reverse());\n};\n/**\n * Protects specified style element from changes to the current document\n * Add a mutation observer, which is adds our rules again if it was removed\n *\n * @param protectStyleEl protected style element\n */\n\n\nvar protectStyleElementContent = function protectStyleElementContent(protectStyleEl) {\n  // @ts-ignore\n  var MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n\n  if (!MutationObserver) {\n    return;\n  }\n  /* observer, which observe protectStyleEl inner changes, without deleting styleEl */\n\n\n  var innerObserver = new MutationObserver(function (mutations) {\n    for (var i = 0; i < mutations.length; i += 1) {\n      var m = mutations[i]; // @ts-ignore\n\n      if (protectStyleEl.hasAttribute('mod') && protectStyleEl.getAttribute('mod') === 'inner') {\n        // @ts-ignore\n        protectStyleEl.removeAttribute('mod');\n        break;\n      } // @ts-ignore\n\n\n      protectStyleEl.setAttribute('mod', 'inner');\n      var isProtectStyleElModified = false;\n      /**\n       * further, there are two mutually exclusive situations: either there were changes\n       * the text of protectStyleEl, either there was removes a whole child \"text\"\n       * element of protectStyleEl we'll process both of them\n       */\n\n      if (m.removedNodes.length > 0) {\n        for (var j = 0; j < m.removedNodes.length; j += 1) {\n          isProtectStyleElModified = true;\n          protectStyleEl.appendChild(m.removedNodes[j]);\n        }\n      } else if (m.oldValue) {\n        isProtectStyleElModified = true; // eslint-disable-next-line no-param-reassign\n\n        protectStyleEl.textContent = m.oldValue;\n      }\n\n      if (!isProtectStyleElModified) {\n        // @ts-ignore\n        protectStyleEl.removeAttribute('mod');\n      }\n    }\n  });\n  innerObserver.observe(protectStyleEl, {\n    childList: true,\n    characterData: true,\n    subtree: true,\n    characterDataOldValue: true\n  });\n};\n/**\n * Applies css stylesheet\n * @param styleSelectors Array of stylesheets or selectors\n * @param verbose logging\n */\n\n\nvar applyCss = function applyCss(styleSelectors, verbose) {\n  if (!styleSelectors || !styleSelectors.length) {\n    return;\n  }\n\n  logMessage(verbose, \"css length: \".concat(styleSelectors.length));\n  var styleElement = document.createElement('style');\n  styleElement.setAttribute('type', 'text/css');\n  (document.head || document.documentElement).appendChild(styleElement);\n  var selectors = styleSelectors.map(function (s) {\n    return s.trim();\n  });\n  selectors.forEach(function (selector) {\n    styleElement.sheet.insertRule(selector);\n  });\n  protectStyleElementContent(styleElement);\n};\n/**\n * Applies Extended Css stylesheet\n *\n * @param extendedCss Array with ExtendedCss stylesheets\n * @param verbose logging\n */\n\n\nvar applyExtendedCss = function applyExtendedCss(extendedCss, verbose) {\n  if (!extendedCss || !extendedCss.length) {\n    return;\n  }\n\n  logMessage(verbose, \"extended css length: \".concat(extendedCss.length));\n  var extcss = new extended_css__WEBPACK_IMPORTED_MODULE_4__.default({\n    styleSheet: extendedCss.filter(function (s) {\n      return s.length > 0;\n    }).map(function (s) {\n      return s.trim();\n    }).map(function (s) {\n      return s[s.length - 1] !== '}' ? \"\".concat(s, \" {display:none!important;}\") : s;\n    }).join('\\n')\n  });\n  extcss.apply();\n};\n/**\n * Applies scriptlets\n *\n * @param scriptletsData Array with scriptlets data\n * @param verbose logging\n */\n\n\nvar applyScriptlets = function applyScriptlets(scriptletsData, verbose) {\n  if (!scriptletsData || !scriptletsData.length) {\n    return;\n  }\n\n  logMessage(verbose, \"scriptlets length: \".concat(scriptletsData.length));\n  var scriptletExecutableScripts = scriptletsData.map(function (s) {\n    var param = JSON.parse(s);\n    param.engine = 'safari-extension';\n\n    if (verbose) {\n      param.verbose = true;\n    }\n\n    var code = (scriptlets__WEBPACK_IMPORTED_MODULE_3___default()) && scriptlets__WEBPACK_IMPORTED_MODULE_3___default().invoke(param);\n    return code || '';\n  });\n  console.log(scriptletExecutableScripts);\n  executeScripts(scriptletExecutableScripts); // @ts-ignore\n\n  console.log(window.adg);\n};\n\n/**\n * Applies injected script and css\n *\n * @param selectorsAndScripts\n * @param verbose\n */\nvar applyAdvancedBlockingData = function applyAdvancedBlockingData(selectorsAndScripts) {\n  var verbose = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  logMessage(verbose, 'Applying scripts and css..');\n  logMessage(verbose, \"Frame url: \".concat(window.location.href));\n  applyScripts(selectorsAndScripts.scripts, verbose);\n  applyCss(selectorsAndScripts.cssInject, verbose);\n  applyExtendedCss(selectorsAndScripts.cssExtended, verbose);\n  applyScriptlets(selectorsAndScripts.scriptlets, verbose);\n  logMessage(verbose, 'Applying scripts and css - done');\n};\n\nvar main = /*#__PURE__*/function () {\n  var _ref2 = (0,_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__.default)( /*#__PURE__*/_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {\n    var selectorsAndScripts;\n    return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(document instanceof HTMLDocument)) {\n              _context2.next = 6;\n              break;\n            }\n\n            if (!(window.location.href && window.location.href.indexOf('http') === 0)) {\n              _context2.next = 6;\n              break;\n            }\n\n            _context2.next = 4;\n            return getSelectorsAndScripts();\n\n          case 4:\n            selectorsAndScripts = _context2.sent;\n            applyAdvancedBlockingData(selectorsAndScripts);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function main() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmain();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/content.ts\n");

/***/ }),

/***/ "./node_modules/extended-css/dist/extended-css.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/extended-css/dist/extended-css.esm.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/*! extended-css - v1.3.12 - Mon May 31 2021\n* https://github.com/AdguardTeam/ExtendedCss\n* Copyright (c) 2021 AdGuard. Licensed LGPL-3.0\n*/\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function (obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function (obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n/**\n * Copyright 2016 Adguard Software Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/* eslint-disable no-console */\nvar utils = {};\nutils.MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n/**\n * Stores native Node textContent getter to be used for contains pseudo-class\n * because elements' 'textContent' and 'innerText' properties might be mocked\n * https://github.com/AdguardTeam/ExtendedCss/issues/127\n */\n\nutils.nodeTextContentGetter = function () {\n  var nativeNode = window.Node || Node;\n  return Object.getOwnPropertyDescriptor(nativeNode.prototype, 'textContent').get;\n}();\n\nutils.isSafariBrowser = function () {\n  var isChrome = navigator.userAgent.indexOf('Chrome') > -1;\n  var isSafari = navigator.userAgent.indexOf('Safari') > -1;\n\n  if (isSafari) {\n    if (isChrome) {\n      // Chrome seems to have both Chrome and Safari userAgents\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}();\n/**\n * Converts regular expressions passed as pseudo class arguments into RegExp instances.\n * Have to unescape doublequote \" as well, because we escape them while enclosing such\n * arguments with doublequotes, and sizzle does not automatically unescapes them.\n */\n\n\nutils.pseudoArgToRegex = function (regexSrc, flag) {\n  flag = flag || 'i';\n  regexSrc = regexSrc.trim().replace(/\\\\([\"\\\\])/g, '$1');\n  return new RegExp(regexSrc, flag);\n};\n/**\n * Converts string to the regexp\n * @param {string} str\n * @returns {RegExp}\n */\n\n\nutils.toRegExp = function (str) {\n  if (str[0] === '/' && str[str.length - 1] === '/') {\n    return new RegExp(str.slice(1, -1));\n  }\n\n  var escaped = str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  return new RegExp(escaped);\n};\n\nutils.startsWith = function (str, prefix) {\n  // if str === '', (str && false) will return ''\n  // that's why it has to be !!str\n  return !!str && str.indexOf(prefix) === 0;\n};\n\nutils.endsWith = function (str, postfix) {\n  if (!str || !postfix) {\n    return false;\n  }\n\n  if (str.endsWith) {\n    return str.endsWith(postfix);\n  }\n\n  var t = String(postfix);\n  var index = str.lastIndexOf(t);\n  return index >= 0 && index === str.length - t.length;\n};\n/**\n * Helper function for creating regular expression from a url filter rule syntax.\n */\n\n\nutils.createURLRegex = function () {\n  // Constants\n  var regexConfiguration = {\n    maskStartUrl: '||',\n    maskPipe: '|',\n    maskSeparator: '^',\n    maskAnySymbol: '*',\n    regexAnySymbol: '.*',\n    regexSeparator: '([^ a-zA-Z0-9.%_-]|$)',\n    regexStartUrl: '^(http|https|ws|wss)://([a-z0-9-_.]+\\\\.)?',\n    regexStartString: '^',\n    regexEndString: '$'\n  }; // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n  // should be escaped . * + ? ^ $ { } ( ) | [ ] / \\\n  // except of * | ^\n\n  var specials = ['.', '+', '?', '$', '{', '}', '(', ')', '[', ']', '\\\\', '/'];\n  var specialsRegex = new RegExp(\"[\".concat(specials.join('\\\\'), \"]\"), 'g');\n  /**\n   * Escapes regular expression string\n   */\n\n  var escapeRegExp = function escapeRegExp(str) {\n    return str.replace(specialsRegex, '\\\\$&');\n  };\n\n  var replaceAll = function replaceAll(str, find, replace) {\n    if (!str) {\n      return str;\n    }\n\n    return str.split(find).join(replace);\n  };\n  /**\n   * Main function that converts a url filter rule string to a regex.\n   * @param {string} str\n   * @return {RegExp}\n   */\n\n\n  var createRegexText = function createRegexText(str) {\n    var regex = escapeRegExp(str);\n\n    if (utils.startsWith(regex, regexConfiguration.maskStartUrl)) {\n      regex = regex.substring(0, regexConfiguration.maskStartUrl.length) + replaceAll(regex.substring(regexConfiguration.maskStartUrl.length, regex.length - 1), '\\|', '\\\\|') + regex.substring(regex.length - 1);\n    } else if (utils.startsWith(regex, regexConfiguration.maskPipe)) {\n      regex = regex.substring(0, regexConfiguration.maskPipe.length) + replaceAll(regex.substring(regexConfiguration.maskPipe.length, regex.length - 1), '\\|', '\\\\|') + regex.substring(regex.length - 1);\n    } else {\n      regex = replaceAll(regex.substring(0, regex.length - 1), '\\|', '\\\\|') + regex.substring(regex.length - 1);\n    } // Replacing special url masks\n\n\n    regex = replaceAll(regex, regexConfiguration.maskAnySymbol, regexConfiguration.regexAnySymbol);\n    regex = replaceAll(regex, regexConfiguration.maskSeparator, regexConfiguration.regexSeparator);\n\n    if (utils.startsWith(regex, regexConfiguration.maskStartUrl)) {\n      regex = regexConfiguration.regexStartUrl + regex.substring(regexConfiguration.maskStartUrl.length);\n    } else if (utils.startsWith(regex, regexConfiguration.maskPipe)) {\n      regex = regexConfiguration.regexStartString + regex.substring(regexConfiguration.maskPipe.length);\n    }\n\n    if (utils.endsWith(regex, regexConfiguration.maskPipe)) {\n      regex = regex.substring(0, regex.length - 1) + regexConfiguration.regexEndString;\n    }\n\n    return new RegExp(regex, 'i');\n  };\n\n  return createRegexText;\n}();\n/**\n * Creates an object implementing Location interface from a url.\n * An alternative to URL.\n * https://github.com/AdguardTeam/FingerprintingBlocker/blob/master/src/shared/url.ts#L64\n */\n\n\nutils.createLocation = function (href) {\n  var anchor = document.createElement('a');\n  anchor.href = href;\n\n  if (anchor.host === '') {\n    anchor.href = anchor.href; // eslint-disable-line no-self-assign\n  }\n\n  return anchor;\n};\n/**\n * Checks whether A has the same origin as B.\n * @param {string} urlA location.href of A.\n * @param {Location} locationB location of B.\n * @param {string} domainB document.domain of B.\n * @return {boolean}\n */\n\n\nutils.isSameOrigin = function (urlA, locationB, domainB) {\n  var locationA = utils.createLocation(urlA); // eslint-disable-next-line no-script-url\n\n  if (locationA.protocol === 'javascript:' || locationA.href === 'about:blank') {\n    return true;\n  }\n\n  if (locationA.protocol === 'data:' || locationA.protocol === 'file:') {\n    return false;\n  }\n\n  return locationA.hostname === domainB && locationA.port === locationB.port && locationA.protocol === locationB.protocol;\n};\n/**\n * A helper class to throttle function calls with setTimeout and requestAnimationFrame.\n */\n\n\nutils.AsyncWrapper = function () {\n  /**\n   * PhantomJS passes a wrong timestamp to the requestAnimationFrame callback and that breaks the AsyncWrapper logic\n   * https://github.com/ariya/phantomjs/issues/14832\n   */\n  var supported = typeof window.requestAnimationFrame !== 'undefined' && !/phantom/i.test(navigator.userAgent);\n  var rAF = supported ? requestAnimationFrame : setTimeout;\n  var cAF = supported ? cancelAnimationFrame : clearTimeout;\n  var perf = supported ? performance : Date;\n  /**\n   * @param {Function} callback\n   * @param {number} throttle number, the provided callback should be executed twice\n   * in this time frame.\n   * @constructor\n   */\n\n  function AsyncWrapper(callback, throttle) {\n    this.callback = callback;\n    this.throttle = throttle;\n    this.wrappedCallback = this.wrappedCallback.bind(this);\n\n    if (this.wrappedAsapCallback) {\n      this.wrappedAsapCallback = this.wrappedAsapCallback.bind(this);\n    }\n  }\n  /** @private */\n\n\n  AsyncWrapper.prototype.wrappedCallback = function (ts) {\n    this.lastRun = isNumber(ts) ? ts : perf.now();\n    delete this.rAFid;\n    delete this.timerId;\n    delete this.asapScheduled;\n    this.callback();\n  };\n  /** @private Indicates whether there is a scheduled callback. */\n\n\n  AsyncWrapper.prototype.hasPendingCallback = function () {\n    return isNumber(this.rAFid) || isNumber(this.timerId);\n  };\n  /**\n   * Schedules a function call before the next animation frame.\n   */\n\n\n  AsyncWrapper.prototype.run = function () {\n    if (this.hasPendingCallback()) {\n      // There is a pending execution scheduled.\n      return;\n    }\n\n    if (typeof this.lastRun !== 'undefined') {\n      var elapsed = perf.now() - this.lastRun;\n\n      if (elapsed < this.throttle) {\n        this.timerId = setTimeout(this.wrappedCallback, this.throttle - elapsed);\n        return;\n      }\n    }\n\n    this.rAFid = rAF(this.wrappedCallback);\n  };\n  /**\n   * Schedules a function call in the most immenent microtask.\n   * This cannot be canceled.\n   */\n\n\n  AsyncWrapper.prototype.runAsap = function () {\n    if (this.asapScheduled) {\n      return;\n    }\n\n    this.asapScheduled = true;\n    cAF(this.rAFid);\n    clearTimeout(this.timerId);\n\n    if (utils.MutationObserver) {\n      /**\n       * Using MutationObservers to access microtask queue is a standard technique,\n       * used in ASAP library\n       * {@link https://github.com/kriskowal/asap/blob/master/browser-raw.js#L140}\n       */\n      if (!this.mo) {\n        this.mo = new utils.MutationObserver(this.wrappedCallback);\n        this.node = document.createTextNode(1);\n        this.mo.observe(this.node, {\n          characterData: true\n        });\n      }\n\n      this.node.nodeValue = -this.node.nodeValue;\n    } else {\n      setTimeout(this.wrappedCallback);\n    }\n  };\n  /**\n   * Runs scheduled execution immediately, if there were any.\n   */\n\n\n  AsyncWrapper.prototype.runImmediately = function () {\n    if (this.hasPendingCallback()) {\n      cAF(this.rAFid);\n      clearTimeout(this.timerId);\n      delete this.rAFid;\n      delete this.timerId;\n      this.wrappedCallback();\n    }\n  };\n\n  AsyncWrapper.now = function () {\n    return perf.now();\n  };\n\n  return AsyncWrapper;\n}();\n/**\n * Stores native OdP to be used in WeakMap and Set polyfills.\n */\n\n\nutils.defineProperty = Object.defineProperty;\nutils.WeakMap = typeof WeakMap !== 'undefined' ? WeakMap : function () {\n  /** Originally based on {@link https://github.com/Polymer/WeakMap} */\n  var counter = Date.now() % 1e9;\n\n  var WeakMap = function WeakMap() {\n    this.name = \"__st\".concat(Math.random() * 1e9 >>> 0).concat(counter++, \"__\");\n  };\n\n  WeakMap.prototype = {\n    set: function set(key, value) {\n      var entry = key[this.name];\n\n      if (entry && entry[0] === key) {\n        entry[1] = value;\n      } else {\n        utils.defineProperty(key, this.name, {\n          value: [key, value],\n          writable: true\n        });\n      }\n\n      return this;\n    },\n    get: function get(key) {\n      var entry = key[this.name];\n      return entry && entry[0] === key ? entry[1] : undefined;\n    },\n    delete: function _delete(key) {\n      var entry = key[this.name];\n\n      if (!entry) {\n        return false;\n      }\n\n      var hasValue = entry[0] === key;\n      delete entry[0];\n      delete entry[1];\n      return hasValue;\n    },\n    has: function has(key) {\n      var entry = key[this.name];\n\n      if (!entry) {\n        return false;\n      }\n\n      return entry[0] === key;\n    }\n  };\n  return WeakMap;\n}();\nutils.Set = typeof Set !== 'undefined' ? Set : function () {\n  var counter = Date.now() % 1e9;\n  /**\n   * A polyfill which covers only the basic usage.\n   * Only supports methods that are supported in IE11.\n   * {@link https://docs.microsoft.com/en-us/scripting/javascript/reference/set-object-javascript}\n   * Assumes that 'key's are all objects, not primitives such as a number.\n   *\n   * @param {Array} items Initial items in this set\n   */\n\n  var Set = function Set(items) {\n    this.name = \"__st\".concat(Math.random() * 1e9 >>> 0).concat(counter++, \"__\");\n    this.keys = [];\n\n    if (items && items.length) {\n      var iItems = items.length;\n\n      while (iItems--) {\n        this.add(items[iItems]);\n      }\n    }\n  };\n\n  Set.prototype = {\n    add: function add(key) {\n      if (!isNumber(key[this.name])) {\n        var index = this.keys.push(key) - 1;\n        utils.defineProperty(key, this.name, {\n          value: index,\n          writable: true\n        });\n      }\n    },\n    delete: function _delete(key) {\n      if (isNumber(key[this.name])) {\n        var index = key[this.name];\n        delete this.keys[index];\n        key[this.name] = undefined;\n      }\n    },\n    has: function has(key) {\n      return isNumber(key[this.name]);\n    },\n    clear: function clear() {\n      this.keys.forEach(function (key) {\n        key[this.name] = undefined;\n      });\n      this.keys.length = 0;\n    },\n    forEach: function forEach(cb) {\n      var that = this;\n      this.keys.forEach(function (value) {\n        cb(value, value, that);\n      });\n    }\n  };\n  utils.defineProperty(Set.prototype, 'size', {\n    get: function get() {\n      // Skips holes.\n      return this.keys.reduce(function (acc) {\n        return acc + 1;\n      }, 0);\n    }\n  });\n  return Set;\n}();\n/**\n * Vendor-specific Element.prototype.matches\n */\n\nutils.matchesPropertyName = function () {\n  var props = ['matches', 'matchesSelector', 'mozMatchesSelector', 'msMatchesSelector', 'oMatchesSelector', 'webkitMatchesSelector'];\n\n  for (var i = 0; i < 6; i++) {\n    if (Element.prototype.hasOwnProperty(props[i])) {\n      return props[i];\n    }\n  }\n}();\n/**\n * Provides stats information\n */\n\n\nutils.Stats = function () {\n  /** @member {Array<number>} */\n  this.array = [];\n  /** @member {number} */\n\n  this.length = 0;\n  var zeroDescriptor = {\n    value: 0,\n    writable: true\n  };\n  /** @member {number} @private */\n\n  Object.defineProperty(this, 'sum', zeroDescriptor);\n  /** @member {number} @private */\n\n  Object.defineProperty(this, 'squaredSum', zeroDescriptor);\n};\n/**\n * @param {number} dataPoint data point\n */\n\n\nutils.Stats.prototype.push = function (dataPoint) {\n  this.array.push(dataPoint);\n  this.length++;\n  this.sum += dataPoint;\n  this.squaredSum += dataPoint * dataPoint;\n  /** @member {number} */\n\n  this.mean = this.sum / this.length;\n  /** @member {number} */\n  // eslint-disable-next-line no-restricted-properties\n\n  this.stddev = Math.sqrt(this.squaredSum / this.length - Math.pow(this.mean, 2));\n};\n/** Safe console.error version */\n\n\nutils.logError = typeof console !== 'undefined' && console.error && Function.prototype.bind && console.error.bind ? console.error.bind(window.console) : console.error;\n/** Safe console.info version */\n\nutils.logInfo = typeof console !== 'undefined' && console.info && Function.prototype.bind && console.info.bind ? console.info.bind(window.console) : console.info;\n\nfunction isNumber(obj) {\n  return typeof obj === 'number';\n}\n/**\n * Returns path to element we will use as element identifier\n * @param {Element} inputEl\n * @returns {string} - path to the element\n */\n\n\nutils.getNodeSelector = function (inputEl) {\n  if (!(inputEl instanceof Element)) {\n    throw new Error('Function received argument with wrong type');\n  }\n\n  var el = inputEl;\n  var path = []; // we need to check '!!el' first because it is possible\n  // that some ancestor of the inputEl was removed before it\n\n  while (!!el && el.nodeType === Node.ELEMENT_NODE) {\n    var selector = el.nodeName.toLowerCase();\n\n    if (el.id && typeof el.id === 'string') {\n      selector += \"#\".concat(el.id);\n      path.unshift(selector);\n      break;\n    } else {\n      var sibling = el;\n      var nth = 1;\n\n      while (sibling.previousSibling) {\n        sibling = sibling.previousSibling;\n\n        if (sibling.nodeType === Node.ELEMENT_NODE && sibling.nodeName.toLowerCase() === selector) {\n          nth++;\n        }\n      }\n\n      if (nth !== 1) {\n        selector += \":nth-of-type(\".concat(nth, \")\");\n      }\n    }\n\n    path.unshift(selector);\n    el = el.parentNode;\n  }\n\n  return path.join(' > ');\n};\n\n/**\n * Copyright 2016 Adguard Software Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Helper class css utils\n *\n * @type {{normalize}}\n */\nvar cssUtils = function () {\n  /**\n   * Regex that matches AdGuard's backward compatible syntaxes.\n   */\n  var reAttrFallback = /\\[-(?:ext|abp)-([a-z-_]+)=([\"'])((?:(?=(\\\\?))\\4.)*?)\\2\\]/g;\n  /**\n   * Complex replacement function.\n   * Unescapes quote characters inside of an extended selector.\n   *\n   * @param match     Whole matched string\n   * @param name      Group 1\n   * @param quoteChar Group 2\n   * @param value     Group 3\n   */\n\n  var evaluateMatch = function evaluateMatch(match, name, quoteChar, value) {\n    // Unescape quotes\n    var re = new RegExp(\"([^\\\\\\\\]|^)\\\\\\\\\".concat(quoteChar), 'g');\n    value = value.replace(re, \"$1\".concat(quoteChar));\n    return \":\".concat(name, \"(\").concat(value, \")\");\n  }; // Sizzle's parsing of pseudo class arguments is buggy on certain circumstances\n  // We support following form of arguments:\n  // 1. for :matches-css, those of a form {propertyName}: /.*/\n  // 2. for :contains, those of a form /.*/\n  // We transform such cases in a way that Sizzle has no ambiguity in parsing arguments.\n\n\n  var reMatchesCss = /\\:(matches-css(?:-after|-before)?)\\(([a-z-\\s]*\\:\\s*\\/(?:\\\\.|[^\\/])*?\\/\\s*)\\)/g;\n  var reContains = /:(?:-abp-)?(contains|has-text)\\((\\s*\\/(?:\\\\.|[^\\/])*?\\/\\s*)\\)/g;\n  var reScope = /\\(\\:scope >/g; // Note that we require `/` character in regular expressions to be escaped.\n\n  /**\n   * Used for pre-processing pseudo-classes values with above two regexes.\n   */\n\n  var addQuotes = function addQuotes(_, c1, c2) {\n    return \":\".concat(c1, \"(\\\"\").concat(c2.replace(/[\"\\\\]/g, '\\\\$&'), \"\\\")\");\n  };\n\n  var SCOPE_REPLACER = '(>';\n  /**\n   * Normalizes specified css text in a form that can be parsed by the\n   * Sizzle engine.\n   * Normalization means\n   *  1. transforming [-ext-*=\"\"] attributes to pseudo classes\n   *  2. enclosing possibly ambiguous arguments of `:contains`,\n   *     `:matches-css` pseudo classes with quotes.\n   * @param {string} cssText\n   * @return {string}\n   */\n\n  var normalize = function normalize(cssText) {\n    var normalizedCssText = cssText.replace(reAttrFallback, evaluateMatch).replace(reMatchesCss, addQuotes).replace(reContains, addQuotes).replace(reScope, SCOPE_REPLACER);\n    return normalizedCssText;\n  };\n\n  var isSimpleSelectorValid = function isSimpleSelectorValid(selector) {\n    try {\n      document.querySelectorAll(selector);\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  };\n\n  return {\n    normalize: normalize,\n    isSimpleSelectorValid: isSimpleSelectorValid\n  };\n}();\n\n/*!\n * Sizzle CSS Selector Engine v2.3.4-pre-adguard\n * https://sizzlejs.com/\n *\n * Copyright JS Foundation and other contributors\n * Released under the MIT license\n * https://js.foundation/\n *\n * Date: 2020-08-04\n */\n\n/**\n * Version of Sizzle patched by AdGuard in order to be used in the ExtendedCss module.\n * https://github.com/AdguardTeam/sizzle-extcss\n *\n * Look for [AdGuard Patch] and ADGUARD_EXTCSS markers to find out what exactly was changed by us.\n *\n * Global changes:\n * 1. Added additional parameters to the \"Sizzle.tokenize\" method so that it can be used for stylesheets parsing and validation.\n * 2. Added tokens re-sorting mechanism forcing slow pseudos to be matched last  (see sortTokenGroups).\n * 3. Fix the nonnativeSelectorCache caching -- there was no value corresponding to a key.\n * 4. Added Sizzle.compile call to the `:has` pseudo definition.\n *\n * Changes that are applied to the ADGUARD_EXTCSS build only:\n * 1. Do not expose Sizzle to the global scope. Initialize it lazily via initializeSizzle().\n * 2. Removed :contains pseudo declaration -- its syntax is changed and declared outside of Sizzle.\n * 3. Removed declarations for the following non-standard pseudo classes:\n * :parent, :header, :input, :button, :text, :first, :last, :eq,\n * :even, :odd, :lt, :gt, :nth, :radio, :checkbox, :file,\n * :password, :image, :submit, :reset\n * 4. Added es6 module export\n */\nvar Sizzle;\n/**\n * Initializes Sizzle object.\n * In the case of AdGuard ExtendedCss we want to avoid initializing Sizzle right away\n * and exposing it to the global scope.\n */\n\nvar initializeSizzle = function initializeSizzle() {\n  // jshint ignore:line\n  if (!Sizzle) {\n    //<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\n    Sizzle = function (window) {\n      var support,\n          Expr,\n          getText,\n          isXML,\n          tokenize,\n          compile,\n          select,\n          outermostContext,\n          sortInput,\n          hasDuplicate,\n          // Local document vars\n      setDocument,\n          document,\n          docElem,\n          documentIsHTML,\n          rbuggyQSA,\n          rbuggyMatches,\n          matches,\n          contains,\n          // Instance-specific data\n      expando = \"sizzle\" + 1 * new Date(),\n          preferredDoc = window.document,\n          dirruns = 0,\n          done = 0,\n          classCache = createCache(),\n          tokenCache = createCache(),\n          compilerCache = createCache(),\n          nonnativeSelectorCache = createCache(),\n          sortOrder = function sortOrder(a, b) {\n        if (a === b) {\n          hasDuplicate = true;\n        }\n\n        return 0;\n      },\n          // Instance methods\n      hasOwn = {}.hasOwnProperty,\n          arr = [],\n          pop = arr.pop,\n          push_native = arr.push,\n          push = arr.push,\n          slice = arr.slice,\n          // Use a stripped-down indexOf as it's faster than native\n      // https://jsperf.com/thor-indexof-vs-for/5\n      indexOf = function indexOf(list, elem) {\n        var i = 0,\n            len = list.length;\n\n        for (; i < len; i++) {\n          if (list[i] === elem) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n          booleans = \"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",\n          // Regular expressions\n      // http://www.w3.org/TR/css3-selectors/#whitespace\n      whitespace = \"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",\n          // http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\n      identifier = \"(?:\\\\\\\\.|[\\\\w-]|[^\\0-\\\\xa0])+\",\n          // Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors\n      attributes = \"\\\\[\" + whitespace + \"*(\" + identifier + \")(?:\" + whitespace + // Operator (capture 2)\n      \"*([*^$|!~]?=)\" + whitespace + // \"Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]\"\n      \"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\" + identifier + \"))|)\" + whitespace + \"*\\\\]\",\n          pseudos = \":(\" + identifier + \")(?:\\\\((\" + // To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:\n      // 1. quoted (capture 3; capture 4 or capture 5)\n      \"('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|\" + // 2. simple (capture 6)\n      \"((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\" + attributes + \")*)|\" + // 3. anything else (capture 2)\n      \".*\" + \")\\\\)|)\",\n          // Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter\n      rwhitespace = new RegExp(whitespace + \"+\", \"g\"),\n          rtrim = new RegExp(\"^\" + whitespace + \"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\" + whitespace + \"+$\", \"g\"),\n          rcomma = new RegExp(\"^\" + whitespace + \"*,\" + whitespace + \"*\"),\n          rcombinators = new RegExp(\"^\" + whitespace + \"*([>+~]|\" + whitespace + \")\" + whitespace + \"*\"),\n          rpseudo = new RegExp(pseudos),\n          ridentifier = new RegExp(\"^\" + identifier + \"$\"),\n          matchExpr = {\n        \"ID\": new RegExp(\"^#(\" + identifier + \")\"),\n        \"CLASS\": new RegExp(\"^\\\\.(\" + identifier + \")\"),\n        \"TAG\": new RegExp(\"^(\" + identifier + \"|[*])\"),\n        \"ATTR\": new RegExp(\"^\" + attributes),\n        \"PSEUDO\": new RegExp(\"^\" + pseudos),\n        \"CHILD\": new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\" + whitespace + \"*(even|odd|(([+-]|)(\\\\d*)n|)\" + whitespace + \"*(?:([+-]|)\" + whitespace + \"*(\\\\d+)|))\" + whitespace + \"*\\\\)|)\", \"i\"),\n        \"bool\": new RegExp(\"^(?:\" + booleans + \")$\", \"i\"),\n        // For use in libraries implementing .is()\n        // We use this for POS matching in `select`\n        \"needsContext\": new RegExp(\"^\" + whitespace + \"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\" + whitespace + \"*((?:-\\\\d)?\\\\d*)\" + whitespace + \"*\\\\)|)(?=[^-]|$)\", \"i\")\n      },\n          rnative = /^[^{]+\\{\\s*\\[native \\w/,\n          // Easily-parseable/retrievable ID or TAG or CLASS selectors\n      rquickExpr = /^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,\n          rsibling = /[+~]/,\n          // CSS escapes\n      // http://www.w3.org/TR/CSS21/syndata.html#escaped-characters\n      runescape = new RegExp(\"\\\\\\\\([\\\\da-f]{1,6}\" + whitespace + \"?|(\" + whitespace + \")|.)\", \"ig\"),\n          funescape = function funescape(_, escaped, escapedWhitespace) {\n        var high = \"0x\" + escaped - 0x10000; // NaN means non-codepoint\n        // Support: Firefox<24\n        // Workaround erroneous numeric interpretation of +\"0x\"\n\n        return high !== high || escapedWhitespace ? escaped : high < 0 ? // BMP codepoint\n        String.fromCharCode(high + 0x10000) : // Supplemental Plane codepoint (surrogate pair)\n        String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);\n      },\n          // CSS string/identifier serialization\n      // https://drafts.csswg.org/cssom/#common-serializing-idioms\n      rcssescape = /([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\0-\\x1f\\x7f-\\uFFFF\\w-]/g,\n          fcssescape = function fcssescape(ch, asCodePoint) {\n        if (asCodePoint) {\n          // U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER\n          if (ch === \"\\0\") {\n            return \"\\uFFFD\";\n          } // Control characters and (dependent upon position) numbers get escaped as code points\n\n\n          return ch.slice(0, -1) + \"\\\\\" + ch.charCodeAt(ch.length - 1).toString(16) + \" \";\n        } // Other potentially-special ASCII characters get backslash-escaped\n\n\n        return \"\\\\\" + ch;\n      },\n          // Used for iframes\n      // See setDocument()\n      // Removing the function wrapper causes a \"Permission Denied\"\n      // error in IE\n      unloadHandler = function unloadHandler() {\n        setDocument();\n      },\n          inDisabledFieldset = addCombinator(function (elem) {\n        return elem.disabled === true && elem.nodeName.toLowerCase() === \"fieldset\";\n      }, {\n        dir: \"parentNode\",\n        next: \"legend\"\n      }); // Optimize for push.apply( _, NodeList )\n\n\n      try {\n        push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes); // Support: Android<4.0\n        // Detect silently failing push.apply\n\n        arr[preferredDoc.childNodes.length].nodeType;\n      } catch (e) {\n        push = {\n          apply: arr.length ? // Leverage slice if possible\n          function (target, els) {\n            push_native.apply(target, slice.call(els));\n          } : // Support: IE<9\n          // Otherwise append directly\n          function (target, els) {\n            var j = target.length,\n                i = 0; // Can't trust NodeList.length\n\n            while (target[j++] = els[i++]) {}\n\n            target.length = j - 1;\n          }\n        };\n      }\n\n      function Sizzle(selector, context, results, seed) {\n        var m,\n            i,\n            elem,\n            nid,\n            match,\n            groups,\n            newSelector,\n            newContext = context && context.ownerDocument,\n            // nodeType defaults to 9, since context defaults to document\n        nodeType = context ? context.nodeType : 9;\n        results = results || []; // Return early from calls with invalid selector or context\n\n        if (typeof selector !== \"string\" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {\n          return results;\n        } // Try to shortcut find operations (as opposed to filters) in HTML documents\n\n\n        if (!seed) {\n          if ((context ? context.ownerDocument || context : preferredDoc) !== document) {\n            setDocument(context);\n          }\n\n          context = context || document;\n\n          if (documentIsHTML) {\n            // If the selector is sufficiently simple, try using a \"get*By*\" DOM method\n            // (excepting DocumentFragment context, where the methods don't exist)\n            if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {\n              // ID selector\n              if (m = match[1]) {\n                // Document context\n                if (nodeType === 9) {\n                  if (elem = context.getElementById(m)) {\n                    // Support: IE, Opera, Webkit\n                    // TODO: identify versions\n                    // getElementById can match elements by name instead of ID\n                    if (elem.id === m) {\n                      results.push(elem);\n                      return results;\n                    }\n                  } else {\n                    return results;\n                  } // Element context\n\n                } else {\n                  // Support: IE, Opera, Webkit\n                  // TODO: identify versions\n                  // getElementById can match elements by name instead of ID\n                  if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {\n                    results.push(elem);\n                    return results;\n                  }\n                } // Type selector\n\n              } else if (match[2]) {\n                push.apply(results, context.getElementsByTagName(selector));\n                return results; // Class selector\n              } else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {\n                push.apply(results, context.getElementsByClassName(m));\n                return results;\n              }\n            } // Take advantage of querySelectorAll\n\n\n            if (support.qsa && !nonnativeSelectorCache[selector + \" \"] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {\n              if (nodeType !== 1) {\n                newContext = context;\n                newSelector = selector; // qSA looks outside Element context, which is not what we want\n                // Thanks to Andrew Dupont for this workaround technique\n                // Support: IE <=8\n                // Exclude object elements\n              } else if (context.nodeName.toLowerCase() !== \"object\") {\n                // Capture the context ID, setting it first if necessary\n                if (nid = context.getAttribute(\"id\")) {\n                  nid = nid.replace(rcssescape, fcssescape);\n                } else {\n                  context.setAttribute(\"id\", nid = expando);\n                } // Prefix every selector in the list\n\n\n                groups = tokenize(selector);\n                i = groups.length;\n\n                while (i--) {\n                  groups[i] = \"#\" + nid + \" \" + toSelector(groups[i]);\n                }\n\n                newSelector = groups.join(\",\"); // Expand context for sibling selectors\n\n                newContext = rsibling.test(selector) && testContext(context.parentNode) || context;\n              }\n\n              if (newSelector) {\n                try {\n                  push.apply(results, newContext.querySelectorAll(newSelector));\n                  return results;\n                } catch (qsaError) {\n                  // [AdGuard Path]: Fix the cache value\n                  nonnativeSelectorCache(selector, true);\n                } finally {\n                  if (nid === expando) {\n                    context.removeAttribute(\"id\");\n                  }\n                }\n              }\n            }\n          }\n        } // All others\n\n\n        return select(selector.replace(rtrim, \"$1\"), context, results, seed);\n      }\n      /**\n       * Create key-value caches of limited size\n       * @returns {function(string, object)} Returns the Object data after storing it on itself with\n       *\tproperty name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)\n       *\tdeleting the oldest entry\n       */\n\n\n      function createCache() {\n        var keys = [];\n\n        function cache(key, value) {\n          // Use (key + \" \") to avoid collision with native prototype properties (see Issue #157)\n          if (keys.push(key + \" \") > Expr.cacheLength) {\n            // Only keep the most recent entries\n            delete cache[keys.shift()];\n          }\n\n          return cache[key + \" \"] = value;\n        }\n\n        return cache;\n      }\n      /**\n       * Mark a function for special use by Sizzle\n       * @param {Function} fn The function to mark\n       */\n\n\n      function markFunction(fn) {\n        fn[expando] = true;\n        return fn;\n      }\n      /**\n       * Support testing using an element\n       * @param {Function} fn Passed the created element and returns a boolean result\n       */\n\n\n      function assert(fn) {\n        var el = document.createElement(\"fieldset\");\n\n        try {\n          return !!fn(el);\n        } catch (e) {\n          return false;\n        } finally {\n          // Remove from its parent by default\n          if (el.parentNode) {\n            el.parentNode.removeChild(el);\n          } // release memory in IE\n\n\n          el = null;\n        }\n      }\n      /**\n       * Adds the same handler for all of the specified attrs\n       * @param {String} attrs Pipe-separated list of attributes\n       * @param {Function} handler The method that will be applied\n       */\n\n\n      function addHandle(attrs, handler) {\n        var arr = attrs.split(\"|\"),\n            i = arr.length;\n\n        while (i--) {\n          Expr.attrHandle[arr[i]] = handler;\n        }\n      }\n      /**\n       * Checks document order of two siblings\n       * @param {Element} a\n       * @param {Element} b\n       * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b\n       */\n\n\n      function siblingCheck(a, b) {\n        var cur = b && a,\n            diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex; // Use IE sourceIndex if available on both nodes\n\n        if (diff) {\n          return diff;\n        } // Check if b follows a\n\n\n        if (cur) {\n          while (cur = cur.nextSibling) {\n            if (cur === b) {\n              return -1;\n            }\n          }\n        }\n\n        return a ? 1 : -1;\n      }\n      /**\n       * Returns a function to use in pseudos for :enabled/:disabled\n       * @param {Boolean} disabled true for :disabled; false for :enabled\n       */\n\n\n      function createDisabledPseudo(disabled) {\n        // Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable\n        return function (elem) {\n          // Only certain elements can match :enabled or :disabled\n          // https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled\n          // https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled\n          if (\"form\" in elem) {\n            // Check for inherited disabledness on relevant non-disabled elements:\n            // * listed form-associated elements in a disabled fieldset\n            //   https://html.spec.whatwg.org/multipage/forms.html#category-listed\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled\n            // * option elements in a disabled optgroup\n            //   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled\n            // All such elements have a \"form\" property.\n            if (elem.parentNode && elem.disabled === false) {\n              // Option elements defer to a parent optgroup if present\n              if (\"label\" in elem) {\n                if (\"label\" in elem.parentNode) {\n                  return elem.parentNode.disabled === disabled;\n                } else {\n                  return elem.disabled === disabled;\n                }\n              } // Support: IE 6 - 11\n              // Use the isDisabled shortcut property to check for disabled fieldset ancestors\n\n\n              return elem.isDisabled === disabled || // Where there is no isDisabled, check manually\n\n              /* jshint -W018 */\n              elem.isDisabled !== !disabled && inDisabledFieldset(elem) === disabled;\n            }\n\n            return elem.disabled === disabled; // Try to winnow out elements that can't be disabled before trusting the disabled property.\n            // Some victims get caught in our net (label, legend, menu, track), but it shouldn't\n            // even exist on them, let alone have a boolean value.\n          } else if (\"label\" in elem) {\n            return elem.disabled === disabled;\n          } // Remaining elements are neither :enabled nor :disabled\n\n\n          return false;\n        };\n      }\n      /**\n       * Checks a node for validity as a Sizzle context\n       * @param {Element|Object=} context\n       * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value\n       */\n\n\n      function testContext(context) {\n        return context && typeof context.getElementsByTagName !== \"undefined\" && context;\n      } // Expose support vars for convenience\n\n\n      support = Sizzle.support = {};\n      /**\n       * Detects XML nodes\n       * @param {Element|Object} elem An element or a document\n       * @returns {Boolean} True iff elem is a non-HTML XML node\n       */\n\n      isXML = Sizzle.isXML = function (elem) {\n        // documentElement is verified for cases where it doesn't yet exist\n        // (such as loading iframes in IE - #4833)\n        var documentElement = elem && (elem.ownerDocument || elem).documentElement;\n        return documentElement ? documentElement.nodeName !== \"HTML\" : false;\n      };\n      /**\n       * Sets document-related variables once based on the current document\n       * @param {Element|Object} [doc] An element or document object to use to set the document\n       * @returns {Object} Returns the current document\n       */\n\n\n      setDocument = Sizzle.setDocument = function (node) {\n        var hasCompare,\n            subWindow,\n            doc = node ? node.ownerDocument || node : preferredDoc; // Return early if doc is invalid or already selected\n\n        if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {\n          return document;\n        } // Update global variables\n\n\n        document = doc;\n        docElem = document.documentElement;\n        documentIsHTML = !isXML(document); // Support: IE 9-11, Edge\n        // Accessing iframe documents after unload throws \"permission denied\" errors (jQuery #13936)\n\n        if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {\n          // Support: IE 11, Edge\n          if (subWindow.addEventListener) {\n            subWindow.addEventListener(\"unload\", unloadHandler, false); // Support: IE 9 - 10 only\n          } else if (subWindow.attachEvent) {\n            subWindow.attachEvent(\"onunload\", unloadHandler);\n          }\n        }\n        /* Attributes\n        ---------------------------------------------------------------------- */\n        // Support: IE<8\n        // Verify that getAttribute really returns attributes and not properties\n        // (excepting IE8 booleans)\n\n\n        support.attributes = assert(function (el) {\n          el.className = \"i\";\n          return !el.getAttribute(\"className\");\n        });\n        /* getElement(s)By*\n        ---------------------------------------------------------------------- */\n        // Check if getElementsByTagName(\"*\") returns only elements\n\n        support.getElementsByTagName = assert(function (el) {\n          el.appendChild(document.createComment(\"\"));\n          return !el.getElementsByTagName(\"*\").length;\n        }); // Support: IE<9\n\n        support.getElementsByClassName = rnative.test(document.getElementsByClassName); // Support: IE<10\n        // Check if getElementById returns elements by name\n        // The broken getElementById methods don't pick up programmatically-set names,\n        // so use a roundabout getElementsByName test\n\n        support.getById = assert(function (el) {\n          docElem.appendChild(el).id = expando;\n          return !document.getElementsByName || !document.getElementsByName(expando).length;\n        }); // ID filter and find\n\n        if (support.getById) {\n          Expr.filter[\"ID\"] = function (id) {\n            var attrId = id.replace(runescape, funescape);\n            return function (elem) {\n              return elem.getAttribute(\"id\") === attrId;\n            };\n          };\n\n          Expr.find[\"ID\"] = function (id, context) {\n            if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n              var elem = context.getElementById(id);\n              return elem ? [elem] : [];\n            }\n          };\n        } else {\n          Expr.filter[\"ID\"] = function (id) {\n            var attrId = id.replace(runescape, funescape);\n            return function (elem) {\n              var node = typeof elem.getAttributeNode !== \"undefined\" && elem.getAttributeNode(\"id\");\n              return node && node.value === attrId;\n            };\n          }; // Support: IE 6 - 7 only\n          // getElementById is not reliable as a find shortcut\n\n\n          Expr.find[\"ID\"] = function (id, context) {\n            if (typeof context.getElementById !== \"undefined\" && documentIsHTML) {\n              var node,\n                  i,\n                  elems,\n                  elem = context.getElementById(id);\n\n              if (elem) {\n                // Verify the id attribute\n                node = elem.getAttributeNode(\"id\");\n\n                if (node && node.value === id) {\n                  return [elem];\n                } // Fall back on getElementsByName\n\n\n                elems = context.getElementsByName(id);\n                i = 0;\n\n                while (elem = elems[i++]) {\n                  node = elem.getAttributeNode(\"id\");\n\n                  if (node && node.value === id) {\n                    return [elem];\n                  }\n                }\n              }\n\n              return [];\n            }\n          };\n        } // Tag\n\n\n        Expr.find[\"TAG\"] = support.getElementsByTagName ? function (tag, context) {\n          if (typeof context.getElementsByTagName !== \"undefined\") {\n            return context.getElementsByTagName(tag); // DocumentFragment nodes don't have gEBTN\n          } else if (support.qsa) {\n            return context.querySelectorAll(tag);\n          }\n        } : function (tag, context) {\n          var elem,\n              tmp = [],\n              i = 0,\n              // By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too\n          results = context.getElementsByTagName(tag); // Filter out possible comments\n\n          if (tag === \"*\") {\n            while (elem = results[i++]) {\n              if (elem.nodeType === 1) {\n                tmp.push(elem);\n              }\n            }\n\n            return tmp;\n          }\n\n          return results;\n        }; // Class\n\n        Expr.find[\"CLASS\"] = support.getElementsByClassName && function (className, context) {\n          if (typeof context.getElementsByClassName !== \"undefined\" && documentIsHTML) {\n            return context.getElementsByClassName(className);\n          }\n        };\n        /* QSA/matchesSelector\n        ---------------------------------------------------------------------- */\n        // QSA and matchesSelector support\n        // matchesSelector(:active) reports false when true (IE9/Opera 11.5)\n\n\n        rbuggyMatches = []; // qSa(:focus) reports false when true (Chrome 21)\n        // We allow this because of a bug in IE8/9 that throws an error\n        // whenever `document.activeElement` is accessed on an iframe\n        // So, we allow :focus to pass through QSA all the time to avoid the IE error\n        // See https://bugs.jquery.com/ticket/13378\n\n        rbuggyQSA = [];\n\n        if (support.qsa = rnative.test(document.querySelectorAll)) {\n          // Build QSA regex\n          // Regex strategy adopted from Diego Perini\n          assert(function (el) {\n            // Select is set to empty string on purpose\n            // This is to test IE's treatment of not explicitly\n            // setting a boolean content attribute,\n            // since its presence should be enough\n            // https://bugs.jquery.com/ticket/12359\n            docElem.appendChild(el).innerHTML = AGPolicy.createHTML(\"<a id='\" + expando + \"'></a>\" + \"<select id='\" + expando + \"-\\r\\\\' msallowcapture=''>\" + \"<option selected=''></option></select>\"); // Support: IE8, Opera 11-12.16\n            // Nothing should be selected when empty strings follow ^= or $= or *=\n            // The test attribute must be unknown in Opera but \"safe\" for WinRT\n            // https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section\n\n            if (el.querySelectorAll(\"[msallowcapture^='']\").length) {\n              rbuggyQSA.push(\"[*^$]=\" + whitespace + \"*(?:''|\\\"\\\")\");\n            } // Support: IE8\n            // Boolean attributes and \"value\" are not treated correctly\n\n\n            if (!el.querySelectorAll(\"[selected]\").length) {\n              rbuggyQSA.push(\"\\\\[\" + whitespace + \"*(?:value|\" + booleans + \")\");\n            } // Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+\n\n\n            if (!el.querySelectorAll(\"[id~=\" + expando + \"-]\").length) {\n              rbuggyQSA.push(\"~=\");\n            } // Webkit/Opera - :checked should return selected option elements\n            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            // IE8 throws error here and will not see later tests\n\n\n            if (!el.querySelectorAll(\":checked\").length) {\n              rbuggyQSA.push(\":checked\");\n            } // Support: Safari 8+, iOS 8+\n            // https://bugs.webkit.org/show_bug.cgi?id=136851\n            // In-page `selector#id sibling-combinator selector` fails\n\n\n            if (!el.querySelectorAll(\"a#\" + expando + \"+*\").length) {\n              rbuggyQSA.push(\".#.+[+~]\");\n            }\n          });\n          assert(function (el) {\n            el.innerHTML = AGPolicy.createHTML(\"<a href='' disabled='disabled'></a>\" + \"<select disabled='disabled'><option/></select>\"); // Support: Windows 8 Native Apps\n            // The type and name attributes are restricted during .innerHTML assignment\n\n            var input = document.createElement(\"input\");\n            input.setAttribute(\"type\", \"hidden\");\n            el.appendChild(input).setAttribute(\"name\", \"D\"); // Support: IE8\n            // Enforce case-sensitivity of name attribute\n\n            if (el.querySelectorAll(\"[name=d]\").length) {\n              rbuggyQSA.push(\"name\" + whitespace + \"*[*^$|!~]?=\");\n            } // FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)\n            // IE8 throws error here and will not see later tests\n\n\n            if (el.querySelectorAll(\":enabled\").length !== 2) {\n              rbuggyQSA.push(\":enabled\", \":disabled\");\n            } // Support: IE9-11+\n            // IE's :disabled selector does not pick up the children of disabled fieldsets\n\n\n            docElem.appendChild(el).disabled = true;\n\n            if (el.querySelectorAll(\":disabled\").length !== 2) {\n              rbuggyQSA.push(\":enabled\", \":disabled\");\n            } // Opera 10-11 does not throw on post-comma invalid pseudos\n\n\n            el.querySelectorAll(\"*,:x\");\n            rbuggyQSA.push(\",.*:\");\n          });\n        }\n\n        if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {\n          assert(function (el) {\n            // Check to see if it's possible to do matchesSelector\n            // on a disconnected node (IE 9)\n            support.disconnectedMatch = matches.call(el, \"*\"); // This should fail with an exception\n            // Gecko does not error, returns false instead\n\n            matches.call(el, \"[s!='']:x\");\n            rbuggyMatches.push(\"!=\", pseudos);\n          });\n        }\n\n        rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join(\"|\"));\n        rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join(\"|\"));\n        /* Contains\n        ---------------------------------------------------------------------- */\n\n        hasCompare = rnative.test(docElem.compareDocumentPosition); // Element contains another\n        // Purposefully self-exclusive\n        // As in, an element does not contain itself\n\n        contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {\n          var adown = a.nodeType === 9 ? a.documentElement : a,\n              bup = b && b.parentNode;\n          return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));\n        } : function (a, b) {\n          if (b) {\n            while (b = b.parentNode) {\n              if (b === a) {\n                return true;\n              }\n            }\n          }\n\n          return false;\n        };\n        /* Sorting\n        ---------------------------------------------------------------------- */\n        // Document order sorting\n\n        sortOrder = hasCompare ? function (a, b) {\n          // Flag for duplicate removal\n          if (a === b) {\n            hasDuplicate = true;\n            return 0;\n          } // Sort on method existence if only one input has compareDocumentPosition\n\n\n          var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;\n\n          if (compare) {\n            return compare;\n          } // Calculate position if both inputs belong to the same document\n\n\n          compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) : // Otherwise we know they are disconnected\n          1; // Disconnected nodes\n\n          if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {\n            // Choose the first element that is related to our preferred document\n            if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {\n              return -1;\n            }\n\n            if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {\n              return 1;\n            } // Maintain original order\n\n\n            return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;\n          }\n\n          return compare & 4 ? -1 : 1;\n        } : function (a, b) {\n          // Exit early if the nodes are identical\n          if (a === b) {\n            hasDuplicate = true;\n            return 0;\n          }\n\n          var cur,\n              i = 0,\n              aup = a.parentNode,\n              bup = b.parentNode,\n              ap = [a],\n              bp = [b]; // Parentless nodes are either documents or disconnected\n\n          if (!aup || !bup) {\n            return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0; // If the nodes are siblings, we can do a quick check\n          } else if (aup === bup) {\n            return siblingCheck(a, b);\n          } // Otherwise we need full lists of their ancestors for comparison\n\n\n          cur = a;\n\n          while (cur = cur.parentNode) {\n            ap.unshift(cur);\n          }\n\n          cur = b;\n\n          while (cur = cur.parentNode) {\n            bp.unshift(cur);\n          } // Walk down the tree looking for a discrepancy\n\n\n          while (ap[i] === bp[i]) {\n            i++;\n          }\n\n          return i ? // Do a sibling check if the nodes have a common ancestor\n          siblingCheck(ap[i], bp[i]) : // Otherwise nodes in our document sort first\n          ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;\n        };\n        return document;\n      };\n\n      Sizzle.matches = function (expr, elements) {\n        return Sizzle(expr, null, null, elements);\n      };\n\n      Sizzle.matchesSelector = function (elem, expr) {\n        // Set document vars if needed\n        if ((elem.ownerDocument || elem) !== document) {\n          setDocument(elem);\n        }\n\n        if (support.matchesSelector && documentIsHTML && !nonnativeSelectorCache[expr + \" \"] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {\n          try {\n            var ret = matches.call(elem, expr); // IE 9's matchesSelector returns false on disconnected nodes\n\n            if (ret || support.disconnectedMatch || // As well, disconnected nodes are said to be in a document\n            // fragment in IE 9\n            elem.document && elem.document.nodeType !== 11) {\n              return ret;\n            }\n          } catch (e) {\n            // [AdGuard Path]: Fix the cache value\n            nonnativeSelectorCache(expr, true);\n          }\n        }\n\n        return Sizzle(expr, document, null, [elem]).length > 0;\n      };\n\n      Sizzle.contains = function (context, elem) {\n        // Set document vars if needed\n        if ((context.ownerDocument || context) !== document) {\n          setDocument(context);\n        }\n\n        return contains(context, elem);\n      };\n\n      Sizzle.attr = function (elem, name) {\n        // Set document vars if needed\n        if ((elem.ownerDocument || elem) !== document) {\n          setDocument(elem);\n        }\n\n        var fn = Expr.attrHandle[name.toLowerCase()],\n            // Don't get fooled by Object.prototype properties (jQuery #13807)\n        val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;\n        return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n      };\n\n      Sizzle.escape = function (sel) {\n        return (sel + \"\").replace(rcssescape, fcssescape);\n      };\n\n      Sizzle.error = function (msg) {\n        throw new Error(\"Syntax error, unrecognized expression: \" + msg);\n      };\n      /**\n       * Document sorting and removing duplicates\n       * @param {ArrayLike} results\n       */\n\n\n      Sizzle.uniqueSort = function (results) {\n        var elem,\n            duplicates = [],\n            j = 0,\n            i = 0; // Unless we *know* we can detect duplicates, assume their presence\n\n        hasDuplicate = !support.detectDuplicates;\n        sortInput = !support.sortStable && results.slice(0);\n        results.sort(sortOrder);\n\n        if (hasDuplicate) {\n          while (elem = results[i++]) {\n            if (elem === results[i]) {\n              j = duplicates.push(i);\n            }\n          }\n\n          while (j--) {\n            results.splice(duplicates[j], 1);\n          }\n        } // Clear input after sorting to release objects\n        // See https://github.com/jquery/sizzle/pull/225\n\n\n        sortInput = null;\n        return results;\n      };\n      /**\n       * Utility function for retrieving the text value of an array of DOM nodes\n       * @param {Array|Element} elem\n       */\n\n\n      getText = Sizzle.getText = function (elem) {\n        var node,\n            ret = \"\",\n            i = 0,\n            nodeType = elem.nodeType;\n\n        if (!nodeType) {\n          // If no nodeType, this is expected to be an array\n          while (node = elem[i++]) {\n            // Do not traverse comment nodes\n            ret += getText(node);\n          }\n        } else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {\n          // Use textContent for elements\n          // innerText usage removed for consistency of new lines (jQuery #11153)\n          if (typeof elem.textContent === \"string\") {\n            return elem.textContent;\n          } else {\n            // Traverse its children\n            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n              ret += getText(elem);\n            }\n          }\n        } else if (nodeType === 3 || nodeType === 4) {\n          return elem.nodeValue;\n        } // Do not include comment or processing instruction nodes\n\n\n        return ret;\n      };\n\n      Expr = Sizzle.selectors = {\n        // Can be adjusted by the user\n        cacheLength: 50,\n        createPseudo: markFunction,\n        match: matchExpr,\n        attrHandle: {},\n        find: {},\n        relative: {\n          \">\": {\n            dir: \"parentNode\",\n            first: true\n          },\n          \" \": {\n            dir: \"parentNode\"\n          },\n          \"+\": {\n            dir: \"previousSibling\",\n            first: true\n          },\n          \"~\": {\n            dir: \"previousSibling\"\n          }\n        },\n        preFilter: {\n          \"ATTR\": function ATTR(match) {\n            match[1] = match[1].replace(runescape, funescape); // Move the given value to match[3] whether quoted or unquoted\n\n            match[3] = (match[3] || match[4] || match[5] || \"\").replace(runescape, funescape);\n\n            if (match[2] === \"~=\") {\n              match[3] = \" \" + match[3] + \" \";\n            }\n\n            return match.slice(0, 4);\n          },\n          \"CHILD\": function CHILD(match) {\n            /* matches from matchExpr[\"CHILD\"]\n            \t1 type (only|nth|...)\n            \t2 what (child|of-type)\n            \t3 argument (even|odd|\\d*|\\d*n([+-]\\d+)?|...)\n            \t4 xn-component of xn+y argument ([+-]?\\d*n|)\n            \t5 sign of xn-component\n            \t6 x of xn-component\n            \t7 sign of y-component\n            \t8 y of y-component\n            */\n            match[1] = match[1].toLowerCase();\n\n            if (match[1].slice(0, 3) === \"nth\") {\n              // nth-* requires argument\n              if (!match[3]) {\n                Sizzle.error(match[0]);\n              } // numeric x and y parameters for Expr.filter.CHILD\n              // remember that false/true cast respectively to 0/1\n\n\n              match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === \"even\" || match[3] === \"odd\"));\n              match[5] = +(match[7] + match[8] || match[3] === \"odd\"); // other types prohibit arguments\n            } else if (match[3]) {\n              Sizzle.error(match[0]);\n            }\n\n            return match;\n          },\n          \"PSEUDO\": function PSEUDO(match) {\n            var excess,\n                unquoted = !match[6] && match[2];\n\n            if (matchExpr[\"CHILD\"].test(match[0])) {\n              return null;\n            } // Accept quoted arguments as-is\n\n\n            if (match[3]) {\n              match[2] = match[4] || match[5] || \"\"; // Strip excess characters from unquoted arguments\n            } else if (unquoted && rpseudo.test(unquoted) && ( // Get excess from tokenize (recursively)\n            excess = tokenize(unquoted, true)) && ( // advance to the next closing parenthesis\n            excess = unquoted.indexOf(\")\", unquoted.length - excess) - unquoted.length)) {\n              // excess is a negative index\n              match[0] = match[0].slice(0, excess);\n              match[2] = unquoted.slice(0, excess);\n            } // Return only captures needed by the pseudo filter method (type and argument)\n\n\n            return match.slice(0, 3);\n          }\n        },\n        filter: {\n          \"TAG\": function TAG(nodeNameSelector) {\n            var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();\n            return nodeNameSelector === \"*\" ? function () {\n              return true;\n            } : function (elem) {\n              return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;\n            };\n          },\n          \"CLASS\": function CLASS(className) {\n            var pattern = classCache[className + \" \"];\n            return pattern || (pattern = new RegExp(\"(^|\" + whitespace + \")\" + className + \"(\" + whitespace + \"|$)\")) && classCache(className, function (elem) {\n              return pattern.test(typeof elem.className === \"string\" && elem.className || typeof elem.getAttribute !== \"undefined\" && elem.getAttribute(\"class\") || \"\");\n            });\n          },\n          \"ATTR\": function ATTR(name, operator, check) {\n            return function (elem) {\n              var result = Sizzle.attr(elem, name);\n\n              if (result == null) {\n                return operator === \"!=\";\n              }\n\n              if (!operator) {\n                return true;\n              }\n\n              result += \"\";\n              return operator === \"=\" ? result === check : operator === \"!=\" ? result !== check : operator === \"^=\" ? check && result.indexOf(check) === 0 : operator === \"*=\" ? check && result.indexOf(check) > -1 : operator === \"$=\" ? check && result.slice(-check.length) === check : operator === \"~=\" ? (\" \" + result.replace(rwhitespace, \" \") + \" \").indexOf(check) > -1 : operator === \"|=\" ? result === check || result.slice(0, check.length + 1) === check + \"-\" : false;\n            };\n          },\n          \"CHILD\": function CHILD(type, what, argument, first, last) {\n            var simple = type.slice(0, 3) !== \"nth\",\n                forward = type.slice(-4) !== \"last\",\n                ofType = what === \"of-type\";\n            return first === 1 && last === 0 ? // Shortcut for :nth-*(n)\n            function (elem) {\n              return !!elem.parentNode;\n            } : function (elem, context, xml) {\n              var cache,\n                  uniqueCache,\n                  outerCache,\n                  node,\n                  nodeIndex,\n                  start,\n                  dir = simple !== forward ? \"nextSibling\" : \"previousSibling\",\n                  parent = elem.parentNode,\n                  name = ofType && elem.nodeName.toLowerCase(),\n                  useCache = !xml && !ofType,\n                  diff = false;\n\n              if (parent) {\n                // :(first|last|only)-(child|of-type)\n                if (simple) {\n                  while (dir) {\n                    node = elem;\n\n                    while (node = node[dir]) {\n                      if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {\n                        return false;\n                      }\n                    } // Reverse direction for :only-* (if we haven't yet done so)\n\n\n                    start = dir = type === \"only\" && !start && \"nextSibling\";\n                  }\n\n                  return true;\n                }\n\n                start = [forward ? parent.firstChild : parent.lastChild]; // non-xml :nth-child(...) stores cache data on `parent`\n\n                if (forward && useCache) {\n                  // Seek `elem` from a previously-cached index\n                  // ...in a gzip-friendly way\n                  node = parent;\n                  outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                  // Defend against cloned attroperties (jQuery gh-1709)\n\n                  uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                  cache = uniqueCache[type] || [];\n                  nodeIndex = cache[0] === dirruns && cache[1];\n                  diff = nodeIndex && cache[2];\n                  node = nodeIndex && parent.childNodes[nodeIndex];\n\n                  while (node = ++nodeIndex && node && node[dir] || ( // Fallback to seeking `elem` from the start\n                  diff = nodeIndex = 0) || start.pop()) {\n                    // When found, cache indexes on `parent` and break\n                    if (node.nodeType === 1 && ++diff && node === elem) {\n                      uniqueCache[type] = [dirruns, nodeIndex, diff];\n                      break;\n                    }\n                  }\n                } else {\n                  // Use previously-cached element index if available\n                  if (useCache) {\n                    // ...in a gzip-friendly way\n                    node = elem;\n                    outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                    // Defend against cloned attroperties (jQuery gh-1709)\n\n                    uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                    cache = uniqueCache[type] || [];\n                    nodeIndex = cache[0] === dirruns && cache[1];\n                    diff = nodeIndex;\n                  } // xml :nth-child(...)\n                  // or :nth-last-child(...) or :nth(-last)?-of-type(...)\n\n\n                  if (diff === false) {\n                    // Use the same loop as above to seek `elem` from the start\n                    while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {\n                      if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {\n                        // Cache the index of each encountered element\n                        if (useCache) {\n                          outerCache = node[expando] || (node[expando] = {}); // Support: IE <9 only\n                          // Defend against cloned attroperties (jQuery gh-1709)\n\n                          uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});\n                          uniqueCache[type] = [dirruns, diff];\n                        }\n\n                        if (node === elem) {\n                          break;\n                        }\n                      }\n                    }\n                  }\n                } // Incorporate the offset, then check against cycle size\n\n\n                diff -= last;\n                return diff === first || diff % first === 0 && diff / first >= 0;\n              }\n            };\n          },\n          \"PSEUDO\": function PSEUDO(pseudo, argument) {\n            // pseudo-class names are case-insensitive\n            // http://www.w3.org/TR/selectors/#pseudo-classes\n            // Prioritize by case sensitivity in case custom pseudos are added with uppercase letters\n            // Remember that setFilters inherits from pseudos\n            var args,\n                fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error(\"unsupported pseudo: \" + pseudo); // The user may use createPseudo to indicate that\n            // arguments are needed to create the filter function\n            // just as Sizzle does\n\n            if (fn[expando]) {\n              return fn(argument);\n            } // But maintain support for old signatures\n\n\n            if (fn.length > 1) {\n              args = [pseudo, pseudo, \"\", argument];\n              return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {\n                var idx,\n                    matched = fn(seed, argument),\n                    i = matched.length;\n\n                while (i--) {\n                  idx = indexOf(seed, matched[i]);\n                  seed[idx] = !(matches[idx] = matched[i]);\n                }\n              }) : function (elem) {\n                return fn(elem, 0, args);\n              };\n            }\n\n            return fn;\n          }\n        },\n        pseudos: {\n          // Potentially complex pseudos\n          \"not\": markFunction(function (selector) {\n            // Trim the selector passed to compile\n            // to avoid treating leading and trailing\n            // spaces as combinators\n            var input = [],\n                results = [],\n                matcher = compile(selector.replace(rtrim, \"$1\"));\n            return matcher[expando] ? markFunction(function (seed, matches, context, xml) {\n              var elem,\n                  unmatched = matcher(seed, null, xml, []),\n                  i = seed.length; // Match elements unmatched by `matcher`\n\n              while (i--) {\n                if (elem = unmatched[i]) {\n                  seed[i] = !(matches[i] = elem);\n                }\n              }\n            }) : function (elem, context, xml) {\n              input[0] = elem;\n              matcher(input, null, xml, results); // Don't keep the element (issue #299)\n\n              input[0] = null;\n              return !results.pop();\n            };\n          }),\n          \"has\": markFunction(function (selector) {\n            if (typeof selector === \"string\") {\n              Sizzle.compile(selector);\n            }\n\n            return function (elem) {\n              return Sizzle(selector, elem).length > 0;\n            };\n          }),\n          // Removed :contains pseudo-class declaration\n          // \"Whether an element is represented by a :lang() selector\n          // is based solely on the element's language value\n          // being equal to the identifier C,\n          // or beginning with the identifier C immediately followed by \"-\".\n          // The matching of C against the element's language value is performed case-insensitively.\n          // The identifier C does not have to be a valid language name.\"\n          // http://www.w3.org/TR/selectors/#lang-pseudo\n          \"lang\": markFunction(function (lang) {\n            // lang value must be a valid identifier\n            if (!ridentifier.test(lang || \"\")) {\n              Sizzle.error(\"unsupported lang: \" + lang);\n            }\n\n            lang = lang.replace(runescape, funescape).toLowerCase();\n            return function (elem) {\n              var elemLang;\n\n              do {\n                if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute(\"xml:lang\") || elem.getAttribute(\"lang\")) {\n                  elemLang = elemLang.toLowerCase();\n                  return elemLang === lang || elemLang.indexOf(lang + \"-\") === 0;\n                }\n              } while ((elem = elem.parentNode) && elem.nodeType === 1);\n\n              return false;\n            };\n          }),\n          // Miscellaneous\n          \"target\": function target(elem) {\n            var hash = window.location && window.location.hash;\n            return hash && hash.slice(1) === elem.id;\n          },\n          \"root\": function root(elem) {\n            return elem === docElem;\n          },\n          \"focus\": function focus(elem) {\n            return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);\n          },\n          // Boolean properties\n          \"enabled\": createDisabledPseudo(false),\n          \"disabled\": createDisabledPseudo(true),\n          \"checked\": function checked(elem) {\n            // In CSS3, :checked should return both checked and selected elements\n            // http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked\n            var nodeName = elem.nodeName.toLowerCase();\n            return nodeName === \"input\" && !!elem.checked || nodeName === \"option\" && !!elem.selected;\n          },\n          \"selected\": function selected(elem) {\n            // Accessing this property makes selected-by-default\n            // options in Safari work properly\n            if (elem.parentNode) {\n              elem.parentNode.selectedIndex;\n            }\n\n            return elem.selected === true;\n          },\n          // Contents\n          \"empty\": function empty(elem) {\n            // http://www.w3.org/TR/selectors/#empty-pseudo\n            // :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),\n            //   but not by others (comment: 8; processing instruction: 7; etc.)\n            // nodeType < 6 works because attributes (2) do not appear as children\n            for (elem = elem.firstChild; elem; elem = elem.nextSibling) {\n              if (elem.nodeType < 6) {\n                return false;\n              }\n            }\n\n            return true;\n          } // Removed custom pseudo-classes\n\n        }\n      }; // Removed custom pseudo-classes\n      // Easy API for creating new setFilters\n\n      function setFilters() {}\n\n      setFilters.prototype = Expr.filters = Expr.pseudos;\n      Expr.setFilters = new setFilters();\n      /**\n       * [AdGuard Patch]:\n       * Sorts the tokens in order to mitigate the performance issues caused by matching slow pseudos first:\n       * https://github.com/AdguardTeam/ExtendedCss/issues/55#issuecomment-364058745\n       */\n\n      var sortTokenGroups = function () {\n        /**\n         * Splits compound selector into a list of simple selectors\n         *\n         * @param {*} tokens Tokens to split into groups\n         * @returns an array consisting of token groups (arrays) and relation tokens.\n         */\n        var splitCompoundSelector = function splitCompoundSelector(tokens) {\n          var groups = [];\n          var currentTokensGroup = [];\n          var maxIdx = tokens.length - 1;\n\n          for (var i = 0; i <= maxIdx; i++) {\n            var token = tokens[i];\n            var relative = Sizzle.selectors.relative[token.type];\n\n            if (relative) {\n              groups.push(currentTokensGroup);\n              groups.push(token);\n              currentTokensGroup = [];\n            } else {\n              currentTokensGroup.push(token);\n            }\n\n            if (i === maxIdx) {\n              groups.push(currentTokensGroup);\n            }\n          }\n\n          return groups;\n        };\n\n        var TOKEN_TYPES_VALUES = {\n          // nth-child, etc, always go last\n          \"CHILD\": 100,\n          \"ID\": 90,\n          \"CLASS\": 80,\n          \"TAG\": 70,\n          \"ATTR\": 70,\n          \"PSEUDO\": 60\n        };\n        var POSITIONAL_PSEUDOS = [\"nth\", \"first\", \"last\", \"eq\", \"even\", \"odd\", \"lt\", \"gt\", \"not\"];\n        /**\n         * A function that defines the sort order.\n         * Returns a value lesser than 0 if \"left\" is less than \"right\".\n         */\n\n        var compareFunction = function compareFunction(left, right) {\n          var leftValue = TOKEN_TYPES_VALUES[left.type];\n          var rightValue = TOKEN_TYPES_VALUES[right.type];\n          return leftValue - rightValue;\n        };\n        /**\n         * Checks if the specified tokens group is sortable.\n         * We do not re-sort tokens in case of any positional or child pseudos in the group\n         */\n\n\n        var isSortable = function isSortable(tokens) {\n          var iTokens = tokens.length;\n\n          while (iTokens--) {\n            var token = tokens[iTokens];\n\n            if (token.type === \"PSEUDO\" && POSITIONAL_PSEUDOS.indexOf(token.matches[0]) !== -1) {\n              return false;\n            }\n\n            if (token.type === \"CHILD\") {\n              return false;\n            }\n          }\n\n          return true;\n        };\n        /**\n         * Sorts the tokens in order to mitigate the issues caused by the left-to-right matching.\n         * The idea is change the tokens order so that Sizzle was matching fast selectors first (id, class),\n         * and slow selectors after that (and here I mean our slow custom pseudo classes).\n         *\n         * @param {Array} tokens An array of tokens to sort\n         * @returns {Array} A new re-sorted array\n         */\n\n\n        var sortTokens = function sortTokens(tokens) {\n          if (!tokens || tokens.length === 1) {\n            return tokens;\n          }\n\n          var sortedTokens = [];\n          var groups = splitCompoundSelector(tokens);\n\n          for (var i = 0; i < groups.length; i++) {\n            var group = groups[i];\n\n            if (group instanceof Array) {\n              if (isSortable(group)) {\n                group.sort(compareFunction);\n              }\n\n              sortedTokens = sortedTokens.concat(group);\n            } else {\n              sortedTokens.push(group);\n            }\n          }\n\n          return sortedTokens;\n        };\n        /**\n         * Sorts every tokens array inside of the specified \"groups\" array.\n         * See \"sortTokens\" methods for more information on how tokens are sorted.\n         *\n         * @param {Array} groups An array of tokens arrays.\n         * @returns {Array} A new array that consists of the same tokens arrays after sorting\n         */\n\n\n        var sortTokenGroups = function sortTokenGroups(groups) {\n          var sortedGroups = [];\n          var len = groups.length;\n          var i = 0;\n\n          for (; i < len; i++) {\n            sortedGroups.push(sortTokens(groups[i]));\n          }\n\n          return sortedGroups;\n        }; // Expose\n\n\n        return sortTokenGroups;\n      }();\n      /**\n       * Creates custom policy to use TrustedTypes CSP policy\n       * https://w3c.github.io/webappsec-trusted-types/dist/spec/\n       */\n\n\n      var AGPolicy = function createPolicy() {\n        var defaultPolicy = {\n          createHTML: function createHTML(input) {\n            return input;\n          },\n          createScript: function createScript(input) {\n            return input;\n          },\n          createScriptURL: function createScriptURL(input) {\n            return input;\n          }\n        };\n\n        if (window.trustedTypes && window.trustedTypes.createPolicy) {\n          return window.trustedTypes.createPolicy(\"AGPolicy\", defaultPolicy);\n        }\n\n        return defaultPolicy;\n      }();\n      /**\n       * [AdGuard Patch]:\n       * Removes trailing spaces from the tokens list\n       *\n       * @param {*} tokens An array of Sizzle tokens to post-process\n       */\n\n\n      function removeTrailingSpaces(tokens) {\n        var iTokens = tokens.length;\n\n        while (iTokens--) {\n          var token = tokens[iTokens];\n\n          if (token.type === \" \") {\n            tokens.length = iTokens;\n          } else {\n            break;\n          }\n        }\n      }\n      /**\n       * [AdGuard Patch]:\n       * An object with the information about selectors and their token representation\n       * @typedef {{selectorText: string, groups: Array}} SelectorData\n       * @property {string} selectorText A CSS selector text\n       * @property {Array} groups An array of token groups corresponding to that selector\n       */\n\n      /**\n       * [AdGuard Patch]:\n       * This method processes parsed token groups, divides them into a number of selectors\n       * and makes sure that each selector's tokens are cached properly in Sizzle.\n       *\n       * @param {*} groups Token groups (see {@link Sizzle.tokenize})\n       * @returns {Array.<SelectorData>} An array of selectors data we got from the groups\n       */\n\n\n      function tokenGroupsToSelectors(groups) {\n        // Remove trailing spaces which we can encounter in tolerant mode\n        // We're doing it in tolerant mode only as this is the only case when\n        // encountering trailing spaces is expected\n        removeTrailingSpaces(groups[groups.length - 1]); // We need sorted tokens to make cache work properly\n\n        var sortedGroups = sortTokenGroups(groups);\n        var selectors = [];\n\n        for (var i = 0; i < groups.length; i++) {\n          var tokenGroups = groups[i];\n          var selectorText = toSelector(tokenGroups);\n          selectors.push({\n            // Sizzle expects an array of token groups when compiling a selector\n            groups: [tokenGroups],\n            selectorText: selectorText\n          }); // Now make sure that selector tokens are cached\n\n          var tokensCacheItem = {\n            groups: tokenGroups,\n            sortedGroups: [sortedGroups[i]]\n          };\n          tokenCache(selectorText, tokensCacheItem);\n        }\n\n        return selectors;\n      }\n      /**\n       * [AdGuard Patch]:\n       * Add an additional argument for Sizzle.tokenize which indicates that it\n       * should not throw on invalid tokens, and instead should return tokens\n       * that it has produced so far.\n       *\n       * One more additional argument that allow to choose if you want to receive sorted or unsorted tokens\n       * The problem is that the re-sorted selectors are valid for Sizzle, but not for the browser.\n       * options.returnUnsorted -- return unsorted tokens if true.\n       * options.cacheOnly -- return cached result only. Required for unit-tests.\n       *\n       * @param {*} options Optional configuration object with two additional flags\n       * (options.tolerant, options.returnUnsorted, options.cacheOnly) -- see patches #5 and #6 notes\n       */\n\n\n      tokenize = Sizzle.tokenize = function (selector, parseOnly, options) {\n        var matched,\n            match,\n            tokens,\n            type,\n            soFar,\n            groups,\n            preFilters,\n            cached = tokenCache[selector + \" \"];\n        var tolerant = options && options.tolerant;\n        var returnUnsorted = options && options.returnUnsorted;\n        var cacheOnly = options && options.cacheOnly;\n\n        if (cached) {\n          if (parseOnly) {\n            return 0;\n          } else {\n            return (returnUnsorted ? cached.groups : cached.sortedGroups).slice(0);\n          }\n        }\n\n        if (cacheOnly) {\n          return null;\n        }\n\n        soFar = selector;\n        groups = [];\n        preFilters = Expr.preFilter;\n\n        while (soFar) {\n          // Comma and first run\n          if (!matched || (match = rcomma.exec(soFar))) {\n            if (match) {\n              // Don't consume trailing commas as valid\n              soFar = soFar.slice(match[0].length) || soFar;\n            }\n\n            groups.push(tokens = []);\n          }\n\n          matched = false; // Combinators\n\n          if (match = rcombinators.exec(soFar)) {\n            matched = match.shift();\n            tokens.push({\n              value: matched,\n              // Cast descendant combinators to space\n              type: match[0].replace(rtrim, \" \")\n            });\n            soFar = soFar.slice(matched.length);\n          } // Filters\n\n\n          for (type in Expr.filter) {\n            if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {\n              matched = match.shift();\n              tokens.push({\n                value: matched,\n                type: type,\n                matches: match\n              });\n              soFar = soFar.slice(matched.length);\n            }\n          }\n\n          if (!matched) {\n            break;\n          }\n        } // Return the length of the invalid excess\n        // if we're just parsing\n        // Otherwise, throw an error or return tokens\n\n\n        var invalidLen = soFar.length;\n\n        if (parseOnly) {\n          return invalidLen;\n        }\n\n        if (invalidLen !== 0 && !tolerant) {\n          Sizzle.error(selector); // Throws an error.\n        }\n\n        if (tolerant) {\n          /**\n           * [AdGuard Patch]:\n           * In tolerant mode we return a special object that constists of\n           * an array of parsed selectors (and their tokens) and a \"nextIndex\" field\n           * that points to an index after which we're not able to parse selectors farther.\n           */\n          var nextIndex = selector.length - invalidLen;\n          var selectors = tokenGroupsToSelectors(groups);\n          return {\n            selectors: selectors,\n            nextIndex: nextIndex\n          };\n        }\n        /** [AdGuard Patch]: Sorting tokens */\n\n\n        var sortedGroups = sortTokenGroups(groups);\n        /** [AdGuard Patch]: Change the way tokens are cached */\n\n        var tokensCacheItem = {\n          groups: groups,\n          sortedGroups: sortedGroups\n        };\n        tokensCacheItem = tokenCache(selector, tokensCacheItem);\n        return (returnUnsorted ? tokensCacheItem.groups : tokensCacheItem.sortedGroups).slice(0);\n      };\n\n      function toSelector(tokens) {\n        var i = 0,\n            len = tokens.length,\n            selector = \"\";\n\n        for (; i < len; i++) {\n          selector += tokens[i].value;\n        }\n\n        return selector;\n      }\n\n      function addCombinator(matcher, combinator, base) {\n        var dir = combinator.dir,\n            skip = combinator.next,\n            key = skip || dir,\n            checkNonElements = base && key === \"parentNode\",\n            doneName = done++;\n        return combinator.first ? // Check against closest ancestor/preceding element\n        function (elem, context, xml) {\n          while (elem = elem[dir]) {\n            if (elem.nodeType === 1 || checkNonElements) {\n              return matcher(elem, context, xml);\n            }\n          }\n\n          return false;\n        } : // Check against all ancestor/preceding elements\n        function (elem, context, xml) {\n          var oldCache,\n              uniqueCache,\n              outerCache,\n              newCache = [dirruns, doneName]; // We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching\n\n          if (xml) {\n            while (elem = elem[dir]) {\n              if (elem.nodeType === 1 || checkNonElements) {\n                if (matcher(elem, context, xml)) {\n                  return true;\n                }\n              }\n            }\n          } else {\n            while (elem = elem[dir]) {\n              if (elem.nodeType === 1 || checkNonElements) {\n                outerCache = elem[expando] || (elem[expando] = {}); // Support: IE <9 only\n                // Defend against cloned attroperties (jQuery gh-1709)\n\n                uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});\n\n                if (skip && skip === elem.nodeName.toLowerCase()) {\n                  elem = elem[dir] || elem;\n                } else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {\n                  // Assign to newCache so results back-propagate to previous elements\n                  return newCache[2] = oldCache[2];\n                } else {\n                  // Reuse newcache so results back-propagate to previous elements\n                  uniqueCache[key] = newCache; // A match means we're done; a fail means we have to keep checking\n\n                  if (newCache[2] = matcher(elem, context, xml)) {\n                    return true;\n                  }\n                }\n              }\n            }\n          }\n\n          return false;\n        };\n      }\n\n      function elementMatcher(matchers) {\n        return matchers.length > 1 ? function (elem, context, xml) {\n          var i = matchers.length;\n\n          while (i--) {\n            if (!matchers[i](elem, context, xml)) {\n              return false;\n            }\n          }\n\n          return true;\n        } : matchers[0];\n      }\n\n      function multipleContexts(selector, contexts, results) {\n        var i = 0,\n            len = contexts.length;\n\n        for (; i < len; i++) {\n          Sizzle(selector, contexts[i], results);\n        }\n\n        return results;\n      }\n\n      function condense(unmatched, map, filter, context, xml) {\n        var elem,\n            newUnmatched = [],\n            i = 0,\n            len = unmatched.length,\n            mapped = map != null;\n\n        for (; i < len; i++) {\n          if (elem = unmatched[i]) {\n            if (!filter || filter(elem, context, xml)) {\n              newUnmatched.push(elem);\n\n              if (mapped) {\n                map.push(i);\n              }\n            }\n          }\n        }\n\n        return newUnmatched;\n      }\n\n      function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {\n        if (postFilter && !postFilter[expando]) {\n          postFilter = setMatcher(postFilter);\n        }\n\n        if (postFinder && !postFinder[expando]) {\n          postFinder = setMatcher(postFinder, postSelector);\n        }\n\n        return markFunction(function (seed, results, context, xml) {\n          var temp,\n              i,\n              elem,\n              preMap = [],\n              postMap = [],\n              preexisting = results.length,\n              // Get initial elements from seed or context\n          elems = seed || multipleContexts(selector || \"*\", context.nodeType ? [context] : context, []),\n              // Prefilter to get matcher input, preserving a map for seed-results synchronization\n          matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,\n              matcherOut = matcher ? // If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,\n          postFinder || (seed ? preFilter : preexisting || postFilter) ? // ...intermediate processing is necessary\n          [] : // ...otherwise use results directly\n          results : matcherIn; // Find primary matches\n\n          if (matcher) {\n            matcher(matcherIn, matcherOut, context, xml);\n          } // Apply postFilter\n\n\n          if (postFilter) {\n            temp = condense(matcherOut, postMap);\n            postFilter(temp, [], context, xml); // Un-match failing elements by moving them back to matcherIn\n\n            i = temp.length;\n\n            while (i--) {\n              if (elem = temp[i]) {\n                matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);\n              }\n            }\n          }\n\n          if (seed) {\n            if (postFinder || preFilter) {\n              if (postFinder) {\n                // Get the final matcherOut by condensing this intermediate into postFinder contexts\n                temp = [];\n                i = matcherOut.length;\n\n                while (i--) {\n                  if (elem = matcherOut[i]) {\n                    // Restore matcherIn since elem is not yet a final match\n                    temp.push(matcherIn[i] = elem);\n                  }\n                }\n\n                postFinder(null, matcherOut = [], temp, xml);\n              } // Move matched elements from seed to results to keep them synchronized\n\n\n              i = matcherOut.length;\n\n              while (i--) {\n                if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {\n                  seed[temp] = !(results[temp] = elem);\n                }\n              }\n            } // Add elements to results, through postFinder if defined\n\n          } else {\n            matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);\n\n            if (postFinder) {\n              postFinder(null, results, matcherOut, xml);\n            } else {\n              push.apply(results, matcherOut);\n            }\n          }\n        });\n      }\n\n      function matcherFromTokens(tokens) {\n        var checkContext,\n            matcher,\n            j,\n            len = tokens.length,\n            leadingRelative = Expr.relative[tokens[0].type],\n            implicitRelative = leadingRelative || Expr.relative[\" \"],\n            i = leadingRelative ? 1 : 0,\n            // The foundational matcher ensures that elements are reachable from top-level context(s)\n        matchContext = addCombinator(function (elem) {\n          return elem === checkContext;\n        }, implicitRelative, true),\n            matchAnyContext = addCombinator(function (elem) {\n          return indexOf(checkContext, elem) > -1;\n        }, implicitRelative, true),\n            matchers = [function (elem, context, xml) {\n          var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml)); // Avoid hanging onto element (issue #299)\n\n          checkContext = null;\n          return ret;\n        }];\n\n        for (; i < len; i++) {\n          if (matcher = Expr.relative[tokens[i].type]) {\n            matchers = [addCombinator(elementMatcher(matchers), matcher)];\n          } else {\n            matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches); // Return special upon seeing a positional matcher\n\n            if (matcher[expando]) {\n              // Find the next relative operator (if any) for proper handling\n              j = ++i;\n\n              for (; j < len; j++) {\n                if (Expr.relative[tokens[j].type]) {\n                  break;\n                }\n              }\n\n              return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector( // If the preceding token was a descendant combinator, insert an implicit any-element `*`\n              tokens.slice(0, i - 1).concat({\n                value: tokens[i - 2].type === \" \" ? \"*\" : \"\"\n              })).replace(rtrim, \"$1\"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));\n            }\n\n            matchers.push(matcher);\n          }\n        }\n\n        return elementMatcher(matchers);\n      }\n\n      function matcherFromGroupMatchers(elementMatchers, setMatchers) {\n        var bySet = setMatchers.length > 0,\n            byElement = elementMatchers.length > 0,\n            superMatcher = function superMatcher(seed, context, xml, results, outermost) {\n          var elem,\n              j,\n              matcher,\n              matchedCount = 0,\n              i = \"0\",\n              unmatched = seed && [],\n              setMatched = [],\n              contextBackup = outermostContext,\n              // We must always have either seed elements or outermost context\n          elems = seed || byElement && Expr.find[\"TAG\"](\"*\", outermost),\n              // Use integer dirruns iff this is the outermost matcher\n          dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,\n              len = elems.length;\n\n          if (outermost) {\n            outermostContext = context === document || context || outermost;\n          } // Add elements passing elementMatchers directly to results\n          // Support: IE<9, Safari\n          // Tolerate NodeList properties (IE: \"length\"; Safari: <number>) matching elements by id\n\n\n          for (; i !== len && (elem = elems[i]) != null; i++) {\n            if (byElement && elem) {\n              j = 0;\n\n              if (!context && elem.ownerDocument !== document) {\n                setDocument(elem);\n                xml = !documentIsHTML;\n              }\n\n              while (matcher = elementMatchers[j++]) {\n                if (matcher(elem, context || document, xml)) {\n                  results.push(elem);\n                  break;\n                }\n              }\n\n              if (outermost) {\n                dirruns = dirrunsUnique;\n              }\n            } // Track unmatched elements for set filters\n\n\n            if (bySet) {\n              // They will have gone through all possible matchers\n              if (elem = !matcher && elem) {\n                matchedCount--;\n              } // Lengthen the array for every element, matched or not\n\n\n              if (seed) {\n                unmatched.push(elem);\n              }\n            }\n          } // `i` is now the count of elements visited above, and adding it to `matchedCount`\n          // makes the latter nonnegative.\n\n\n          matchedCount += i; // Apply set filters to unmatched elements\n          // NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`\n          // equals `i`), unless we didn't visit _any_ elements in the above loop because we have\n          // no element matchers and no seed.\n          // Incrementing an initially-string \"0\" `i` allows `i` to remain a string only in that\n          // case, which will result in a \"00\" `matchedCount` that differs from `i` but is also\n          // numerically zero.\n\n          if (bySet && i !== matchedCount) {\n            j = 0;\n\n            while (matcher = setMatchers[j++]) {\n              matcher(unmatched, setMatched, context, xml);\n            }\n\n            if (seed) {\n              // Reintegrate element matches to eliminate the need for sorting\n              if (matchedCount > 0) {\n                while (i--) {\n                  if (!(unmatched[i] || setMatched[i])) {\n                    setMatched[i] = pop.call(results);\n                  }\n                }\n              } // Discard index placeholder values to get only actual matches\n\n\n              setMatched = condense(setMatched);\n            } // Add matches to results\n\n\n            push.apply(results, setMatched); // Seedless set matches succeeding multiple successful matchers stipulate sorting\n\n            if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {\n              Sizzle.uniqueSort(results);\n            }\n          } // Override manipulation of globals by nested matchers\n\n\n          if (outermost) {\n            dirruns = dirrunsUnique;\n            outermostContext = contextBackup;\n          }\n\n          return unmatched;\n        };\n\n        return bySet ? markFunction(superMatcher) : superMatcher;\n      }\n\n      compile = Sizzle.compile = function (selector, match\n      /* Internal Use Only */\n      ) {\n        var i,\n            setMatchers = [],\n            elementMatchers = [],\n            cached = compilerCache[selector + \" \"];\n\n        if (!cached) {\n          // Generate a function of recursive functions that can be used to check each element\n          if (!match) {\n            match = tokenize(selector);\n          }\n\n          i = match.length;\n\n          while (i--) {\n            cached = matcherFromTokens(match[i]);\n\n            if (cached[expando]) {\n              setMatchers.push(cached);\n            } else {\n              elementMatchers.push(cached);\n            }\n          } // Cache the compiled function\n\n\n          cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers)); // Save selector and tokenization\n\n          cached.selector = selector;\n        }\n\n        return cached;\n      };\n      /**\n       * A low-level selection function that works with Sizzle's compiled\n       *  selector functions\n       * @param {String|Function} selector A selector or a pre-compiled\n       *  selector function built with Sizzle.compile\n       * @param {Element} context\n       * @param {Array} [results]\n       * @param {Array} [seed] A set of elements to match against\n       */\n\n\n      select = Sizzle.select = function (selector, context, results, seed) {\n        var i,\n            tokens,\n            token,\n            type,\n            find,\n            compiled = typeof selector === \"function\" && selector,\n            match = !seed && tokenize(selector = compiled.selector || selector);\n        results = results || []; // Try to minimize operations if there is only one selector in the list and no seed\n        // (the latter of which guarantees us context)\n\n        if (match.length === 1) {\n          // Reduce context if the leading compound selector is an ID\n          tokens = match[0] = match[0].slice(0);\n\n          if (tokens.length > 2 && (token = tokens[0]).type === \"ID\" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {\n            context = (Expr.find[\"ID\"](token.matches[0].replace(runescape, funescape), context) || [])[0];\n\n            if (!context) {\n              return results; // Precompiled matchers will still verify ancestry, so step up a level\n            } else if (compiled) {\n              context = context.parentNode;\n            }\n\n            selector = selector.slice(tokens.shift().value.length);\n          } // Fetch a seed set for right-to-left matching\n\n\n          i = matchExpr[\"needsContext\"].test(selector) ? 0 : tokens.length;\n\n          while (i--) {\n            token = tokens[i]; // Abort if we hit a combinator\n\n            if (Expr.relative[type = token.type]) {\n              break;\n            }\n\n            if (find = Expr.find[type]) {\n              // Search, expanding context for leading sibling combinators\n              if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {\n                // If seed is empty or no tokens remain, we can return early\n                tokens.splice(i, 1);\n                selector = seed.length && toSelector(tokens);\n\n                if (!selector) {\n                  push.apply(results, seed);\n                  return results;\n                }\n\n                break;\n              }\n            }\n          }\n        } // Compile and execute a filtering function if one is not provided\n        // Provide `match` to avoid retokenization if we modified the selector above\n\n\n        (compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);\n        return results;\n      }; // One-time assignments\n      // Sort stability\n\n\n      support.sortStable = expando.split(\"\").sort(sortOrder).join(\"\") === expando; // Support: Chrome 14-35+\n      // Always assume duplicates if they aren't passed to the comparison function\n\n      support.detectDuplicates = !!hasDuplicate; // Initialize against the default document\n\n      setDocument(); // Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)\n      // Detached nodes confoundingly follow *each other*\n\n      support.sortDetached = assert(function (el) {\n        // Should return 1, but returns 4 (following)\n        return el.compareDocumentPosition(document.createElement(\"fieldset\")) & 1;\n      }); // Support: IE<8\n      // Prevent attribute/property \"interpolation\"\n      // https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx\n\n      if (!assert(function (el) {\n        el.innerHTML = AGPolicy.createHTML(\"<a href='#'></a>\");\n        return el.firstChild.getAttribute(\"href\") === \"#\";\n      })) {\n        addHandle(\"type|href|height|width\", function (elem, name, isXML) {\n          if (!isXML) {\n            return elem.getAttribute(name, name.toLowerCase() === \"type\" ? 1 : 2);\n          }\n        });\n      } // Support: IE<9\n      // Use defaultValue in place of getAttribute(\"value\")\n\n\n      if (!support.attributes || !assert(function (el) {\n        el.innerHTML = AGPolicy.createHTML(\"<input/>\");\n        el.firstChild.setAttribute(\"value\", \"\");\n        return el.firstChild.getAttribute(\"value\") === \"\";\n      })) {\n        addHandle(\"value\", function (elem, name, isXML) {\n          if (!isXML && elem.nodeName.toLowerCase() === \"input\") {\n            return elem.defaultValue;\n          }\n        });\n      } // Support: IE<9\n      // Use getAttributeNode to fetch booleans when getAttribute lies\n\n\n      if (!assert(function (el) {\n        return el.getAttribute(\"disabled\") == null;\n      })) {\n        addHandle(booleans, function (elem, name, isXML) {\n          var val;\n\n          if (!isXML) {\n            return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;\n          }\n        });\n      } // EXPOSE\n      // Do not expose Sizzle to the global scope in the case of AdGuard ExtendedCss build\n\n\n      return Sizzle; // EXPOSE\n    }(window); //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n  }\n\n  return Sizzle;\n};\n\n/* jshint ignore:end */\n\n/**\n * Copyright 2016 Adguard Software Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class that extends Sizzle and adds support for \"matches-css\" pseudo element.\n */\n\nvar StylePropertyMatcher = function (window) {\n  var isPhantom = !!window._phantom;\n  var useFallback = isPhantom && !!window.getMatchedCSSRules;\n  /**\n   * Unquotes specified value\n   * Webkit-based browsers singlequotes <string> content property values\n   * Other browsers doublequotes content property values.\n   */\n\n  var removeContentQuotes = function removeContentQuotes(value) {\n    if (typeof value === 'string') {\n      return value.replace(/^([\"'])([\\s\\S]*)\\1$/, '$2');\n    }\n\n    return value;\n  };\n\n  var getComputedStyle = window.getComputedStyle.bind(window);\n  var getMatchedCSSRules = useFallback ? window.getMatchedCSSRules.bind(window) : null;\n  /**\n   * There is an issue in browsers based on old webkit:\n   * getComputedStyle(el, \":before\") is empty if element is not visible.\n   *\n   * To circumvent this issue we use getMatchedCSSRules instead.\n   *\n   * It appears that getMatchedCSSRules sorts the CSS rules\n   * in increasing order of specifities of corresponding selectors.\n   * We pick the css rule that is being applied to an element based on this assumption.\n   *\n   * @param element       DOM node\n   * @param pseudoElement Optional pseudoElement name\n   * @param propertyName  CSS property name\n   */\n\n  var getComputedStylePropertyValue = function getComputedStylePropertyValue(element, pseudoElement, propertyName) {\n    var value = '';\n\n    if (useFallback && pseudoElement) {\n      var cssRules = getMatchedCSSRules(element, pseudoElement) || [];\n      var i = cssRules.length;\n\n      while (i-- > 0 && !value) {\n        value = cssRules[i].style.getPropertyValue(propertyName);\n      }\n    } else {\n      var style = getComputedStyle(element, pseudoElement);\n\n      if (style) {\n        value = style.getPropertyValue(propertyName); // https://bugs.webkit.org/show_bug.cgi?id=93445\n\n        if (propertyName === 'opacity' && utils.isSafariBrowser) {\n          value = (Math.round(parseFloat(value) * 100) / 100).toString();\n        }\n      }\n    }\n\n    if (propertyName === 'content') {\n      value = removeContentQuotes(value);\n    }\n\n    return value;\n  };\n  /**\n   * Adds url parameter quotes for non-regex pattern\n   * @param {string} pattern\n   */\n\n\n  var addUrlQuotes = function addUrlQuotes(pattern) {\n    // for regex patterns\n    if (pattern[0] === '/' && pattern[pattern.length - 1] === '/' && pattern.indexOf('\\\\\"') < 10) {\n      // e.g. /^url\\\\([a-z]{4}:[a-z]{5}/\n      // or /^url\\\\(data\\\\:\\\\image\\\\/gif;base64.+/\n      var re = /(\\^)?url(\\\\)?\\\\\\((\\w|\\[\\w)/g;\n      return pattern.replace(re, '$1url$2\\\\\\(\\\\\"?$3');\n    } // for non-regex patterns\n\n\n    if (pattern.indexOf('url(\"') === -1) {\n      var _re = /url\\((.*?)\\)/g;\n      return pattern.replace(_re, 'url(\"$1\")');\n    }\n\n    return pattern;\n  };\n  /**\n   * Class that matches element style against the specified expression\n   * @member {string} propertyName\n   * @member {string} pseudoElement\n   * @member {RegExp} regex\n   */\n\n\n  var Matcher = function Matcher(propertyFilter, pseudoElement) {\n    this.pseudoElement = pseudoElement;\n\n    try {\n      var index = propertyFilter.indexOf(':');\n      this.propertyName = propertyFilter.substring(0, index).trim();\n      var pattern = propertyFilter.substring(index + 1).trim();\n      pattern = addUrlQuotes(pattern); // Unescaping pattern\n      // For non-regex patterns, (,),[,] should be unescaped, because we require escaping them in filter rules.\n      // For regex patterns, \",\\ should be escaped, because we manually escape those in extended-css-selector.js.\n\n      if (/^\\/.*\\/$/.test(pattern)) {\n        pattern = pattern.slice(1, -1);\n        this.regex = utils.pseudoArgToRegex(pattern);\n      } else {\n        pattern = pattern.replace(/\\\\([\\\\()[\\]\"])/g, '$1');\n        this.regex = utils.createURLRegex(pattern);\n      }\n    } catch (ex) {\n      utils.logError(\"StylePropertyMatcher: invalid match string \".concat(propertyFilter));\n    }\n  };\n  /**\n   * Function to check if element CSS property matches filter pattern\n   * @param {Element} element to check\n   */\n\n\n  Matcher.prototype.matches = function (element) {\n    if (!this.regex || !this.propertyName) {\n      return false;\n    }\n\n    var value = getComputedStylePropertyValue(element, this.pseudoElement, this.propertyName);\n    return value && this.regex.test(value);\n  };\n  /**\n   * Creates a new pseudo-class and registers it in Sizzle\n   */\n\n\n  var extendSizzle = function extendSizzle(sizzle) {\n    // First of all we should prepare Sizzle engine\n    sizzle.selectors.pseudos['matches-css'] = sizzle.selectors.createPseudo(function (propertyFilter) {\n      var matcher = new Matcher(propertyFilter);\n      return function (element) {\n        return matcher.matches(element);\n      };\n    });\n    sizzle.selectors.pseudos['matches-css-before'] = sizzle.selectors.createPseudo(function (propertyFilter) {\n      var matcher = new Matcher(propertyFilter, ':before');\n      return function (element) {\n        return matcher.matches(element);\n      };\n    });\n    sizzle.selectors.pseudos['matches-css-after'] = sizzle.selectors.createPseudo(function (propertyFilter) {\n      var matcher = new Matcher(propertyFilter, ':after');\n      return function (element) {\n        return matcher.matches(element);\n      };\n    });\n  }; // EXPOSE\n\n\n  return {\n    extendSizzle: extendSizzle\n  };\n}(window);\n\n/**\n * Copyright 2016 Adguard Software Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar matcherUtils = {};\nmatcherUtils.MutationObserver = window.MutationObserver || window.WebKitMutationObserver;\n/**\n * Parses argument of matcher pseudo (for matches-attr and matches-property)\n * @param {string} matcherFilter argument of pseudo class\n * @returns {Array}\n */\n\nmatcherUtils.parseMatcherFilter = function (matcherFilter) {\n  var FULL_MATCH_MARKER = '\"=\"';\n  var rawArgs = [];\n\n  if (matcherFilter.indexOf(FULL_MATCH_MARKER) === -1) {\n    // if there is only one pseudo arg\n    // e.g. :matches-attr(\"data-name\") or :matches-property(\"inner.prop\")\n    // Sizzle will parse it and get rid of quotes\n    // so it might be valid arg already without them\n    rawArgs.push(matcherFilter);\n  } else {\n    matcherFilter.split('=').forEach(function (arg) {\n      if (arg[0] === '\"' && arg[arg.length - 1] === '\"') {\n        rawArgs.push(arg.slice(1, -1));\n      }\n    });\n  }\n\n  return rawArgs;\n};\n/**\n * @typedef {Object} ArgData\n * @property {string} arg\n * @property {boolean} isRegexp\n */\n\n/**\n * Parses raw matcher arg\n * @param {string} rawArg\n * @returns {ArgData}\n */\n\n\nmatcherUtils.parseRawMatcherArg = function (rawArg) {\n  var arg = rawArg;\n  var isRegexp = !!rawArg && rawArg[0] === '/' && rawArg[rawArg.length - 1] === '/';\n\n  if (isRegexp) {\n    // to avoid at least such case — :matches-property(\"//\")\n    if (rawArg.length > 2) {\n      arg = utils.toRegExp(rawArg);\n    } else {\n      throw new Error(\"Invalid regexp: \".concat(rawArg));\n    }\n  }\n\n  return {\n    arg: arg,\n    isRegexp: isRegexp\n  };\n};\n/**\n * @typedef Chain\n * @property {Object} base\n * @property {string} prop\n * @property {string} value\n */\n\n/**\n * Checks if the property exists in the base object (recursively).\n * @param {Object} base\n * @param {ArgData[]} chain array of objects - parsed string property chain\n * @param {Array} [output=[]] result acc\n * @returns {Chain[]} array of objects\n */\n\n\nmatcherUtils.filterRootsByRegexpChain = function (base, chain) {\n  var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var tempProp = chain[0];\n\n  if (chain.length === 1) {\n    // eslint-disable-next-line no-restricted-syntax\n    for (var key in base) {\n      if (tempProp.isRegexp) {\n        if (tempProp.arg.test(key)) {\n          output.push({\n            base: base,\n            prop: key,\n            value: base[key]\n          });\n        }\n      } else if (tempProp.arg === key) {\n        output.push({\n          base: base,\n          prop: tempProp.arg,\n          value: base[key]\n        });\n      }\n    }\n\n    return output;\n  } // if there is a regexp prop in input chain\n  // e.g. 'unit./^ad.+/.src' for 'unit.ad-1gf2.src unit.ad-fgd34.src'),\n  // every base keys should be tested by regexp and it can be more that one results\n\n\n  if (tempProp.isRegexp) {\n    var nextProp = chain.slice(1);\n    var baseKeys = []; // eslint-disable-next-line no-restricted-syntax\n\n    for (var _key in base) {\n      if (tempProp.arg.test(_key)) {\n        baseKeys.push(_key);\n      }\n    }\n\n    baseKeys.forEach(function (key) {\n      var item = base[key];\n      matcherUtils.filterRootsByRegexpChain(item, nextProp, output);\n    });\n  } // avoid TypeError while accessing to null-prop's child\n\n\n  if (base === null) {\n    return;\n  }\n\n  var nextBase = base[tempProp.arg];\n  chain = chain.slice(1);\n\n  if (nextBase !== undefined) {\n    matcherUtils.filterRootsByRegexpChain(nextBase, chain, output);\n  }\n\n  return output;\n};\n/**\n * Validates parsed args of matches-property pseudo\n * @param {...ArgData} args\n */\n\n\nmatcherUtils.validatePropMatcherArgs = function () {\n  for (var _len = arguments.length, args = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  for (var i = 0; i < args.length; i += 1) {\n    if (args[i].isRegexp) {\n      if (!utils.startsWith(args[i].arg.toString(), '/') || !utils.endsWith(args[i].arg.toString(), '/')) {\n        return false;\n      } // simple arg check if it is not a regexp\n\n    } else if (!/^[\\w-]+$/.test(args[i].arg)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Class that extends Sizzle and adds support for \"matches-attr\" pseudo element.\n */\n\nvar AttributesMatcher = function () {\n  /**\n   * Class that matches element attributes against the specified expressions\n   * @param {ArgData} nameArg - parsed name argument\n   * @param {ArgData} valueArg - parsed value argument\n   * @param {string} pseudoElement\n   * @constructor\n   *\n   * @member {string|RegExp} attrName\n   * @member {boolean} isRegexpName\n   * @member {string|RegExp} attrValue\n   * @member {boolean} isRegexpValue\n   */\n  var AttrMatcher = function AttrMatcher(nameArg, valueArg, pseudoElement) {\n    this.pseudoElement = pseudoElement;\n    this.attrName = nameArg.arg;\n    this.isRegexpName = nameArg.isRegexp;\n    this.attrValue = valueArg.arg;\n    this.isRegexpValue = valueArg.isRegexp;\n  };\n  /**\n   * Function to check if element attributes matches filter pattern\n   * @param {Element} element to check\n   */\n\n\n  AttrMatcher.prototype.matches = function (element) {\n    var elAttrs = element.attributes;\n\n    if (elAttrs.length === 0 || !this.attrName) {\n      return false;\n    }\n\n    var i = 0;\n\n    while (i < elAttrs.length) {\n      var attr = elAttrs[i];\n      var matched = false;\n      var attrNameMatched = this.isRegexpName ? this.attrName.test(attr.name) : this.attrName === attr.name;\n\n      if (!this.attrValue) {\n        // for :matches-attr(\"/regex/\") or :matches-attr(\"attr-name\")\n        matched = attrNameMatched;\n      } else {\n        var attrValueMatched = this.isRegexpValue ? this.attrValue.test(attr.value) : this.attrValue === attr.value;\n        matched = attrNameMatched && attrValueMatched;\n      }\n\n      if (matched) {\n        return true;\n      }\n\n      i += 1;\n    }\n  };\n  /**\n   * Creates a new pseudo-class and registers it in Sizzle\n   */\n\n\n  var extendSizzle = function extendSizzle(sizzle) {\n    // First of all we should prepare Sizzle engine\n    sizzle.selectors.pseudos['matches-attr'] = sizzle.selectors.createPseudo(function (attrFilter) {\n      var _matcherUtils$parseMa = matcherUtils.parseMatcherFilter(attrFilter),\n          _matcherUtils$parseMa2 = _slicedToArray(_matcherUtils$parseMa, 2),\n          rawName = _matcherUtils$parseMa2[0],\n          rawValue = _matcherUtils$parseMa2[1];\n\n      var nameArg = matcherUtils.parseRawMatcherArg(rawName);\n      var valueArg = matcherUtils.parseRawMatcherArg(rawValue);\n\n      if (!attrFilter || !matcherUtils.validatePropMatcherArgs(nameArg, valueArg)) {\n        throw new Error(\"Invalid argument of :matches-attr pseudo class: \".concat(attrFilter));\n      }\n\n      var matcher = new AttrMatcher(nameArg, valueArg);\n      return function (element) {\n        return matcher.matches(element);\n      };\n    });\n  }; // EXPOSE\n\n\n  return {\n    extendSizzle: extendSizzle\n  };\n}();\n\n/**\n * Parses raw property arg\n * @param {string} input\n * @returns {ArgData[]} array of objects\n */\n\nvar parseRawPropChain = function parseRawPropChain(input) {\n  var PROPS_DIVIDER = '.';\n  var REGEXP_MARKER = '/';\n  var propsArr = [];\n  var str = input;\n\n  while (str.length > 0) {\n    if (utils.startsWith(str, PROPS_DIVIDER)) {\n      // for cases like '.prop.id' and 'nested..test'\n      throw new Error(\"Invalid chain property: \".concat(input));\n    }\n\n    if (!utils.startsWith(str, REGEXP_MARKER)) {\n      var isRegexp = false;\n      var dividerIndex = str.indexOf(PROPS_DIVIDER);\n\n      if (str.indexOf(PROPS_DIVIDER) === -1) {\n        // if there is no '.' left in str\n        // take the rest of str as prop\n        propsArr.push({\n          arg: str,\n          isRegexp: isRegexp\n        });\n        return propsArr;\n      } // else take prop from str\n\n\n      var prop = str.slice(0, dividerIndex); // for cases like 'asadf.?+/.test'\n\n      if (prop.indexOf(REGEXP_MARKER) > -1) {\n        // prop is '?+/'\n        throw new Error(\"Invalid chain property: \".concat(prop));\n      }\n\n      propsArr.push({\n        arg: prop,\n        isRegexp: isRegexp\n      }); // delete prop from str\n\n      str = str.slice(dividerIndex);\n    } else {\n      // deal with regexp\n      var propChunks = [];\n      propChunks.push(str.slice(0, 1)); // if str starts with '/', delete it from str and find closing regexp slash.\n      // note that chained property name can not include '/' or '.'\n      // so there is no checking for escaped characters\n\n      str = str.slice(1);\n      var regexEndIndex = str.indexOf(REGEXP_MARKER);\n\n      if (regexEndIndex < 1) {\n        // regexp should be at least === '/./'\n        // so we should avoid args like '/id' and 'test.//.id'\n        throw new Error(\"Invalid regexp: \".concat(REGEXP_MARKER).concat(str));\n      }\n\n      var _isRegexp = true; // take the rest regexp part\n\n      propChunks.push(str.slice(0, regexEndIndex + 1));\n\n      var _prop = utils.toRegExp(propChunks.join(''));\n\n      propsArr.push({\n        arg: _prop,\n        isRegexp: _isRegexp\n      }); // delete prop from str\n\n      str = str.slice(regexEndIndex + 1);\n    }\n\n    if (!str) {\n      return propsArr;\n    } // str should be like '.nextProp' now\n    // so 'zx.prop' or '.' is invalid\n\n\n    if (!utils.startsWith(str, PROPS_DIVIDER) || utils.startsWith(str, PROPS_DIVIDER) && str.length === 1) {\n      throw new Error(\"Invalid chain property: \".concat(input));\n    }\n\n    str = str.slice(1);\n  }\n};\n\nvar convertTypeFromStr = function convertTypeFromStr(value) {\n  var numValue = Number(value);\n  var output;\n\n  if (!Number.isNaN(numValue)) {\n    output = numValue;\n  } else {\n    switch (value) {\n      case 'undefined':\n        output = undefined;\n        break;\n\n      case 'null':\n        output = null;\n        break;\n\n      case 'true':\n        output = true;\n        break;\n\n      case 'false':\n        output = false;\n        break;\n\n      default:\n        output = value;\n    }\n  }\n\n  return output;\n};\n\nvar convertTypeIntoStr = function convertTypeIntoStr(value) {\n  var output;\n\n  switch (value) {\n    case undefined:\n      output = 'undefined';\n      break;\n\n    case null:\n      output = 'null';\n      break;\n\n    default:\n      output = value.toString();\n  }\n\n  return output;\n};\n/**\n * Class that extends Sizzle and adds support for \"matches-property\" pseudo element.\n */\n\n\nvar ElementPropertyMatcher = function () {\n  /**\n   * Class that matches element properties against the specified expressions\n   * @param {ArgData[]} propsChainArg - array of parsed props chain objects\n   * @param {ArgData} valueArg - parsed value argument\n   * @param {string} pseudoElement\n   * @constructor\n   *\n   * @member {Array} chainedProps\n   * @member {boolean} isRegexpName\n   * @member {string|RegExp} propValue\n   * @member {boolean} isRegexpValue\n   */\n  var PropMatcher = function PropMatcher(propsChainArg, valueArg, pseudoElement) {\n    this.pseudoElement = pseudoElement;\n    this.chainedProps = propsChainArg;\n    this.propValue = valueArg.arg;\n    this.isRegexpValue = valueArg.isRegexp;\n  };\n  /**\n   * Function to check if element properties matches filter pattern\n   * @param {Element} element to check\n   */\n\n\n  PropMatcher.prototype.matches = function (element) {\n    var ownerObjArr = matcherUtils.filterRootsByRegexpChain(element, this.chainedProps);\n\n    if (ownerObjArr.length === 0) {\n      return false;\n    }\n\n    var matched = true;\n\n    if (this.propValue) {\n      for (var i = 0; i < ownerObjArr.length; i += 1) {\n        var realValue = ownerObjArr[i].value;\n\n        if (this.isRegexpValue) {\n          matched = this.propValue.test(convertTypeIntoStr(realValue));\n        } else {\n          // handle 'null' and 'undefined' property values set as string\n          if (realValue === 'null' || realValue === 'undefined') {\n            matched = this.propValue === realValue;\n            break;\n          }\n\n          matched = convertTypeFromStr(this.propValue) === realValue;\n        }\n\n        if (matched) {\n          break;\n        }\n      }\n    }\n\n    return matched;\n  };\n  /**\n   * Creates a new pseudo-class and registers it in Sizzle\n   */\n\n\n  var extendSizzle = function extendSizzle(sizzle) {\n    // First of all we should prepare Sizzle engine\n    sizzle.selectors.pseudos['matches-property'] = sizzle.selectors.createPseudo(function (propertyFilter) {\n      if (!propertyFilter) {\n        throw new Error('No argument is given for :matches-property pseudo class');\n      }\n\n      var _matcherUtils$parseMa = matcherUtils.parseMatcherFilter(propertyFilter),\n          _matcherUtils$parseMa2 = _slicedToArray(_matcherUtils$parseMa, 2),\n          rawProp = _matcherUtils$parseMa2[0],\n          rawValue = _matcherUtils$parseMa2[1]; // chained property name can not include '/' or '.'\n      // so regex prop names with such escaped characters are invalid\n\n\n      if (rawProp.indexOf('\\\\/') > -1 || rawProp.indexOf('\\\\.') > -1) {\n        throw new Error(\"Invalid property name: \".concat(rawProp));\n      }\n\n      var propsChainArg = parseRawPropChain(rawProp);\n      var valueArg = matcherUtils.parseRawMatcherArg(rawValue);\n      var propsToValidate = [].concat(_toConsumableArray(propsChainArg), [valueArg]);\n\n      if (!matcherUtils.validatePropMatcherArgs(propsToValidate)) {\n        throw new Error(\"Invalid argument of :matches-property pseudo class: \".concat(propertyFilter));\n      }\n\n      var matcher = new PropMatcher(propsChainArg, valueArg);\n      return function (element) {\n        return matcher.matches(element);\n      };\n    });\n  }; // EXPOSE\n\n\n  return {\n    extendSizzle: extendSizzle\n  };\n}();\n\n/**\n * Copyright 2020 Adguard Software Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Class that extends Sizzle and adds support for :is() pseudo element.\n */\n\nvar IsAnyMatcher = function () {\n  /**\n   * Class that matches element by one of the selectors\n   * https://developer.mozilla.org/en-US/docs/Web/CSS/:is\n   * @param {Array} selectors\n   * @param {string} pseudoElement\n   * @constructor\n   */\n  var IsMatcher = function IsMatcher(selectors, pseudoElement) {\n    this.selectors = selectors;\n    this.pseudoElement = pseudoElement;\n  };\n  /**\n   * Function to check if element can be matched by any passed selector\n   * @param {Element} element to check\n   */\n\n\n  IsMatcher.prototype.matches = function (element) {\n    var isMatched = !!this.selectors.find(function (selector) {\n      var nodes = document.querySelectorAll(selector);\n      return Array.from(nodes).find(function (node) {\n        return node === element;\n      });\n    });\n    return isMatched;\n  };\n  /**\n   * Creates a new pseudo-class and registers it in Sizzle\n   */\n\n\n  var extendSizzle = function extendSizzle(sizzle) {\n    // First of all we should prepare Sizzle engine\n    sizzle.selectors.pseudos['is'] = sizzle.selectors.createPseudo(function (input) {\n      if (input === '') {\n        throw new Error(\"Invalid argument of :is pseudo-class: \".concat(input));\n      }\n\n      var selectors = input.split(',').map(function (s) {\n        return s.trim();\n      }); // collect valid selectors and log about invalid ones\n\n      var validSelectors = selectors.reduce(function (acc, selector) {\n        if (cssUtils.isSimpleSelectorValid(selector)) {\n          acc.push(selector);\n        } else {\n          utils.logInfo(\"Invalid selector passed to :is() pseudo-class: '\".concat(selector, \"'\"));\n        }\n\n        return acc;\n      }, []);\n      var matcher = new IsMatcher(validSelectors);\n      return function (element) {\n        return matcher.matches(element);\n      };\n    });\n  };\n\n  return {\n    extendSizzle: extendSizzle\n  };\n}();\n\n/**\n * Copyright 2021 Adguard Software Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Extended selector factory module, for creating extended selector classes.\n *\n * Extended selection capabilities description:\n * https://github.com/AdguardTeam/ExtendedCss/blob/master/README.md\n */\n\nvar ExtendedSelectorFactory = function () {\n  // while adding new markers, constants in other AdGuard repos should be corrected\n  // AdGuard browser extension : CssFilterRule.SUPPORTED_PSEUDO_CLASSES and CssFilterRule.EXTENDED_CSS_MARKERS\n  // tsurlfilter, SafariConverterLib : EXT_CSS_PSEUDO_INDICATORS\n  var PSEUDO_EXTENSIONS_MARKERS = [':has', ':contains', ':has-text', ':matches-css', ':-abp-has', ':-abp-has-text', ':if', ':if-not', ':xpath', ':nth-ancestor', ':upward', ':remove', ':matches-attr', ':matches-property', ':-abp-contains', ':is'];\n  var initialized = false;\n  var Sizzle;\n  /**\n   * Lazy initialization of the ExtendedSelectorFactory and objects that might be necessary for creating and applying styles.\n   * This method extends Sizzle engine that we use under the hood with our custom pseudo-classes.\n   */\n\n  function initialize() {\n    if (initialized) {\n      return;\n    }\n\n    initialized = true; // Our version of Sizzle is initialized lazily as well\n\n    Sizzle = initializeSizzle(); // Add :matches-css-*() support\n\n    StylePropertyMatcher.extendSizzle(Sizzle); // Add :matches-attr() support\n\n    AttributesMatcher.extendSizzle(Sizzle); // Add :matches-property() support\n\n    ElementPropertyMatcher.extendSizzle(Sizzle); // Add :is() support\n\n    IsAnyMatcher.extendSizzle(Sizzle); // Add :contains, :has-text, :-abp-contains support\n\n    var containsPseudo = Sizzle.selectors.createPseudo(function (text) {\n      if (/^\\s*\\/.*\\/[gmisuy]*\\s*$/.test(text)) {\n        text = text.trim();\n        var flagsIndex = text.lastIndexOf('/');\n        var flags = text.substring(flagsIndex + 1);\n        text = text.substr(0, flagsIndex + 1).slice(1, -1).replace(/\\\\([\\\\\"])/g, '$1');\n        var regex;\n\n        try {\n          regex = new RegExp(text, flags);\n        } catch (e) {\n          throw new Error(\"Invalid argument of :contains pseudo class: \".concat(text));\n        }\n\n        return function (elem) {\n          var elemTextContent = utils.nodeTextContentGetter.apply(elem);\n          return regex.test(elemTextContent);\n        };\n      }\n\n      text = text.replace(/\\\\([\\\\()[\\]\"])/g, '$1');\n      return function (elem) {\n        var elemTextContent = utils.nodeTextContentGetter.apply(elem);\n        return elemTextContent.indexOf(text) > -1;\n      };\n    });\n    Sizzle.selectors.pseudos['contains'] = containsPseudo;\n    Sizzle.selectors.pseudos['has-text'] = containsPseudo;\n    Sizzle.selectors.pseudos['-abp-contains'] = containsPseudo; // Add :if, :-abp-has support\n\n    Sizzle.selectors.pseudos['if'] = Sizzle.selectors.pseudos['has'];\n    Sizzle.selectors.pseudos['-abp-has'] = Sizzle.selectors.pseudos['has']; // Add :if-not support\n\n    Sizzle.selectors.pseudos['if-not'] = Sizzle.selectors.createPseudo(function (selector) {\n      if (typeof selector === 'string') {\n        Sizzle.compile(selector);\n      }\n\n      return function (elem) {\n        return Sizzle(selector, elem).length === 0;\n      };\n    });\n    registerParserOnlyTokens();\n  }\n  /**\n   * Registrate custom tokens for parser.\n   * Needed for proper work of pseudos:\n   * for checking if the token is last and pseudo-class arguments validation\n   */\n\n\n  function registerParserOnlyTokens() {\n    Sizzle.selectors.pseudos['xpath'] = Sizzle.selectors.createPseudo(function (selector) {\n      try {\n        document.createExpression(selector, null);\n      } catch (e) {\n        throw new Error(\"Invalid argument of :xpath pseudo class: \".concat(selector));\n      }\n\n      return function () {\n        return true;\n      };\n    });\n    Sizzle.selectors.pseudos['nth-ancestor'] = Sizzle.selectors.createPseudo(function (selector) {\n      var deep = Number(selector);\n\n      if (Number.isNaN(deep) || deep < 1 || deep >= 256) {\n        throw new Error(\"Invalid argument of :nth-ancestor pseudo class: \".concat(selector));\n      }\n\n      return function () {\n        return true;\n      };\n    });\n    Sizzle.selectors.pseudos['upward'] = Sizzle.selectors.createPseudo(function (input) {\n      if (input === '') {\n        throw new Error(\"Invalid argument of :upward pseudo class: \".concat(input));\n      } else if (Number.isInteger(+input) && (+input < 1 || +input >= 256)) {\n        throw new Error(\"Invalid argument of :upward pseudo class: \".concat(input));\n      }\n\n      return function () {\n        return true;\n      };\n    });\n    Sizzle.selectors.pseudos['remove'] = Sizzle.selectors.createPseudo(function (input) {\n      if (input !== '') {\n        throw new Error(\"Invalid argument of :remove pseudo class: \".concat(input));\n      }\n\n      return function () {\n        return true;\n      };\n    });\n  }\n  /**\n   * Checks if specified token can be used by document.querySelectorAll.\n   */\n\n\n  function isSimpleToken(token) {\n    var type = token.type;\n\n    if (type === 'ID' || type === 'CLASS' || type === 'ATTR' || type === 'TAG' || type === 'CHILD') {\n      // known simple tokens\n      return true;\n    }\n\n    if (type === 'PSEUDO') {\n      // check if value contains any of extended pseudo classes\n      var i = PSEUDO_EXTENSIONS_MARKERS.length;\n\n      while (i--) {\n        if (token.value.indexOf(PSEUDO_EXTENSIONS_MARKERS[i]) >= 0) {\n          return false;\n        }\n      }\n\n      return true;\n    } // all others aren't simple\n\n\n    return false;\n  }\n  /**\n   * Checks if specified token is a combinator\n   */\n\n\n  function isRelationToken(token) {\n    var type = token.type;\n    return type === ' ' || type === '>' || type === '+' || type === '~';\n  }\n  /**\n   * ExtendedSelectorParser is a helper class for creating various selector instances which\n   * all shares a method `querySelectorAll()` and `matches()` implementing different search strategies\n   * depending on a type of selector.\n   *\n   * Currently, there are 3 types:\n   *  A trait-less extended selector\n   *    - we directly feed selector strings to Sizzle.\n   *  A splitted extended selector\n   *    - such as #container #feedItem:has(.ads), where it is splitted to `#container` and `#feedItem:has(.ads)`.\n   */\n\n\n  function ExtendedSelectorParser(selectorText, tokens, debug) {\n    initialize();\n\n    if (typeof tokens === 'undefined') {\n      this.selectorText = cssUtils.normalize(selectorText); // Passing `returnUnsorted` in order to receive tokens in the order that's valid for the browser\n      // In Sizzle internally, the tokens are re-sorted: https://github.com/AdguardTeam/ExtendedCss/issues/55\n\n      this.tokens = Sizzle.tokenize(this.selectorText, false, {\n        returnUnsorted: true\n      });\n    } else {\n      this.selectorText = selectorText;\n      this.tokens = tokens;\n    }\n\n    if (debug === true) {\n      this.debug = true;\n    }\n  }\n\n  ExtendedSelectorParser.prototype = {\n    /**\n     * The main method, creates a selector instance depending on the type of a selector.\n     * @public\n     */\n    createSelector: function createSelector() {\n      var debug = this.debug;\n      var tokens = this.tokens;\n      var selectorText = this.selectorText;\n\n      if (tokens.length !== 1) {\n        // Comma-separate selector - can't optimize further\n        return new TraitLessSelector(selectorText, debug);\n      }\n\n      var xpathPart = this.getXpathPart();\n\n      if (typeof xpathPart !== 'undefined') {\n        return new XpathSelector(selectorText, xpathPart, debug);\n      }\n\n      var upwardPart = this.getUpwardPart();\n\n      if (typeof upwardPart !== 'undefined') {\n        var output;\n        var upwardDeep = parseInt(upwardPart, 10); // if upward parameter is not a number, we consider it as a selector\n\n        if (Number.isNaN(upwardDeep)) {\n          output = new UpwardSelector(selectorText, upwardPart, debug);\n        } else {\n          // upward works like nth-ancestor\n          var xpath = this.convertNthAncestorToken(upwardDeep);\n          output = new XpathSelector(selectorText, xpath, debug);\n        }\n\n        return output;\n      } // argument of pseudo-class remove;\n      // it's defined only if remove is parsed as last token\n      // and it's valid only if remove arg is empty string\n\n\n      var removePart = this.getRemovePart();\n\n      if (typeof removePart !== 'undefined') {\n        var hasValidRemovePart = removePart === '';\n        return new RemoveSelector(selectorText, hasValidRemovePart, debug);\n      }\n\n      tokens = tokens[0];\n      var l = tokens.length;\n      var lastRelTokenInd = this.getSplitPoint();\n\n      if (typeof lastRelTokenInd === 'undefined') {\n        try {\n          document.querySelector(selectorText);\n        } catch (e) {\n          return new TraitLessSelector(selectorText, debug);\n        }\n\n        return new NotAnExtendedSelector(selectorText, debug);\n      }\n\n      var simple = '';\n      var relation = null;\n      var complex = '';\n      var i = 0;\n\n      for (; i < lastRelTokenInd; i++) {\n        // build simple part\n        simple += tokens[i].value;\n      }\n\n      if (i > 0) {\n        // build relation part\n        relation = tokens[i++].type;\n      } // i is pointing to the start of a complex part.\n\n\n      for (; i < l; i++) {\n        complex += tokens[i].value;\n      }\n\n      return lastRelTokenInd === -1 ? new TraitLessSelector(selectorText, debug) : new SplittedSelector(selectorText, simple, relation, complex, debug);\n    },\n\n    /**\n     * @private\n     * @return {number|undefined} An index of a token that is split point.\n     * returns undefined if the selector does not contain any complex tokens\n     * or it is not eligible for splitting.\n     * Otherwise returns an integer indicating the index of the last relation token.\n     */\n    getSplitPoint: function getSplitPoint() {\n      var tokens = this.tokens[0]; // We split selector only when the last compound selector\n      // is the only extended selector.\n\n      var latestRelationTokenIndex = -1;\n      var haveMetComplexToken = false;\n\n      for (var i = 0, l = tokens.length; i < l; i++) {\n        var token = tokens[i];\n\n        if (isRelationToken(token)) {\n          if (haveMetComplexToken) {\n            return;\n          }\n\n          latestRelationTokenIndex = i;\n        } else if (!isSimpleToken(token)) {\n          haveMetComplexToken = true;\n        }\n      }\n\n      if (!haveMetComplexToken) {\n        return;\n      }\n\n      return latestRelationTokenIndex;\n    },\n\n    /**\n     * @private\n     * @return {string|undefined} xpath selector part if exists\n     * returns undefined if the selector does not contain xpath tokens\n     */\n    getXpathPart: function getXpathPart() {\n      var tokens = this.tokens[0];\n\n      for (var i = 0, tokensLength = tokens.length; i < tokensLength; i++) {\n        var token = tokens[i];\n\n        if (token.type === 'PSEUDO') {\n          var matches = token.matches;\n\n          if (matches && matches.length > 1) {\n            if (matches[0] === 'xpath') {\n              if (this.isLastToken(tokens, i)) {\n                throw new Error('Invalid pseudo: \\':xpath\\' should be at the end of the selector');\n              }\n\n              return matches[1];\n            }\n\n            if (matches[0] === 'nth-ancestor') {\n              if (this.isLastToken(tokens, i)) {\n                throw new Error('Invalid pseudo: \\':nth-ancestor\\' should be at the end of the selector');\n              }\n\n              var deep = matches[1];\n\n              if (deep > 0 && deep < 256) {\n                return this.convertNthAncestorToken(deep);\n              }\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * converts nth-ancestor/upward deep value to xpath equivalent\n     * @param {number} deep\n     * @return {string}\n     */\n    convertNthAncestorToken: function convertNthAncestorToken(deep) {\n      var result = '..';\n\n      while (deep > 1) {\n        result += '/..';\n        deep--;\n      }\n\n      return result;\n    },\n\n    /**\n     * Checks if the token is last,\n     * except of remove pseudo-class\n     * @param {Array} tokens\n     * @param {number} i index of token\n     * @returns {boolean}\n     */\n    isLastToken: function isLastToken(tokens, i) {\n      // check id the next parsed token is remove pseudo\n      var isNextRemoveToken = tokens[i + 1] && tokens[i + 1].type === 'PSEUDO' && tokens[i + 1].matches && tokens[i + 1].matches[0] === 'remove'; // check if the token is last\n      // and if it is not check if it is remove one\n      // which should be skipped\n\n      return i + 1 !== tokens.length && !isNextRemoveToken;\n    },\n\n    /**\n     * @private\n     * @return {string|undefined} upward parameter\n     * or undefined if the input does not contain upward tokens\n     */\n    getUpwardPart: function getUpwardPart() {\n      var tokens = this.tokens[0];\n\n      for (var i = 0, tokensLength = tokens.length; i < tokensLength; i++) {\n        var token = tokens[i];\n\n        if (token.type === 'PSEUDO') {\n          var matches = token.matches;\n\n          if (matches && matches.length > 1) {\n            if (matches[0] === 'upward') {\n              if (this.isLastToken(tokens, i)) {\n                throw new Error('Invalid pseudo: \\':upward\\' should be at the end of the selector');\n              }\n\n              return matches[1];\n            }\n          }\n        }\n      }\n    },\n\n    /**\n     * @private\n     * @return {string|undefined} remove parameter\n     * or undefined if the input does not contain remove tokens\n     */\n    getRemovePart: function getRemovePart() {\n      var tokens = this.tokens[0];\n\n      for (var i = 0, tokensLength = tokens.length; i < tokensLength; i++) {\n        var token = tokens[i];\n\n        if (token.type === 'PSEUDO') {\n          var matches = token.matches;\n\n          if (matches && matches.length > 1) {\n            if (matches[0] === 'remove') {\n              if (i + 1 !== tokensLength) {\n                throw new Error('Invalid pseudo: \\':remove\\' should be at the end of the selector');\n              }\n\n              return matches[1];\n            }\n          }\n        }\n      }\n    }\n  };\n  var globalDebuggingFlag = false;\n\n  function isDebugging() {\n    return globalDebuggingFlag || this.debug;\n  }\n  /**\n   * This class represents a selector which is not an extended selector.\n   * @param {string} selectorText\n   * @param {boolean=} debug\n   * @final\n   */\n\n\n  function NotAnExtendedSelector(selectorText, debug) {\n    this.selectorText = selectorText;\n    this.debug = debug;\n  }\n\n  NotAnExtendedSelector.prototype = {\n    querySelectorAll: function querySelectorAll() {\n      return document.querySelectorAll(this.selectorText);\n    },\n    matches: function matches(element) {\n      return element[utils.matchesPropertyName](this.selectorText);\n    },\n    isDebugging: isDebugging\n  };\n  /**\n   * A trait-less extended selector class.\n   * @param {string} selectorText\n   * @param {boolean=} debug\n   * @constructor\n   */\n\n  function TraitLessSelector(selectorText, debug) {\n    this.selectorText = selectorText;\n    this.debug = debug;\n    Sizzle.compile(selectorText);\n  }\n\n  TraitLessSelector.prototype = {\n    querySelectorAll: function querySelectorAll() {\n      return Sizzle(this.selectorText);\n    },\n\n    /** @final */\n    matches: function matches(element) {\n      return Sizzle.matchesSelector(element, this.selectorText);\n    },\n\n    /** @final */\n    isDebugging: isDebugging\n  };\n  /**\n   * Parental class for such pseudo-classes as xpath, upward, remove\n   * which are limited to be the last one token in selector\n   *\n   * @param {string} selectorText\n   * @param {string} pseudoClassArg pseudo-class arg\n   * @param {boolean=} debug\n   * @constructor\n   */\n\n  function BaseLastArgumentSelector(selectorText, pseudoClassArg, debug) {\n    this.selectorText = selectorText;\n    this.pseudoClassArg = pseudoClassArg;\n    this.debug = debug;\n    Sizzle.compile(this.selectorText);\n  }\n\n  BaseLastArgumentSelector.prototype = {\n    querySelectorAll: function querySelectorAll() {\n      var _this = this;\n\n      var resultNodes = [];\n      var simpleNodes;\n\n      if (this.selectorText) {\n        simpleNodes = Sizzle(this.selectorText);\n\n        if (!simpleNodes || !simpleNodes.length) {\n          return resultNodes;\n        }\n      } else {\n        simpleNodes = [document];\n      }\n\n      simpleNodes.forEach(function (node) {\n        _this.searchResultNodes(node, _this.pseudoClassArg, resultNodes);\n      });\n      return Sizzle.uniqueSort(resultNodes);\n    },\n\n    /** @final */\n    matches: function matches(element) {\n      var results = this.querySelectorAll();\n      return results.indexOf(element) > -1;\n    },\n\n    /** @final */\n    isDebugging: isDebugging,\n\n    /**\n     * Primitive method that returns all nodes if pseudo-class arg is defined.\n     * That logic works for remove pseudo-class,\n     * but for others it should be overridden.\n     * @param {Object} node context element\n     * @param {string} pseudoClassArg pseudo-class argument\n     * @param {Array} result\n     */\n    searchResultNodes: function searchResultNodes(node, pseudoClassArg, result) {\n      if (pseudoClassArg) {\n        result.push(node);\n      }\n    }\n  };\n  /**\n   * Xpath selector class\n   * Limited to support 'xpath' to be only the last one token in selector\n   * @param {string} selectorText\n   * @param {string} xpath value\n   * @param {boolean=} debug\n   * @constructor\n   * @augments BaseLastArgumentSelector\n   */\n\n  function XpathSelector(selectorText, xpath, debug) {\n    var NO_SELECTOR_MARKER = ':xpath(//';\n    var BODY_SELECTOR_REPLACER = 'body:xpath(//';\n    var modifiedSelectorText = selectorText; // Normally, a pseudo-class is applied to nodes selected by a selector -- selector:xpath(...).\n    // However, :xpath is special as the selector can be ommited.\n    // For any other pseudo-class that would mean \"apply to ALL DOM nodes\",\n    // but in case of :xpath it just means \"apply me to the document\".\n\n    if (utils.startsWith(selectorText, NO_SELECTOR_MARKER)) {\n      modifiedSelectorText = selectorText.replace(NO_SELECTOR_MARKER, BODY_SELECTOR_REPLACER);\n    }\n\n    BaseLastArgumentSelector.call(this, modifiedSelectorText, xpath, debug);\n  }\n\n  XpathSelector.prototype = Object.create(BaseLastArgumentSelector.prototype);\n  XpathSelector.prototype.constructor = XpathSelector;\n  /**\n   * Applies xpath pseudo-class to provided context node\n   * @param {Object} node context element\n   * @param {string} pseudoClassArg xpath\n   * @param {Array} result\n   * @override\n   */\n\n  XpathSelector.prototype.searchResultNodes = function (node, pseudoClassArg, result) {\n    var xpathResult = document.evaluate(pseudoClassArg, node, null, XPathResult.UNORDERED_NODE_ITERATOR_TYPE, null);\n    var iNode; // eslint-disable-next-line no-cond-assign\n\n    while (iNode = xpathResult.iterateNext()) {\n      result.push(iNode);\n    }\n  };\n  /**\n   * Upward selector class\n   * Limited to support 'upward' to be only the last one token in selector\n   * @param {string} selectorText\n   * @param {string} upwardSelector value\n   * @param {boolean=} debug\n   * @constructor\n   * @augments BaseLastArgumentSelector\n   */\n\n\n  function UpwardSelector(selectorText, upwardSelector, debug) {\n    BaseLastArgumentSelector.call(this, selectorText, upwardSelector, debug);\n  }\n\n  UpwardSelector.prototype = Object.create(BaseLastArgumentSelector.prototype);\n  UpwardSelector.prototype.constructor = UpwardSelector;\n  /**\n   * Applies upward pseudo-class to provided context node\n   * @param {Object} node context element\n   * @param {string} upwardSelector upward selector\n   * @param {Array} result\n   * @override\n   */\n\n  UpwardSelector.prototype.searchResultNodes = function (node, upwardSelector, result) {\n    if (upwardSelector !== '') {\n      var parent = node.parentElement;\n\n      if (parent === null) {\n        return;\n      }\n\n      node = parent.closest(upwardSelector);\n\n      if (node === null) {\n        return;\n      }\n    }\n\n    result.push(node);\n  };\n  /**\n   * Remove selector class\n   * Limited to support 'remove' to be only the last one token in selector\n   * @param {string} selectorText\n   * @param {boolean} hasValidRemovePart\n   * @param {boolean=} debug\n   * @constructor\n   * @augments BaseLastArgumentSelector\n   */\n\n\n  function RemoveSelector(selectorText, hasValidRemovePart, debug) {\n    var REMOVE_PSEUDO_MARKER = ':remove()';\n    var removeMarkerIndex = selectorText.indexOf(REMOVE_PSEUDO_MARKER); // deleting remove part of rule instead of which\n    // pseudo-property property 'remove' will be added by ExtendedCssParser\n\n    var modifiedSelectorText = selectorText.slice(0, removeMarkerIndex);\n    BaseLastArgumentSelector.call(this, modifiedSelectorText, hasValidRemovePart, debug); // mark extendedSelector as Remove one for ExtendedCssParser\n\n    this.isRemoveSelector = true;\n  }\n\n  RemoveSelector.prototype = Object.create(BaseLastArgumentSelector.prototype);\n  RemoveSelector.prototype.constructor = RemoveSelector;\n  /**\n   * A splitted extended selector class.\n   *\n   * #container #feedItem:has(.ads)\n   * +--------+                     simple\n   *           +                    relation\n   *            +-----------------+ complex\n   * We split selector only when the last selector is complex\n   * @param {string} selectorText\n   * @param {string} simple\n   * @param {string} relation\n   * @param {string} complex\n   * @param {boolean=} debug\n   * @constructor\n   * @extends TraitLessSelector\n   */\n\n  function SplittedSelector(selectorText, simple, relation, complex, debug) {\n    TraitLessSelector.call(this, selectorText, debug);\n    this.simple = simple;\n    this.relation = relation;\n    this.complex = complex;\n    Sizzle.compile(complex);\n  }\n\n  SplittedSelector.prototype = Object.create(TraitLessSelector.prototype);\n  SplittedSelector.prototype.constructor = SplittedSelector;\n  /** @override */\n\n  SplittedSelector.prototype.querySelectorAll = function () {\n    var _this2 = this;\n\n    var resultNodes = [];\n    var simpleNodes;\n    var simple = this.simple;\n    var relation;\n\n    if (simple) {\n      // First we use simple selector to narrow our search\n      simpleNodes = document.querySelectorAll(simple);\n\n      if (!simpleNodes || !simpleNodes.length) {\n        return resultNodes;\n      }\n\n      relation = this.relation;\n    } else {\n      simpleNodes = [document];\n      relation = ' ';\n    }\n\n    switch (relation) {\n      case ' ':\n        simpleNodes.forEach(function (node) {\n          _this2.relativeSearch(node, resultNodes);\n        });\n        break;\n\n      case '>':\n        {\n          simpleNodes.forEach(function (node) {\n            Object.values(node.children).forEach(function (childNode) {\n              if (_this2.matches(childNode)) {\n                resultNodes.push(childNode);\n              }\n            });\n          });\n          break;\n        }\n\n      case '+':\n        {\n          simpleNodes.forEach(function (node) {\n            var parentNode = node.parentNode;\n            Object.values(parentNode.children).forEach(function (childNode) {\n              if (_this2.matches(childNode) && childNode.previousElementSibling === node) {\n                resultNodes.push(childNode);\n              }\n            });\n          });\n          break;\n        }\n\n      case '~':\n        {\n          simpleNodes.forEach(function (node) {\n            var parentNode = node.parentNode;\n            Object.values(parentNode.children).forEach(function (childNode) {\n              if (_this2.matches(childNode) && node.compareDocumentPosition(childNode) === 4) {\n                resultNodes.push(childNode);\n              }\n            });\n          });\n          break;\n        }\n    }\n\n    return Sizzle.uniqueSort(resultNodes);\n  };\n  /**\n   * Performs a search of \"complex\" part relative to results for the \"simple\" part.\n   * @param {Node} node a node matching the \"simple\" part.\n   * @param {Node[]} result an array to append search result.\n   */\n\n\n  SplittedSelector.prototype.relativeSearch = function (node, results) {\n    Sizzle(this.complex, node, results);\n  };\n\n  return {\n    /**\n     * Wraps the inner class so that the instance is not exposed.\n     */\n    createSelector: function createSelector(selector, tokens, debug) {\n      return new ExtendedSelectorParser(selector, tokens, debug).createSelector();\n    },\n\n    /**\n     * Mark every selector as a selector being debugged, so that timing information\n     * for the selector is printed to the console.\n     */\n    enableGlobalDebugging: function enableGlobalDebugging() {\n      globalDebuggingFlag = true;\n    }\n  };\n}();\n\n/**\n * Copyright 2016 Adguard Software Ltd\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper class that parses stylesheets containing extended selectors\n * into ExtendedSelector instances and key-value maps of style declarations.\n * Please note, that it does not support any complex things like media queries and such.\n */\n\nvar ExtendedCssParser = function () {\n  var reDeclEnd = /[;}]/g;\n  var reDeclDivider = /[;:}]/g;\n  var reNonWhitespace = /\\S/g;\n  var Sizzle;\n  /**\n   * @param {string} cssText\n   * @constructor\n   */\n\n  function Parser(cssText) {\n    this.cssText = cssText;\n  }\n\n  Parser.prototype = {\n    error: function error(position) {\n      throw new Error(\"CssParser: parse error at position \".concat(this.posOffset + position));\n    },\n\n    /**\n     * Validates that the tokens correspond to a valid selector.\n     * Sizzle is different from browsers and some selectors that it tolerates aren't actually valid.\n     * For instance, \"div >\" won't work in a browser, but it will in Sizzle (it'd be the same as \"div > *\").\n     *\n     * @param {*} selectors An array of SelectorData (selector, groups)\n     * @returns {boolean} false if any of the groups are invalid\n     */\n    validateSelectors: function validateSelectors(selectors) {\n      var iSelectors = selectors.length;\n\n      while (iSelectors--) {\n        var groups = selectors[iSelectors].groups;\n        var iGroups = groups.length;\n\n        while (iGroups--) {\n          var tokens = groups[iGroups];\n          var lastToken = tokens[tokens.length - 1];\n\n          if (Sizzle.selectors.relative[lastToken.type]) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n\n    /**\n     * Parses a stylesheet and returns a list of pairs of an ExtendedSelector and a styles map.\n     * This method will throw an error in case of an obviously invalid input.\n     * If any of the selectors used in the stylesheet cannot be compiled into an ExtendedSelector,\n     * it will be ignored.\n     *\n     * @typedef {Object} ExtendedStyle\n     * @property {Object} selector An instance of the {@link ExtendedSelector} class\n     * @property {Object} styleMap A map of styles parsed\n     *\n     * @returns {Array.<ExtendedStyle>} An array of the styles parsed\n     */\n    parseCss: function parseCss() {\n      this.posOffset = 0;\n\n      if (!this.cssText) {\n        this.error(0);\n      }\n\n      var results = [];\n\n      while (this.cssText) {\n        // Apply tolerant tokenization.\n        var parseResult = Sizzle.tokenize(this.cssText, false, {\n          tolerant: true,\n          returnUnsorted: true\n        });\n        var selectorData = parseResult.selectors;\n        this.nextIndex = parseResult.nextIndex;\n\n        if (this.cssText.charCodeAt(this.nextIndex) !== 123 ||\n        /* charCode of '{' */\n        !this.validateSelectors(selectorData)) {\n          this.error(this.nextIndex);\n        }\n\n        this.nextIndex++; // Move the pointer to the start of style declaration.\n\n        var styleMap = this.parseNextStyle();\n        var debug = false; // If there is a style property 'debug', mark the selector\n        // as a debuggable selector, and delete the style declaration.\n\n        var debugPropertyValue = styleMap['debug'];\n\n        if (typeof debugPropertyValue !== 'undefined') {\n          if (debugPropertyValue === 'global') {\n            ExtendedSelectorFactory.enableGlobalDebugging();\n          }\n\n          debug = true;\n          delete styleMap['debug'];\n        } // Creating an ExtendedSelector instance for every selector we got from Sizzle.tokenize.\n        // This is quite important as Sizzle does a poor job at executing selectors like \"selector1, selector2\".\n\n\n        for (var i = 0, l = selectorData.length; i < l; i++) {\n          var data = selectorData[i];\n\n          try {\n            var extendedSelector = ExtendedSelectorFactory.createSelector(data.selectorText, data.groups, debug);\n\n            if (extendedSelector.pseudoClassArg && extendedSelector.isRemoveSelector) {\n              // if there is remove pseudo-class in rule,\n              // the element will be removed and no other styles will be applied\n              styleMap['remove'] = 'true';\n            }\n\n            results.push({\n              selector: extendedSelector,\n              style: styleMap\n            });\n          } catch (ex) {\n            utils.logError(\"ExtendedCssParser: ignoring invalid selector \".concat(data.selectorText));\n          }\n        }\n      }\n\n      return results;\n    },\n    parseNextStyle: function parseNextStyle() {\n      var styleMap = Object.create(null);\n      var bracketPos = this.parseUntilClosingBracket(styleMap); // Cut out matched portion from cssText.\n\n      reNonWhitespace.lastIndex = bracketPos + 1;\n      var match = reNonWhitespace.exec(this.cssText);\n\n      if (match === null) {\n        this.cssText = '';\n        return styleMap;\n      }\n\n      var matchPos = match.index;\n      this.cssText = this.cssText.slice(matchPos);\n      this.posOffset += matchPos;\n      return styleMap;\n    },\n\n    /**\n     * @return {number} an index of the next '}' in `this.cssText`.\n     */\n    parseUntilClosingBracket: function parseUntilClosingBracket(styleMap) {\n      // Expects \":\", \";\", and \"}\".\n      reDeclDivider.lastIndex = this.nextIndex;\n      var match = reDeclDivider.exec(this.cssText);\n\n      if (match === null) {\n        this.error(this.nextIndex);\n      }\n\n      var matchPos = match.index;\n      var matched = match[0];\n\n      if (matched === '}') {\n        return matchPos;\n      }\n\n      if (matched === ':') {\n        var colonIndex = matchPos; // Expects \";\" and \"}\".\n\n        reDeclEnd.lastIndex = colonIndex;\n        match = reDeclEnd.exec(this.cssText);\n\n        if (match === null) {\n          this.error(colonIndex);\n        }\n\n        matchPos = match.index;\n        matched = match[0]; // Populates the `styleMap` key-value map.\n\n        var property = this.cssText.slice(this.nextIndex, colonIndex).trim();\n        var value = this.cssText.slice(colonIndex + 1, matchPos).trim();\n        styleMap[property] = value; // If found \"}\", re-run the outer loop.\n\n        if (matched === '}') {\n          return matchPos;\n        }\n      } // matchPos is the position of the next ';'.\n      // Increase 'nextIndex' and re-run the loop.\n\n\n      this.nextIndex = matchPos + 1;\n      return this.parseUntilClosingBracket(styleMap); // Should be a subject of tail-call optimization.\n    }\n  };\n  return {\n    parseCss: function parseCss(cssText) {\n      Sizzle = initializeSizzle();\n      return new Parser(cssUtils.normalize(cssText)).parseCss();\n    }\n  };\n}();\n\n/**\n * This callback is used to get affected node elements and handle style properties\n * before they are applied to them if it is necessary\n * @callback beforeStyleApplied\n * @param {object} affectedElement - Object containing DOM node and rule to be applied\n * @return {object} affectedElement - Same or modified object containing DOM node and rule to be applied\n */\n\n/**\n * Extended css class\n *\n * @param {Object} configuration\n * @param {string} configuration.styleSheet - the CSS stylesheet text\n * @param {beforeStyleApplied} [configuration.beforeStyleApplied] - the callback that handles affected elements\n * @constructor\n */\n\nfunction ExtendedCss(configuration) {\n  if (!configuration) {\n    throw new Error('Configuration is not provided.');\n  }\n\n  var styleSheet = configuration.styleSheet;\n  var beforeStyleApplied = configuration.beforeStyleApplied;\n\n  if (beforeStyleApplied && typeof beforeStyleApplied !== 'function') {\n    // eslint-disable-next-line max-len\n    throw new Error(\"Wrong configuration. Type of 'beforeStyleApplied' field should be a function, received: \".concat(_typeof(beforeStyleApplied)));\n  } // We use EventTracker to track the event that is likely to cause the mutation.\n  // The problem is that we cannot use `window.event` directly from the mutation observer call\n  // as we're not in the event handler context anymore.\n\n\n  var EventTracker = function () {\n    var ignoredEventTypes = ['mouseover', 'mouseleave', 'mouseenter', 'mouseout'];\n    var LAST_EVENT_TIMEOUT_MS = 10;\n    var EVENTS = [// keyboard events\n    'keydown', 'keypress', 'keyup', // mouse events\n    'auxclick', 'click', 'contextmenu', 'dblclick', 'mousedown', 'mouseenter', 'mouseleave', 'mousemove', 'mouseover', 'mouseout', 'mouseup', 'pointerlockchange', 'pointerlockerror', 'select', 'wheel']; // 'wheel' event makes scrolling in Safari twitchy\n    // https://github.com/AdguardTeam/ExtendedCss/issues/120\n\n    var safariProblematicEvents = ['wheel'];\n    var trackedEvents = utils.isSafariBrowser ? EVENTS.filter(function (el) {\n      return !(safariProblematicEvents.indexOf(el) > -1);\n    }) : EVENTS;\n    var lastEventType;\n    var lastEventTime;\n\n    var trackEvent = function trackEvent(e) {\n      lastEventType = e.type;\n      lastEventTime = Date.now();\n    };\n\n    trackedEvents.forEach(function (evName) {\n      document.documentElement.addEventListener(evName, trackEvent, true);\n    });\n\n    var getLastEventType = function getLastEventType() {\n      return lastEventType;\n    };\n\n    var getTimeSinceLastEvent = function getTimeSinceLastEvent() {\n      return Date.now() - lastEventTime;\n    };\n\n    return {\n      isIgnoredEventType: function isIgnoredEventType() {\n        return ignoredEventTypes.indexOf(getLastEventType()) > -1 && getTimeSinceLastEvent() < LAST_EVENT_TIMEOUT_MS;\n      }\n    };\n  }();\n\n  var rules = [];\n  var affectedElements = [];\n  var removalsStatistic = {};\n  var domObserved;\n  var eventListenerSupported = window.addEventListener;\n  var domMutationObserver;\n\n  function observeDocument(callback) {\n    // We are trying to limit the number of callback calls by not calling it on all kind of \"hover\" events.\n    // The rationale behind this is that \"hover\" events often cause attributes modification,\n    // but re-applying extCSS rules will be useless as these attribute changes are usually transient.\n    var isIgnoredMutation = function isIgnoredMutation(mutations) {\n      for (var i = 0; i < mutations.length; i += 1) {\n        if (mutations.type !== 'attributes') {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    if (utils.MutationObserver) {\n      domMutationObserver = new utils.MutationObserver(function (mutations) {\n        if (!mutations || mutations.length === 0) {\n          return;\n        }\n\n        if (EventTracker.isIgnoredEventType() && isIgnoredMutation(mutations)) {\n          return;\n        }\n\n        callback();\n      });\n      domMutationObserver.observe(document, {\n        childList: true,\n        subtree: true,\n        attributes: true,\n        attributeFilter: ['id', 'class']\n      });\n    } else if (eventListenerSupported) {\n      document.addEventListener('DOMNodeInserted', callback, false);\n      document.addEventListener('DOMNodeRemoved', callback, false);\n      document.addEventListener('DOMAttrModified', callback, false);\n    }\n  }\n\n  function disconnectDocument(callback) {\n    if (domMutationObserver) {\n      domMutationObserver.disconnect();\n    } else if (eventListenerSupported) {\n      document.removeEventListener('DOMNodeInserted', callback, false);\n      document.removeEventListener('DOMNodeRemoved', callback, false);\n      document.removeEventListener('DOMAttrModified', callback, false);\n    }\n  }\n\n  var MAX_STYLE_PROTECTION_COUNT = 50;\n  var protectionObserverOption = {\n    attributes: true,\n    attributeOldValue: true,\n    attributeFilter: ['style']\n  };\n  /**\n   * Creates MutationObserver protection function\n   *\n   * @param styles\n   * @return {protectionFunction}\n   */\n\n  function createProtectionFunction(styles) {\n    function protectionFunction(mutations, observer) {\n      if (!mutations.length) {\n        return;\n      }\n\n      var mutation = mutations[0];\n      var target = mutation.target;\n      observer.disconnect();\n      styles.forEach(function (style) {\n        setStyleToElement(target, style);\n      });\n\n      if (++observer.styleProtectionCount < MAX_STYLE_PROTECTION_COUNT) {\n        observer.observe(target, protectionObserverOption);\n      } else {\n        utils.logError('ExtendedCss: infinite loop protection for style');\n      }\n    }\n\n    return protectionFunction;\n  }\n  /**\n   * Sets up a MutationObserver which protects style attributes from changes\n   * @param node DOM node\n   * @param rules rules\n   * @returns Mutation observer used to protect attribute or null if there's nothing to protect\n   */\n\n\n  function protectStyleAttribute(node, rules) {\n    if (!utils.MutationObserver) {\n      return null;\n    }\n\n    var styles = rules.map(function (r) {\n      return r.style;\n    });\n    var protectionObserver = new utils.MutationObserver(createProtectionFunction(styles));\n    protectionObserver.observe(node, protectionObserverOption); // Adds an expando to the observer to keep 'style fix counts'.\n\n    protectionObserver.styleProtectionCount = 0;\n    return protectionObserver;\n  }\n\n  function removeSuffix(str, suffix) {\n    var index = str.indexOf(suffix, str.length - suffix.length);\n\n    if (index >= 0) {\n      return str.substring(0, index);\n    }\n\n    return str;\n  }\n  /**\n   * Finds affectedElement object for the specified DOM node\n   * @param node  DOM node\n   * @returns     affectedElement found or null\n   */\n\n\n  function findAffectedElement(node) {\n    for (var i = 0; i < affectedElements.length; i += 1) {\n      if (affectedElements[i].node === node) {\n        return affectedElements[i];\n      }\n    }\n\n    return null;\n  }\n\n  function removeElement(affectedElement) {\n    var node = affectedElement.node;\n    affectedElement.removed = true;\n    var elementSelector = utils.getNodeSelector(node); // check if the element has been already removed earlier\n\n    var elementRemovalsCounter = removalsStatistic[elementSelector] || 0; // if removals attempts happened more than specified we do not try to remove node again\n\n    if (elementRemovalsCounter > MAX_STYLE_PROTECTION_COUNT) {\n      utils.logError('ExtendedCss: infinite loop protection for SELECTOR', elementSelector);\n      return;\n    }\n\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n      removalsStatistic[elementSelector] = elementRemovalsCounter + 1;\n    }\n  }\n  /**\n   * Applies style to the specified DOM node\n   * @param affectedElement Object containing DOM node and rule to be applied\n   */\n\n\n  function applyStyle(affectedElement) {\n    if (affectedElement.protectionObserver) {\n      // Style is already applied and protected by the observer\n      return;\n    }\n\n    if (beforeStyleApplied) {\n      affectedElement = beforeStyleApplied(affectedElement);\n\n      if (!affectedElement) {\n        return;\n      }\n    }\n\n    var _affectedElement = affectedElement,\n        node = _affectedElement.node;\n\n    for (var i = 0; i < affectedElement.rules.length; i++) {\n      var style = affectedElement.rules[i].style;\n\n      if (style['remove'] === 'true') {\n        removeElement(affectedElement);\n        return;\n      }\n\n      setStyleToElement(node, style);\n    }\n  }\n  /**\n   * Sets style to the specified DOM node\n   * @param node element\n   * @param style style\n   */\n\n\n  function setStyleToElement(node, style) {\n    Object.keys(style).forEach(function (prop) {\n      // Apply this style only to existing properties\n      // We can't use hasOwnProperty here (does not work in FF)\n      if (typeof node.style.getPropertyValue(prop) !== 'undefined') {\n        var value = style[prop]; // First we should remove !important attribute (or it won't be applied')\n\n        value = removeSuffix(value.trim(), '!important').trim();\n        node.style.setProperty(prop, value, 'important');\n      }\n    });\n  }\n  /**\n   * Reverts style for the affected object\n   */\n\n\n  function revertStyle(affectedElement) {\n    if (affectedElement.protectionObserver) {\n      affectedElement.protectionObserver.disconnect();\n    }\n\n    affectedElement.node.style.cssText = affectedElement.originalStyle;\n  }\n  /**\n   * Applies specified rule and returns list of elements affected\n   * @param rule Rule to apply\n   * @returns List of elements affected by this rule\n   */\n\n\n  function applyRule(rule) {\n    var debug = rule.selector.isDebugging();\n    var start;\n\n    if (debug) {\n      start = utils.AsyncWrapper.now();\n    }\n\n    var selector = rule.selector;\n    var nodes = selector.querySelectorAll();\n    nodes.forEach(function (node) {\n      var affectedElement = findAffectedElement(node);\n\n      if (affectedElement) {\n        affectedElement.rules.push(rule);\n        applyStyle(affectedElement);\n      } else {\n        // Applying style first time\n        var originalStyle = node.style.cssText;\n        affectedElement = {\n          node: node,\n          // affected DOM node\n          rules: [rule],\n          // rules to be applied\n          originalStyle: originalStyle,\n          // original node style\n          protectionObserver: null // style attribute observer\n\n        };\n        applyStyle(affectedElement);\n        affectedElements.push(affectedElement);\n      }\n    });\n\n    if (debug) {\n      var elapsed = utils.AsyncWrapper.now() - start;\n\n      if (!('timingStats' in rule)) {\n        rule.timingStats = new utils.Stats();\n      }\n\n      rule.timingStats.push(elapsed);\n    }\n\n    return nodes;\n  }\n  /**\n   * Applies filtering rules\n   */\n\n\n  function applyRules() {\n    var elementsIndex = []; // some rules could make call - selector.querySelectorAll() temporarily to change node id attribute\n    // this caused MutationObserver to call recursively\n    // https://github.com/AdguardTeam/ExtendedCss/issues/81\n\n    stopObserve();\n    rules.forEach(function (rule) {\n      var nodes = applyRule(rule);\n      Array.prototype.push.apply(elementsIndex, nodes);\n    }); // Now revert styles for elements which are no more affected\n\n    var l = affectedElements.length; // do nothing if there is no elements to process\n\n    if (elementsIndex.length > 0) {\n      while (l--) {\n        var obj = affectedElements[l];\n\n        if (elementsIndex.indexOf(obj.node) === -1) {\n          // Time to revert style\n          revertStyle(obj);\n          affectedElements.splice(l, 1);\n        } else if (!obj.removed) {\n          // Add style protection observer\n          // Protect \"style\" attribute from changes\n          if (!obj.protectionObserver) {\n            obj.protectionObserver = protectStyleAttribute(obj.node, obj.rules);\n          }\n        }\n      }\n    } // After styles are applied we can start observe again\n\n\n    observe();\n    printTimingInfo();\n  }\n\n  var APPLY_RULES_DELAY = 150;\n  var applyRulesScheduler = new utils.AsyncWrapper(applyRules, APPLY_RULES_DELAY);\n  var mainCallback = applyRulesScheduler.run.bind(applyRulesScheduler);\n\n  function observe() {\n    if (domObserved) {\n      return;\n    } // Handle dynamically added elements\n\n\n    domObserved = true;\n    observeDocument(mainCallback);\n  }\n\n  function stopObserve() {\n    if (!domObserved) {\n      return;\n    }\n\n    domObserved = false;\n    disconnectDocument(mainCallback);\n  }\n\n  function apply() {\n    applyRules();\n\n    if (document.readyState !== 'complete') {\n      document.addEventListener('DOMContentLoaded', applyRules);\n    }\n  }\n  /**\n   * Disposes ExtendedCss and removes our styles from matched elements\n   */\n\n\n  function dispose() {\n    stopObserve();\n    affectedElements.forEach(function (obj) {\n      revertStyle(obj);\n    });\n  }\n\n  var timingsPrinted = false;\n  /**\n   * Prints timing information for all selectors marked as \"debug\"\n   */\n\n  function printTimingInfo() {\n    if (timingsPrinted) {\n      return;\n    }\n\n    timingsPrinted = true;\n    var timings = rules.filter(function (rule) {\n      return rule.selector.isDebugging();\n    }).map(function (rule) {\n      return {\n        selectorText: rule.selector.selectorText,\n        timingStats: rule.timingStats\n      };\n    });\n\n    if (timings.length === 0) {\n      return;\n    } // Add location.href to the message to distinguish frames\n\n\n    utils.logInfo('[ExtendedCss] Timings for %o:\\n%o (in milliseconds)', window.location.href, timings);\n  } // First of all parse the stylesheet\n\n\n  rules = ExtendedCssParser.parseCss(styleSheet); // EXPOSE\n\n  this.dispose = dispose;\n  this.apply = apply;\n  /** Exposed for testing purposes only */\n\n  this._getAffectedElements = function () {\n    return affectedElements;\n  };\n}\n/**\n * Expose querySelectorAll for debugging and validating selectors\n *\n * @param {string} selectorText selector text\n * @param {boolean} noTiming if true -- do not print the timing to the console\n * @returns {Array<Node>|NodeList} a list of elements found\n * @throws Will throw an error if the argument is not a valid selector\n */\n\n\nExtendedCss.query = function (selectorText, noTiming) {\n  if (typeof selectorText !== 'string') {\n    throw new Error('Selector text is empty');\n  }\n\n  var now = utils.AsyncWrapper.now;\n  var start = now();\n\n  try {\n    return ExtendedSelectorFactory.createSelector(selectorText).querySelectorAll();\n  } finally {\n    var end = now();\n\n    if (!noTiming) {\n      utils.logInfo(\"[ExtendedCss] Elapsed: \".concat(Math.round((end - start) * 1000), \" \\u03BCs.\"));\n    }\n  }\n};\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ExtendedCss);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/extended-css/dist/extended-css.esm.js\n");

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n   true ? module.exports : 0\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/regenerator-runtime/runtime.js\n");

/***/ }),

/***/ "./node_modules/scriptlets/dist/cjs/scriptlets.cjs.js":
/*!************************************************************!*\
  !*** ./node_modules/scriptlets/dist/cjs/scriptlets.cjs.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\n/**\n * AdGuard Scriptlets\n * Version 1.3.20\n */\n\n/**\n * Returns wildcard symbol\n * @returns {string} '*'\n */\nvar getWildcardSymbol = function getWildcardSymbol() {\n  return '*';\n};\n\n/**\n * Generate random six symbols id\n */\nfunction randomId() {\n  return Math.random().toString(36).substr(2, 9);\n}\n\n/**\n * Set getter and setter to property if it's configurable\n * @param {Object} object target object with property\n * @param {string} property property name\n * @param {Object} descriptor contains getter and setter functions\n * @returns {boolean} is operation successful\n */\nfunction setPropertyAccess(object, property, descriptor) {\n  var currentDescriptor = Object.getOwnPropertyDescriptor(object, property);\n\n  if (currentDescriptor && !currentDescriptor.configurable) {\n    return false;\n  }\n\n  Object.defineProperty(object, property, descriptor);\n  return true;\n}\n\n/**\n * @typedef Chain\n * @property {Object} base\n * @property {string} prop\n * @property {string} [chain]\n */\n\n/**\n * Check if the property exists in the base object (recursively)\n *\n * If property doesn't exist in base object,\n * defines this property as 'undefined'\n * and returns base, property name and remaining part of property chain\n *\n * @param {Object} base\n * @param {string} chain\n * @returns {Chain}\n */\nfunction getPropertyInChain(base, chain) {\n  var pos = chain.indexOf('.');\n\n  if (pos === -1) {\n    return {\n      base: base,\n      prop: chain\n    };\n  }\n\n  var prop = chain.slice(0, pos); // https://github.com/AdguardTeam/Scriptlets/issues/128\n\n  if (base === null) {\n    // if base is null, return 'null' as base.\n    // it's needed for triggering the reason logging while debugging\n    return {\n      base: base,\n      prop: prop,\n      chain: chain\n    };\n  }\n\n  var nextBase = base[prop];\n  chain = chain.slice(pos + 1);\n\n  if (nextBase !== undefined) {\n    return getPropertyInChain(nextBase, chain);\n  }\n\n  Object.defineProperty(base, prop, {\n    configurable: true\n  });\n  return {\n    base: nextBase,\n    prop: prop,\n    chain: chain\n  };\n}\n\n/**\n * @typedef Chain\n * @property {Object} base\n * @property {string} prop\n * @property {string} [chain]\n */\n\n/**\n * Check if the property exists in the base object (recursively).\n * Similar to getPropertyInChain but upgraded for json-prune:\n * handle wildcard properties and does not define nonexistent base property as 'undefined'\n *\n * @param {Object} base\n * @param {string} chain\n * @param {boolean} [lookThrough=false]\n * should the method look through it's props in order to wildcard\n * @param {Array} [output=[]] result acc\n * @returns {Chain[]} array of objects\n */\n\nfunction getWildcardPropertyInChain(base, chain) {\n  var lookThrough = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var output = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var pos = chain.indexOf('.');\n\n  if (pos === -1) {\n    // for paths like 'a.b.*' every final nested prop should be processed\n    if (chain === getWildcardSymbol() || chain === '[]') {\n      // eslint-disable-next-line no-restricted-syntax\n      for (var key in base) {\n        // to process each key in base except inherited ones\n        if (Object.prototype.hasOwnProperty.call(base, key)) {\n          output.push({\n            base: base,\n            prop: key\n          });\n        }\n      }\n    } else {\n      output.push({\n        base: base,\n        prop: chain\n      });\n    }\n\n    return output;\n  }\n\n  var prop = chain.slice(0, pos);\n  var shouldLookThrough = prop === '[]' && Array.isArray(base) || prop === getWildcardSymbol() && base instanceof Object;\n\n  if (shouldLookThrough) {\n    var nextProp = chain.slice(pos + 1);\n    var baseKeys = Object.keys(base); // if there is a wildcard prop in input chain (e.g. 'ad.*.src' for 'ad.0.src ad.1.src'),\n    // each one of base keys should be considered as a potential chain prop in final path\n\n    baseKeys.forEach(function (key) {\n      var item = base[key];\n      getWildcardPropertyInChain(item, nextProp, lookThrough, output);\n    });\n  }\n\n  var nextBase = base[prop];\n  chain = chain.slice(pos + 1);\n\n  if (nextBase !== undefined) {\n    getWildcardPropertyInChain(nextBase, chain, lookThrough, output);\n  }\n\n  return output;\n}\n\n/**\n * Determines whether the passed value is NaN\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN\n * @param {*} num\n * @returns {boolean}\n */\nvar nativeIsNaN = function nativeIsNaN(num) {\n  var native = Number.isNaN || window.isNaN; // eslint-disable-line compat/compat\n\n  return native(num);\n};\n/**\n * Determines whether the passed value is a finite number\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite\n * @param {*} num\n * @returns {boolean}\n */\n\nvar nativeIsFinite = function nativeIsFinite(num) {\n  var native = Number.isFinite || window.isFinite; // eslint-disable-line compat/compat\n\n  return native(num);\n};\n\n/**\n * Converts object to array of pairs.\n * Object.entries() polyfill because it is not supported by IE\n * https://caniuse.com/?search=Object.entries\n * @param {Object} object\n * @returns {Array} array of pairs\n */\nvar getObjectEntries = function getObjectEntries(object) {\n  var keys = Object.keys(object);\n  var entries = [];\n  keys.forEach(function (key) {\n    return entries.push([key, object[key]]);\n  });\n  return entries;\n};\n/**\n * Converts array of pairs to object.\n * Object.fromEntries() polyfill because it is not supported by IE\n * https://caniuse.com/?search=Object.fromEntries\n * @param {Array} entries - array of pairs\n * @returns {Object}\n */\n\nvar getObjectFromEntries = function getObjectFromEntries(entries) {\n  var output = entries.reduce(function (acc, el) {\n    var key = el[0];\n    var value = el[1];\n    acc[key] = value;\n    return acc;\n  }, {});\n  return output;\n};\n/**\n * Checks whether the obj is an empty object\n * @param {Object} obj\n * @returns {boolean}\n */\n\nvar isEmptyObject = function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * String.prototype.replaceAll polifill\n * @param {string} input input string\n * @param {string} substr to look for\n * @param {string} newSubstr replacement\n * @returns {string}\n */\n\nvar replaceAll = function replaceAll(input, substr, newSubstr) {\n  return input.split(substr).join(newSubstr);\n};\n/**\n * Escapes special chars in string\n * @param {string} str\n * @returns {string}\n */\n\nvar escapeRegExp = function escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n};\n/**\n * Converts search string to the regexp\n * TODO think about nested dependencies, but be careful with dependency loops\n * @param {string} str search string\n * @returns {RegExp}\n */\n\nvar toRegExp = function toRegExp(str) {\n  if (!str || str === '') {\n    var DEFAULT_VALUE = '.?';\n    return new RegExp(DEFAULT_VALUE);\n  }\n\n  if (str[0] === '/' && str[str.length - 1] === '/') {\n    return new RegExp(str.slice(1, -1));\n  }\n\n  var escaped = str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n  return new RegExp(escaped);\n};\n/**\n * Get string before regexp first match\n * @param {string} str\n * @param {RegExp} rx\n */\n\nvar getBeforeRegExp = function getBeforeRegExp(str, rx) {\n  var index = str.search(rx);\n  return str.substring(0, index);\n};\n/**\n * Checks whether the string starts with the substring\n * @param {string} str full string\n * @param {string} prefix substring\n * @returns {boolean}\n */\n\nvar startsWith = function startsWith(str, prefix) {\n  // if str === '', (str && false) will return ''\n  // that's why it has to be !!str\n  return !!str && str.indexOf(prefix) === 0;\n};\n/**\n * Checks whether the string ends with the substring\n * @param {string} str full string\n * @param {string} ending substring\n * @returns {boolean}\n */\n\nvar endsWith = function endsWith(str, ending) {\n  // if str === '', (str && false) will return ''\n  // that's why it has to be !!str\n  return !!str && str.indexOf(ending) === str.length - ending.length;\n};\nvar substringAfter = function substringAfter(str, separator) {\n  if (!str) {\n    return str;\n  }\n\n  var index = str.indexOf(separator);\n  return index < 0 ? '' : str.substring(index + separator.length);\n};\nvar substringBefore = function substringBefore(str, separator) {\n  if (!str || !separator) {\n    return str;\n  }\n\n  var index = str.indexOf(separator);\n  return index < 0 ? str : str.substring(0, index);\n};\n/**\n * Wrap str in single qoutes and replaces single quotes to doudle one\n * @param {string} str\n */\n\nvar wrapInSingleQuotes = function wrapInSingleQuotes(str) {\n  if (str[0] === '\\'' && str[str.length - 1] === '\\'' || str[0] === '\"' && str[str.length - 1] === '\"') {\n    str = str.substring(1, str.length - 1);\n  } // eslint-disable-next-line no-useless-escape\n\n\n  str = str.replace(/\\'/g, '\"');\n  return \"'\".concat(str, \"'\");\n};\n/**\n * Returns substring enclosed in the widest braces\n * @param {string} str\n */\n\nvar getStringInBraces = function getStringInBraces(str) {\n  var firstIndex = str.indexOf('(');\n  var lastIndex = str.lastIndexOf(')');\n  return str.substring(firstIndex + 1, lastIndex);\n};\n/**\n * Prepares RTCPeerConnection config as string for proper logging\n * @param {*} config\n * @returns {string} stringified config\n*/\n\nvar convertRtcConfigToString = function convertRtcConfigToString(config) {\n  var UNDEF_STR = 'undefined';\n  var str = UNDEF_STR;\n\n  if (config === null) {\n    str = 'null';\n  } else if (config instanceof Object) {\n    var SERVERS_PROP_NAME = 'iceServers';\n    var URLS_PROP_NAME = 'urls';\n    /*\n        const exampleConfig = {\n            'iceServers': [\n                'urls': ['stun:35.66.206.188:443'],\n            ],\n        };\n    */\n\n    if (Object.prototype.hasOwnProperty.call(config, SERVERS_PROP_NAME) && Object.prototype.hasOwnProperty.call(config[SERVERS_PROP_NAME][0], URLS_PROP_NAME) && !!config[SERVERS_PROP_NAME][0][URLS_PROP_NAME]) {\n      str = config[SERVERS_PROP_NAME][0][URLS_PROP_NAME].toString();\n    }\n  }\n\n  return str;\n};\n/**\n * @typedef {Object} MatchData\n * @property {boolean} isInvertedMatch\n * @property {RegExp} matchRegexp\n */\n\n/**\n * Parses match arg with possible negation for no matching.\n * Needed for prevent-setTimeout, prevent-setInterval,\n * prevent-requestAnimationFrame and prevent-window-open\n * @param {string} match\n * @returns {MatchData}\n */\n\nvar parseMatchArg = function parseMatchArg(match) {\n  var INVERT_MARKER = '!';\n  var isInvertedMatch = startsWith(match, INVERT_MARKER);\n  var matchValue = isInvertedMatch ? match.slice(1) : match;\n  var matchRegexp = toRegExp(matchValue);\n  return {\n    isInvertedMatch: isInvertedMatch,\n    matchRegexp: matchRegexp\n  };\n};\n/**\n * @typedef {Object} DelayData\n * @property {boolean} isInvertedDelayMatch\n * @property {number|null} delayMatch\n */\n\n/**\n * Parses delay arg with possible negation for no matching.\n * Needed for prevent-setTimeout and prevent-setInterval\n * @param {string} delay\n * @returns {DelayData}\n */\n\nvar parseDelayArg = function parseDelayArg(delay) {\n  var INVERT_MARKER = '!';\n  var isInvertedDelayMatch = startsWith(delay, INVERT_MARKER);\n  var delayValue = isInvertedDelayMatch ? delay.slice(1) : delay;\n  delayValue = parseInt(delayValue, 10);\n  var delayMatch = nativeIsNaN(delayValue) ? null : delayValue;\n  return {\n    isInvertedDelayMatch: isInvertedDelayMatch,\n    delayMatch: delayMatch\n  };\n};\n/**\n * Converts object to string for logging\n * @param {Object} obj data object\n * @returns {string}\n */\n\nvar objectToString = function objectToString(obj) {\n  return isEmptyObject(obj) ? '{}' : getObjectEntries(obj).map(function (pair) {\n    var key = pair[0];\n    var value = pair[1];\n    var recordValueStr = value;\n\n    if (value instanceof Object) {\n      recordValueStr = \"{ \".concat(objectToString(value), \" }\");\n    }\n\n    return \"\".concat(key, \":\\\"\").concat(recordValueStr, \"\\\"\");\n  }).join(' ');\n};\n/**\n * Converts types into a string\n * @param {*} value\n * @returns {string}\n */\n\nvar convertTypeToString = function convertTypeToString(value) {\n  var output;\n\n  if (typeof value === 'undefined') {\n    output = 'undefined';\n  } else if (typeof value === 'object') {\n    if (value === null) {\n      output = 'null';\n    } else {\n      output = objectToString(value);\n    }\n  } else {\n    output = value.toString();\n  }\n\n  return output;\n};\n\n/**\n * Generates function which silents global errors on page generated by scriptlet\n * If error doesn't belong to our error we transfer it to the native onError handler\n * @param {string} rid - unique identifier of scriptlet\n * @return {onError}\n */\nfunction createOnErrorHandler(rid) {\n  // eslint-disable-next-line consistent-return\n  var nativeOnError = window.onerror;\n  return function onError(error) {\n    if (typeof error === 'string' && error.indexOf(rid) !== -1) {\n      return true;\n    }\n\n    if (nativeOnError instanceof Function) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return nativeOnError.apply(this, [error].concat(args));\n    }\n\n    return false;\n  };\n}\n\n/**\n * Noop function\n * @return {undefined} undefined\n */\nvar noopFunc = function noopFunc() {};\n/**\n * Function returns null\n * @return {null} null\n */\n\nvar noopNull = function noopNull() {\n  return null;\n};\n/**\n * Function returns true\n * @return {boolean} true\n */\n\nvar trueFunc = function trueFunc() {\n  return true;\n};\n/**\n * Function returns false\n * @return {boolean} false\n */\n\nvar falseFunc = function falseFunc() {\n  return false;\n};\n/**\n * Function returns this\n */\n\nfunction noopThis() {\n  return this;\n}\n/**\n * Function returns empty string\n * @return {string} empty string\n */\n\nvar noopStr = function noopStr() {\n  return '';\n};\n/**\n * Function returns empty array\n * @return {Array} empty array\n */\n\nvar noopArray = function noopArray() {\n  return [];\n};\n/**\n * Function returns empty object\n * @return {Object} empty object\n */\n\nvar noopObject = function noopObject() {\n  return {};\n};\n/**\n * Function returns Promise.reject()\n */\n\nvar noopPromiseReject = function noopPromiseReject() {\n  return Promise.reject();\n}; // eslint-disable-line compat/compat\n\n/**\n * Returns Promise object that is resolved with an empty response\n */\n// eslint-disable-next-line compat/compat\n\nvar noopPromiseResolve = function noopPromiseResolve() {\n  return Promise.resolve(new Response());\n};\n\n/* eslint-disable no-console, no-underscore-dangle */\n\n/**\n * Hit used only for debug purposes now\n * @param {Source} source\n * @param {string} [message] - optional message;\n * use LOG_MARKER = 'log: ' at the start of a message\n * for logging scriptlets\n */\nvar hit = function hit(source, message) {\n  if (source.verbose !== true) {\n    return;\n  }\n\n  try {\n    var log = console.log.bind(console);\n    var trace = console.trace.bind(console); // eslint-disable-line compat/compat\n\n    var prefix = source.ruleText || '';\n\n    if (source.domainName) {\n      var AG_SCRIPTLET_MARKER = '#%#//';\n      var UBO_SCRIPTLET_MARKER = '##+js';\n      var ruleStartIndex;\n\n      if (source.ruleText.indexOf(AG_SCRIPTLET_MARKER) > -1) {\n        ruleStartIndex = source.ruleText.indexOf(AG_SCRIPTLET_MARKER);\n      } else if (source.ruleText.indexOf(UBO_SCRIPTLET_MARKER) > -1) {\n        ruleStartIndex = source.ruleText.indexOf(UBO_SCRIPTLET_MARKER);\n      } // delete all domains from ruleText and leave just rule part\n\n\n      var rulePart = source.ruleText.slice(ruleStartIndex); // prepare applied scriptlet rule for specific domain\n\n      prefix = \"\".concat(source.domainName).concat(rulePart);\n    } // Used to check if scriptlet uses 'hit' function for logging\n\n\n    var LOG_MARKER = 'log: ';\n\n    if (message) {\n      if (message.indexOf(LOG_MARKER) === -1) {\n        log(\"\".concat(prefix, \" message:\\n\").concat(message));\n      } else {\n        log(message.slice(LOG_MARKER.length));\n      }\n    }\n\n    log(\"\".concat(prefix, \" trace start\"));\n\n    if (trace) {\n      trace();\n    }\n\n    log(\"\".concat(prefix, \" trace end\"));\n  } catch (e) {// try catch for Edge 15\n    // In according to this issue https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/14495220/\n    // console.log throws an error\n  } // This is necessary for unit-tests only!\n\n\n  if (typeof window.__debug === 'function') {\n    window.__debug(source);\n  }\n};\n\n/**\n * DOM tree changes observer. Used for 'remove-attr' and 'remove-class' scriptlets\n * @param {Function} callback\n * @param {Boolean} observeAttrs - optional parameter - should observer check attibutes changes\n */\nvar observeDOMChanges = function observeDOMChanges(callback) {\n  var observeAttrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var attrsToObserv = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n\n  /**\n   * Returns a wrapper, passing the call to 'method' at maximum once per 'delay' milliseconds.\n   * Those calls that fall into the \"cooldown\" period, are ignored\n   * @param {Function} method\n   * @param {Number} delay - milliseconds\n   */\n  var throttle = function throttle(method, delay) {\n    var wait = false;\n    var savedArgs;\n\n    var wrapper = function wrapper() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (wait) {\n        savedArgs = args;\n        return;\n      }\n\n      method.apply(void 0, args);\n      wait = true;\n      setTimeout(function () {\n        wait = false;\n\n        if (savedArgs) {\n          wrapper(savedArgs);\n          savedArgs = null;\n        }\n      }, delay);\n    };\n\n    return wrapper;\n  };\n  /**\n   * 'delay' in milliseconds for 'throttle' method\n   */\n\n\n  var THROTTLE_DELAY_MS = 20;\n  /**\n   * Used for remove-class\n   */\n  // eslint-disable-next-line no-use-before-define, compat/compat\n\n  var observer = new MutationObserver(throttle(callbackWrapper, THROTTLE_DELAY_MS));\n\n  var connect = function connect() {\n    if (attrsToObserv.length > 0) {\n      observer.observe(document.documentElement, {\n        childList: true,\n        subtree: true,\n        attributes: observeAttrs,\n        attributeFilter: attrsToObserv\n      });\n    } else {\n      observer.observe(document.documentElement, {\n        childList: true,\n        subtree: true,\n        attributes: observeAttrs\n      });\n    }\n  };\n\n  var disconnect = function disconnect() {\n    observer.disconnect();\n  };\n\n  function callbackWrapper() {\n    disconnect();\n    callback();\n    connect();\n  }\n\n  connect();\n};\n\n/**\n * Checks if the stackTrace contains stackRegexp\n * // https://github.com/AdguardTeam/Scriptlets/issues/82\n * @param {string|undefined} stackMatch - input stack value to match\n * @param {string} stackTrace - script error stack trace\n * @returns {boolean}\n */\n\nvar matchStackTrace = function matchStackTrace(stackMatch, stackTrace) {\n  if (!stackMatch || stackMatch === '') {\n    return true;\n  }\n\n  var stackRegexp = toRegExp(stackMatch);\n  var refinedStackTrace = stackTrace.split('\\n').slice(2) // get rid of our own functions in the stack trace\n  .map(function (line) {\n    return line.trim();\n  }) // trim the lines\n  .join('\\n');\n  return stackRegexp.test(refinedStackTrace);\n};\n\n/**\n * Some browsers do not support Array.prototype.flat()\n * for example, Opera 42 which is used for browserstack tests\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\n * @param {Array} input\n */\nvar flatten = function flatten(input) {\n  var stack = [];\n  input.forEach(function (el) {\n    return stack.push(el);\n  });\n  var res = [];\n\n  while (stack.length) {\n    // pop value from stack\n    var next = stack.pop();\n\n    if (Array.isArray(next)) {\n      // push back array items, won't modify the original input\n      next.forEach(function (el) {\n        return stack.push(el);\n      });\n    } else {\n      res.push(next);\n    }\n  } // reverse to restore input order\n\n\n  return res.reverse();\n};\n\n/**\n * Finds shadow-dom host (elements with shadowRoot property) in DOM of rootElement.\n * @param {HTMLElement} rootElement\n * @returns {HTMLElement[]} shadow-dom hosts\n */\n\nvar findHostElements = function findHostElements(rootElement) {\n  var hosts = []; // Element.querySelectorAll() returns list of elements\n  // which are defined in DOM of Element.\n  // Meanwhile, inner DOM of the element with shadowRoot property\n  // is absolutely another DOM and which can not be reached by querySelectorAll('*')\n\n  var domElems = rootElement.querySelectorAll('*');\n  domElems.forEach(function (el) {\n    if (el.shadowRoot) {\n      hosts.push(el);\n    }\n  });\n  return hosts;\n};\n/**\n * A collection of nodes.\n *\n * @external NodeList\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/NodeList NodeList}\n */\n\n/**\n * @typedef {Object} PierceData\n * @property {HTMLElement[]} targets found elements that match the specified selector\n * @property {HTMLElement[]} innerHosts inner shadow-dom hosts\n */\n\n/**\n * Pierces open shadow-dom in order to find:\n * - elements by 'selector' matching\n * - inner shadow-dom hosts\n * @param {string} selector\n * @param {HTMLElement[]|external:NodeList} hostElements\n * @returns {PierceData}\n */\n\nvar pierceShadowDom = function pierceShadowDom(selector, hostElements) {\n  var targets = [];\n  var innerHostsAcc = []; // it's possible to get a few hostElements found by baseSelector on the page\n\n  hostElements.forEach(function (host) {\n    // check presence of selector element inside base element if it's not in shadow-dom\n    var simpleElems = host.querySelectorAll(selector);\n    targets = targets.concat([].slice.call(simpleElems));\n    var shadowRootElem = host.shadowRoot;\n    var shadowChildren = shadowRootElem.querySelectorAll(selector);\n    targets = targets.concat([].slice.call(shadowChildren)); // find inner shadow-dom hosts inside processing shadow-dom\n\n    innerHostsAcc.push(findHostElements(shadowRootElem));\n  }); // if there were more than one host element,\n  // innerHostsAcc is an array of arrays and should be flatten\n\n  var innerHosts = flatten(innerHostsAcc);\n  return {\n    targets: targets,\n    innerHosts: innerHosts\n  };\n};\n\n/**\n * Prepares cookie string if given parameters are ok\n * @param {string} name cookie name to set\n * @param {string} value cookie value to set\n * @returns {string|null} cookie string if ok OR null if not\n */\n\nvar prepareCookie = function prepareCookie(name, value) {\n  if (!name || !value) {\n    return null;\n  }\n\n  var valueToSet;\n\n  if (value === 'true') {\n    valueToSet = 'true';\n  } else if (value === 'True') {\n    valueToSet = 'True';\n  } else if (value === 'false') {\n    valueToSet = 'false';\n  } else if (value === 'False') {\n    valueToSet = 'False';\n  } else if (value === 'yes') {\n    valueToSet = 'yes';\n  } else if (value === 'Yes') {\n    valueToSet = 'Yes';\n  } else if (value === 'Y') {\n    valueToSet = 'Y';\n  } else if (value === 'no') {\n    valueToSet = 'no';\n  } else if (value === 'ok') {\n    valueToSet = 'ok';\n  } else if (value === 'OK') {\n    valueToSet = 'OK';\n  } else if (/^\\d+$/.test(value)) {\n    valueToSet = parseFloat(value);\n\n    if (nativeIsNaN(valueToSet)) {\n      return null;\n    }\n\n    if (Math.abs(valueToSet) < 0 || Math.abs(valueToSet) > 15) {\n      return null;\n    }\n  } else {\n    return null;\n  }\n\n  var pathToSet = 'path=/;';\n  var cookieData = \"\".concat(encodeURIComponent(name), \"=\").concat(encodeURIComponent(valueToSet), \"; \").concat(pathToSet);\n  return cookieData;\n};\n\nvar shouldMatchAnyDelay = function shouldMatchAnyDelay(delay) {\n  return delay === getWildcardSymbol();\n};\n/**\n * Handles input delay value\n * @param {*} delay\n * @returns {number} proper number delay value\n */\n\nvar getMatchDelay = function getMatchDelay(delay) {\n  var DEFAULT_DELAY = 1000;\n  var parsedDelay = parseInt(delay, 10);\n  var delayMatch = nativeIsNaN(parsedDelay) ? DEFAULT_DELAY // default scriptlet value\n  : parsedDelay;\n  return delayMatch;\n};\n/**\n * Checks delay match condition\n * @param {*} inputDelay\n * @param {number} realDelay\n * @returns {boolean}\n */\n\nvar isDelayMatched = function isDelayMatched(inputDelay, realDelay) {\n  return shouldMatchAnyDelay(inputDelay) || realDelay === getMatchDelay(inputDelay);\n};\n/**\n * Handles input boost value\n * @param {*} boost\n * @returns {number} proper number boost multiplier value\n */\n\nvar getBoostMultiplier = function getBoostMultiplier(boost) {\n  var DEFAULT_MULTIPLIER = 0.05;\n  var MIN_MULTIPLIER = 0.02;\n  var MAX_MULTIPLIER = 50;\n  var parsedBoost = parseFloat(boost);\n  var boostMultiplier = nativeIsNaN(parsedBoost) || !nativeIsFinite(parsedBoost) ? DEFAULT_MULTIPLIER // default scriptlet value\n  : parsedBoost;\n\n  if (boostMultiplier < MIN_MULTIPLIER) {\n    boostMultiplier = MIN_MULTIPLIER;\n  }\n\n  if (boostMultiplier > MAX_MULTIPLIER) {\n    boostMultiplier = MAX_MULTIPLIER;\n  }\n\n  return boostMultiplier;\n};\n\n/**\n * Collects Request options to object\n * @param {Request} request\n * @returns {Object} data object\n */\n\nvar getRequestData = function getRequestData(request) {\n  var REQUEST_INIT_OPTIONS = ['url', 'method', 'headers', 'body', 'mode', 'credentials', 'cache', 'redirect', 'referrer', 'integrity'];\n  var entries = REQUEST_INIT_OPTIONS.map(function (key) {\n    // if request has no such option, value will be undefined\n    var value = request[key];\n    return [key, value];\n  });\n  return getObjectFromEntries(entries);\n};\n/**\n * Collects fetch args to object\n * @param {*} args fetch args\n * @returns {Object} data object\n */\n\nvar getFetchData = function getFetchData(args) {\n  var fetchPropsObj = {};\n  var fetchUrl;\n  var fetchInit;\n\n  if (args[0] instanceof Request) {\n    // if Request passed to fetch, it will be in array\n    var requestData = getRequestData(args[0]);\n    fetchUrl = requestData.url;\n    fetchInit = requestData;\n  } else {\n    fetchUrl = args[0]; // eslint-disable-line prefer-destructuring\n\n    fetchInit = args[1]; // eslint-disable-line prefer-destructuring\n  }\n\n  fetchPropsObj.url = fetchUrl;\n\n  if (fetchInit instanceof Object) {\n    Object.keys(fetchInit).forEach(function (prop) {\n      fetchPropsObj[prop] = fetchInit[prop];\n    });\n  }\n\n  return fetchPropsObj;\n};\n/**\n * Converts prevent-fetch propsToMatch input string to object\n * @param {string} propsToMatchStr\n * @returns {Object} object where 'key' is prop name and 'value' is prop value\n */\n\nvar convertMatchPropsToObj = function convertMatchPropsToObj(propsToMatchStr) {\n  var PROPS_DIVIDER = ' ';\n  var PAIRS_MARKER = ':';\n  var propsObj = {};\n  var props = propsToMatchStr.split(PROPS_DIVIDER);\n  props.forEach(function (prop) {\n    var dividerInd = prop.indexOf(PAIRS_MARKER);\n\n    if (dividerInd === -1) {\n      propsObj.url = toRegExp(prop);\n    } else {\n      var key = prop.slice(0, dividerInd);\n      var value = prop.slice(dividerInd + 1);\n      propsObj[key] = toRegExp(value);\n    }\n  });\n  return propsObj;\n};\n\nvar handleOldReplacement = function handleOldReplacement(replacement) {\n  var result; // defaults to return noopFunc instead of window.open\n\n  if (!replacement) {\n    result = noopFunc;\n  } else if (replacement === 'trueFunc') {\n    result = trueFunc;\n  } else if (replacement.indexOf('=') > -1) {\n    // We should return noopFunc instead of window.open\n    // but with some property if website checks it (examples 5, 6)\n    // https://github.com/AdguardTeam/Scriptlets/issues/71\n    var isProp = startsWith(replacement, '{') && endsWith(replacement, '}');\n\n    if (isProp) {\n      var propertyPart = replacement.slice(1, -1);\n      var propertyName = substringBefore(propertyPart, '=');\n      var propertyValue = substringAfter(propertyPart, '=');\n\n      if (propertyValue === 'noopFunc') {\n        result = {};\n        result[propertyName] = noopFunc;\n      }\n    }\n  }\n\n  return result;\n};\nvar createDecoy = function createDecoy(args) {\n  var OBJECT_TAG_NAME = 'object';\n  var OBJECT_URL_PROP_NAME = 'data';\n  var IFRAME_TAG_NAME = 'iframe';\n  var IFRAME_URL_PROP_NAME = 'src';\n  var replacement = args.replacement,\n      url = args.url,\n      delay = args.delay;\n  var tag;\n  var urlProp;\n\n  if (replacement === 'obj') {\n    tag = OBJECT_TAG_NAME;\n    urlProp = OBJECT_URL_PROP_NAME;\n  } else {\n    tag = IFRAME_TAG_NAME;\n    urlProp = IFRAME_URL_PROP_NAME;\n  }\n\n  var decoy = document.createElement(tag);\n  decoy[urlProp] = url;\n  decoy.style.setProperty('height', '1px', 'important');\n  decoy.style.setProperty('position', 'fixed', 'important');\n  decoy.style.setProperty('top', '-1px', 'important');\n  decoy.style.setProperty('width', '1px', 'important');\n  document.body.appendChild(decoy);\n  setTimeout(function () {\n    return decoy.remove();\n  }, delay * 1000);\n  return decoy;\n};\nvar getPreventGetter = function getPreventGetter(nativeGetter) {\n  var preventGetter = function preventGetter(target, prop) {\n    if (prop && prop === 'closed') {\n      return false;\n    }\n\n    if (typeof nativeGetter === 'function') {\n      return noopFunc;\n    }\n\n    return prop && target[prop];\n  };\n\n  return preventGetter;\n};\n\n/**\n * Validates event type\n * @param {*} type\n * @returns {boolean}\n */\nvar validateType = function validateType(type) {\n  // https://github.com/AdguardTeam/Scriptlets/issues/125\n  return typeof type !== 'undefined';\n};\n/**\n * Validates event listener\n * @param {*} listener\n * @returns {boolean}\n */\n\nvar validateListener = function validateListener(listener) {\n  // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#parameters\n  return typeof listener !== 'undefined' && (typeof listener === 'function' || typeof listener === 'object' // https://github.com/AdguardTeam/Scriptlets/issues/76\n  && listener !== null && typeof listener.handleEvent === 'function');\n};\n/**\n * Serialize valid event listener\n * https://developer.mozilla.org/en-US/docs/Web/API/EventListener\n * @param {EventListener} listener valid listener\n * @returns {string}\n */\n\nvar listenerToString = function listenerToString(listener) {\n  return typeof listener === 'function' ? listener.toString() : listener.handleEvent.toString();\n};\n\n/**\n * This file must export all used dependencies\n */\n\nvar dependencies = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    getWildcardSymbol: getWildcardSymbol,\n    randomId: randomId,\n    setPropertyAccess: setPropertyAccess,\n    getPropertyInChain: getPropertyInChain,\n    getWildcardPropertyInChain: getWildcardPropertyInChain,\n    replaceAll: replaceAll,\n    escapeRegExp: escapeRegExp,\n    toRegExp: toRegExp,\n    getBeforeRegExp: getBeforeRegExp,\n    startsWith: startsWith,\n    endsWith: endsWith,\n    substringAfter: substringAfter,\n    substringBefore: substringBefore,\n    wrapInSingleQuotes: wrapInSingleQuotes,\n    getStringInBraces: getStringInBraces,\n    convertRtcConfigToString: convertRtcConfigToString,\n    parseMatchArg: parseMatchArg,\n    parseDelayArg: parseDelayArg,\n    objectToString: objectToString,\n    convertTypeToString: convertTypeToString,\n    createOnErrorHandler: createOnErrorHandler,\n    noopFunc: noopFunc,\n    noopNull: noopNull,\n    trueFunc: trueFunc,\n    falseFunc: falseFunc,\n    noopThis: noopThis,\n    noopStr: noopStr,\n    noopArray: noopArray,\n    noopObject: noopObject,\n    noopPromiseReject: noopPromiseReject,\n    noopPromiseResolve: noopPromiseResolve,\n    hit: hit,\n    observeDOMChanges: observeDOMChanges,\n    matchStackTrace: matchStackTrace,\n    findHostElements: findHostElements,\n    pierceShadowDom: pierceShadowDom,\n    flatten: flatten,\n    prepareCookie: prepareCookie,\n    nativeIsNaN: nativeIsNaN,\n    nativeIsFinite: nativeIsFinite,\n    shouldMatchAnyDelay: shouldMatchAnyDelay,\n    getMatchDelay: getMatchDelay,\n    isDelayMatched: isDelayMatched,\n    getBoostMultiplier: getBoostMultiplier,\n    getRequestData: getRequestData,\n    getFetchData: getFetchData,\n    convertMatchPropsToObj: convertMatchPropsToObj,\n    getObjectEntries: getObjectEntries,\n    getObjectFromEntries: getObjectFromEntries,\n    isEmptyObject: isEmptyObject,\n    handleOldReplacement: handleOldReplacement,\n    createDecoy: createDecoy,\n    getPreventGetter: getPreventGetter,\n    validateType: validateType,\n    validateListener: validateListener,\n    listenerToString: listenerToString\n});\n\n/**\n * Concat dependencies to scriptlet code\n * @param {string} scriptlet string view of scriptlet\n */\n\nfunction attachDependencies(scriptlet) {\n  var _scriptlet$injections = scriptlet.injections,\n      injections = _scriptlet$injections === void 0 ? [] : _scriptlet$injections;\n  return injections.reduce(function (accum, dep) {\n    return \"\".concat(accum, \"\\n\").concat(dependencies[dep.name]);\n  }, scriptlet.toString());\n}\n/**\n * Add scriptlet call to existing code\n * @param {Function} scriptlet\n * @param {string} code\n */\n\nfunction addCall(scriptlet, code) {\n  return \"\".concat(code, \";\\n        const updatedArgs = args ? [].concat(source).concat(args) : [source];\\n        \").concat(scriptlet.name, \".apply(this, updatedArgs);\\n    \");\n}\n/**\n * Wrap function into IIFE (Immediately invoked function expression)\n *\n * @param {Source} source - object with scriptlet properties\n * @param {string} code - scriptlet source code with dependencies\n *\n * @returns {string} full scriptlet code\n *\n * @example\n * const source = {\n *      args: [\"aaa\", \"bbb\"],\n *      name: 'noeval',\n * };\n * const code = \"function noeval(source, args) { alert(source); } noeval.apply(this, args);\"\n * const result = wrapInIIFE(source, code);\n *\n * // result\n * `(function(source, args) {\n *      function noeval(source) { alert(source); }\n *      noeval.apply(this, args);\n * )({\"args\": [\"aaa\", \"bbb\"], \"name\":\"noeval\"}, [\"aaa\", \"bbb\"])`\n */\n\nfunction passSourceAndProps(source, code) {\n  if (source.hit) {\n    source.hit = source.hit.toString();\n  }\n\n  var sourceString = JSON.stringify(source);\n  var argsString = source.args ? \"[\".concat(source.args.map(JSON.stringify), \"]\") : undefined;\n  var params = argsString ? \"\".concat(sourceString, \", \").concat(argsString) : sourceString;\n  return \"(function(source, args){\\n\".concat(code, \"\\n})(\").concat(params, \");\");\n}\n/**\n * Wrap code in no name function\n * @param {string} code which must be wrapped\n */\n\nfunction wrapInNonameFunc(code) {\n  return \"function(source, args){\\n\".concat(code, \"\\n}\");\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar defineProperty = _defineProperty;\n\n/**\n * Iterate over iterable argument and evaluate current state with transitions\n * @param {string} init first transition name\n * @param {Array|Collection|string} iterable\n * @param {Object} transitions transtion functions\n * @param {any} args arguments which should be passed to transition functions\n */\nfunction iterateWithTransitions(iterable, transitions, init, args) {\n  var state = init || Object.keys(transitions)[0];\n\n  for (var i = 0; i < iterable.length; i += 1) {\n    state = transitions[state](iterable, i, args);\n  }\n\n  return state;\n}\n/**\n * AdGuard scriptlet rule mask\n */\n\n\nvar ADG_SCRIPTLET_MASK = '#//scriptlet';\n/**\n * Helper to accumulate an array of strings char by char\n */\n\nvar wordSaver = function wordSaver() {\n  var str = '';\n  var strs = [];\n\n  var saveSymb = function saveSymb(s) {\n    str += s;\n    return str;\n  };\n\n  var saveStr = function saveStr() {\n    strs.push(str);\n    str = '';\n  };\n\n  var getAll = function getAll() {\n    return [].concat(strs);\n  };\n\n  return {\n    saveSymb: saveSymb,\n    saveStr: saveStr,\n    getAll: getAll\n  };\n};\n\nvar substringAfter$1 = function substringAfter(str, separator) {\n  if (!str) {\n    return str;\n  }\n\n  var index = str.indexOf(separator);\n  return index < 0 ? '' : str.substring(index + separator.length);\n};\n/**\n * Parse and validate scriptlet rule\n * @param {*} ruleText\n * @returns {{name: string, args: Array<string>}}\n */\n\n\nvar parseRule = function parseRule(ruleText) {\n  var _transitions;\n\n  ruleText = substringAfter$1(ruleText, ADG_SCRIPTLET_MASK);\n  /**\n   * Transition names\n   */\n\n  var TRANSITION = {\n    OPENED: 'opened',\n    PARAM: 'param',\n    CLOSED: 'closed'\n  };\n  /**\n   * Transition function: the current index position in start, end or between params\n   * @param {string} rule\n   * @param {number} index\n   * @param {Object} Object\n   * @property {Object} Object.sep contains prop symb with current separator char\n   */\n\n  var opened = function opened(rule, index, _ref) {\n    var sep = _ref.sep;\n    var char = rule[index];\n    var transition;\n\n    switch (char) {\n      case ' ':\n      case '(':\n      case ',':\n        {\n          transition = TRANSITION.OPENED;\n          break;\n        }\n\n      case '\\'':\n      case '\"':\n        {\n          sep.symb = char;\n          transition = TRANSITION.PARAM;\n          break;\n        }\n\n      case ')':\n        {\n          transition = index === rule.length - 1 ? TRANSITION.CLOSED : TRANSITION.OPENED;\n          break;\n        }\n\n      default:\n        {\n          throw new Error('The rule is not a scriptlet');\n        }\n    }\n\n    return transition;\n  };\n  /**\n   * Transition function: the current index position inside param\n   * @param {string} rule\n   * @param {number} index\n   * @param {Object} Object\n   * @property {Object} Object.sep contains prop `symb` with current separator char\n   * @property {Object} Object.saver helper which allow to save strings by car by char\n   */\n\n\n  var param = function param(rule, index, _ref2) {\n    var saver = _ref2.saver,\n        sep = _ref2.sep;\n    var char = rule[index];\n\n    switch (char) {\n      case '\\'':\n      case '\"':\n        {\n          var preIndex = index - 1;\n          var before = rule[preIndex];\n\n          if (char === sep.symb && before !== '\\\\') {\n            sep.symb = null;\n            saver.saveStr();\n            return TRANSITION.OPENED;\n          }\n        }\n      // eslint-disable-next-line no-fallthrough\n\n      default:\n        {\n          saver.saveSymb(char);\n          return TRANSITION.PARAM;\n        }\n    }\n  };\n\n  var transitions = (_transitions = {}, defineProperty(_transitions, TRANSITION.OPENED, opened), defineProperty(_transitions, TRANSITION.PARAM, param), defineProperty(_transitions, TRANSITION.CLOSED, function () {}), _transitions);\n  var sep = {\n    symb: null\n  };\n  var saver = wordSaver();\n  var state = iterateWithTransitions(ruleText, transitions, TRANSITION.OPENED, {\n    sep: sep,\n    saver: saver\n  });\n\n  if (state !== 'closed') {\n    throw new Error(\"Invalid scriptlet rule \".concat(ruleText));\n  }\n\n  var args = saver.getAll();\n  return {\n    name: args[0],\n    args: args.slice(1)\n  };\n};\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet abort-on-property-read\n *\n * @description\n * Aborts a script when it attempts to **read** the specified property.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#abort-on-property-readjs-\n *\n * Related ABP source:\n * https://github.com/adblockplus/adblockpluscore/blob/6b2a309054cc23432102b85d13f12559639ef495/lib/content/snippets.js#L864\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('abort-on-property-read', property[, stack])\n * ```\n *\n * - `property` - required, path to a property (joined with `.` if needed). The property must be attached to `window`\n * - `stack` - optional, string or regular expression that must match the current function call stack trace\n *\n * **Examples**\n * ```\n * ! Aborts script when it tries to access `window.alert`\n * example.org#%#//scriptlet('abort-on-property-read', 'alert')\n *\n * ! Aborts script when it tries to access `navigator.language`\n * example.org#%#//scriptlet('abort-on-property-read', 'navigator.language')\n *\n * ! Aborts script when it tries to access `window.adblock` and it's error stack trace contains `test.js`\n * example.org#%#//scriptlet('abort-on-property-read', 'adblock', 'test.js')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction abortOnPropertyRead(source, property, stack) {\n  if (!property || !matchStackTrace(stack, new Error().stack)) {\n    return;\n  }\n\n  var rid = randomId();\n\n  var abort = function abort() {\n    hit(source);\n    throw new ReferenceError(rid);\n  };\n\n  var setChainPropAccess = function setChainPropAccess(owner, property) {\n    var chainInfo = getPropertyInChain(owner, property);\n    var base = chainInfo.base;\n    var prop = chainInfo.prop,\n        chain = chainInfo.chain;\n\n    if (chain) {\n      var setter = function setter(a) {\n        base = a;\n\n        if (a instanceof Object) {\n          setChainPropAccess(a, chain);\n        }\n      };\n\n      Object.defineProperty(owner, prop, {\n        get: function get() {\n          return base;\n        },\n        set: setter\n      });\n      return;\n    }\n\n    setPropertyAccess(base, prop, {\n      get: abort,\n      set: function set() {}\n    });\n  };\n\n  setChainPropAccess(window, property);\n  window.onerror = createOnErrorHandler(rid).bind();\n}\nabortOnPropertyRead.names = ['abort-on-property-read', // aliases are needed for matching the related scriptlet converted into our syntax\n'abort-on-property-read.js', 'ubo-abort-on-property-read.js', 'aopr.js', 'ubo-aopr.js', 'ubo-abort-on-property-read', 'ubo-aopr', 'abp-abort-on-property-read'];\nabortOnPropertyRead.injections = [randomId, toRegExp, setPropertyAccess, getPropertyInChain, createOnErrorHandler, hit, matchStackTrace];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet abort-on-property-write\n *\n * @description\n * Aborts a script when it attempts to **write** the specified property.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#abort-on-property-writejs-\n *\n * Related ABP source:\n * https://github.com/adblockplus/adblockpluscore/blob/6b2a309054cc23432102b85d13f12559639ef495/lib/content/snippets.js#L896\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('abort-on-property-write', property[, stack])\n * ```\n *\n * - `property` - required, path to a property (joined with `.` if needed). The property must be attached to `window`\n * - `stack` - optional, string or regular expression that must match the current function call stack trace\n *\n * **Examples**\n * ```\n * ! Aborts script when it tries to set `window.adblock` value\n * example.org#%#//scriptlet('abort-on-property-write', 'adblock')\n *\n * ! Aborts script when it tries to set `window.adblock` value and it's error stack trace contains `checking.js`\n * example.org#%#//scriptlet('abort-on-property-write', 'adblock', 'checking.js')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction abortOnPropertyWrite(source, property, stack) {\n  if (!property || !matchStackTrace(stack, new Error().stack)) {\n    return;\n  }\n\n  var rid = randomId();\n\n  var abort = function abort() {\n    hit(source);\n    throw new ReferenceError(rid);\n  };\n\n  var setChainPropAccess = function setChainPropAccess(owner, property) {\n    var chainInfo = getPropertyInChain(owner, property);\n    var base = chainInfo.base;\n    var prop = chainInfo.prop,\n        chain = chainInfo.chain;\n\n    if (chain) {\n      var setter = function setter(a) {\n        base = a;\n\n        if (a instanceof Object) {\n          setChainPropAccess(a, chain);\n        }\n      };\n\n      Object.defineProperty(owner, prop, {\n        get: function get() {\n          return base;\n        },\n        set: setter\n      });\n      return;\n    }\n\n    setPropertyAccess(base, prop, {\n      set: abort\n    });\n  };\n\n  setChainPropAccess(window, property);\n  window.onerror = createOnErrorHandler(rid).bind();\n}\nabortOnPropertyWrite.names = ['abort-on-property-write', // aliases are needed for matching the related scriptlet converted into our syntax\n'abort-on-property-write.js', 'ubo-abort-on-property-write.js', 'aopw.js', 'ubo-aopw.js', 'ubo-abort-on-property-write', 'ubo-aopw', 'abp-abort-on-property-write'];\nabortOnPropertyWrite.injections = [randomId, setPropertyAccess, getPropertyInChain, createOnErrorHandler, hit, toRegExp, matchStackTrace];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet prevent-setTimeout\n *\n * @description\n * Prevents a `setTimeout` call if:\n * 1) the text of the callback is matching the specified search string/regexp which does not start with `!`;\n * otherwise mismatched calls should be defused;\n * 2) the timeout is matching the specified delay; otherwise mismatched calls should be defused.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#no-settimeout-ifjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-setTimeout'[, search[, delay]])\n * ```\n *\n * Call with no arguments will log calls to setTimeout while debugging (`log-setTimeout` superseding),\n * so production filter lists' rules definitely require at least one of the parameters:\n * - `search` - optional, string or regular expression.\n * If starts with `!`, scriptlet will not match the stringified callback but all other will be defused.\n * If do not start with `!`, the stringified callback will be matched.\n * If not set, prevents all `setTimeout` calls due to specified `delay`.\n * - `delay` - optional, must be an integer.\n * If starts with `!`, scriptlet will not match the delay but all other will be defused.\n * If do not start with `!`, the delay passed to the `setTimeout` call will be matched.\n *\n * > If `prevent-setTimeout` without parameters logs smth like `setTimeout(undefined, 1000)`,\n * it means that no callback was passed to setTimeout() and that's not scriptlet issue\n *\n * **Examples**\n * 1. Prevents `setTimeout` calls if the callback matches `/\\.test/` regardless of the delay.\n *     ```bash\n *     example.org#%#//scriptlet('prevent-setTimeout', '/\\.test/')\n *     ```\n *\n *     For instance, the following call will be prevented:\n *     ```javascript\n *     setTimeout(function () {\n *         window.test = \"value\";\n *     }, 100);\n *     ```\n *\n * 2. Prevents `setTimeout` calls if the callback does not contain `value`.\n *     ```\n *     example.org#%#//scriptlet('prevent-setTimeout', '!value')\n *     ```\n *\n *     For instance, only the first of the following calls will be prevented:\n *     ```javascript\n *     setTimeout(function () {\n *         window.test = \"test -- prevented\";\n *     }, 300);\n *     setTimeout(function () {\n *         window.test = \"value -- executed\";\n *     }, 400);\n *     setTimeout(function () {\n *         window.value = \"test -- executed\";\n *     }, 500);\n *     ```\n *\n * 3. Prevents `setTimeout` calls if the callback contains `value` and the delay is not set to `300`.\n *     ```\n *     example.org#%#//scriptlet('prevent-setTimeout', 'value', '!300')\n *     ```\n *\n *     For instance, only the first of the following calls will not be prevented:\n *     ```javascript\n *     setTimeout(function () {\n *         window.test = \"value 1 -- executed\";\n *     }, 300);\n *     setTimeout(function () {\n *         window.test = \"value 2 -- prevented\";\n *     }, 400);\n *     setTimeout(function () {\n *         window.test = \"value 3 -- prevented\";\n *     }, 500);\n *     ```\n *\n * 4. Prevents `setTimeout` calls if the callback does not contain `value` and the delay is not set to `300`.\n *     ```\n *     example.org#%#//scriptlet('prevent-setTimeout', '!value', '!300')\n *     ```\n *\n *     For instance, only the second of the following calls will be prevented:\n *     ```javascript\n *     setTimeout(function () {\n *         window.test = \"test -- executed\";\n *     }, 300);\n *     setTimeout(function () {\n *         window.test = \"test -- prevented\";\n *     }, 400);\n *     setTimeout(function () {\n *         window.test = \"value -- executed\";\n *     }, 400);\n *     setTimeout(function () {\n *         window.value = \"test -- executed\";\n *     }, 500);\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction preventSetTimeout(source, match, delay) {\n  var nativeTimeout = window.setTimeout;\n  var log = console.log.bind(console); // eslint-disable-line no-console\n  // logs setTimeouts to console if no arguments have been specified\n\n  var shouldLog = typeof match === 'undefined' && typeof delay === 'undefined';\n\n  var _parseMatchArg = parseMatchArg(match),\n      isInvertedMatch = _parseMatchArg.isInvertedMatch,\n      matchRegexp = _parseMatchArg.matchRegexp;\n\n  var _parseDelayArg = parseDelayArg(delay),\n      isInvertedDelayMatch = _parseDelayArg.isInvertedDelayMatch,\n      delayMatch = _parseDelayArg.delayMatch;\n\n  var timeoutWrapper = function timeoutWrapper(callback, timeout) {\n    var shouldPrevent = false; // https://github.com/AdguardTeam/Scriptlets/issues/105\n\n    var cbString = String(callback);\n\n    if (shouldLog) {\n      hit(source);\n      log(\"setTimeout(\".concat(cbString, \", \").concat(timeout, \")\"));\n    } else if (!delayMatch) {\n      shouldPrevent = matchRegexp.test(cbString) !== isInvertedMatch;\n    } else if (!match) {\n      shouldPrevent = timeout === delayMatch !== isInvertedDelayMatch;\n    } else {\n      shouldPrevent = matchRegexp.test(cbString) !== isInvertedMatch && timeout === delayMatch !== isInvertedDelayMatch;\n    }\n\n    if (shouldPrevent) {\n      hit(source);\n      return nativeTimeout(noopFunc, timeout);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return nativeTimeout.apply(window, [callback, timeout].concat(args));\n  };\n\n  window.setTimeout = timeoutWrapper;\n}\npreventSetTimeout.names = ['prevent-setTimeout', // aliases are needed for matching the related scriptlet converted into our syntax\n'no-setTimeout-if.js', // new implementation of setTimeout-defuser.js\n'ubo-no-setTimeout-if.js', 'nostif.js', // new short name of no-setTimeout-if\n'ubo-nostif.js', 'ubo-no-setTimeout-if', 'ubo-nostif', // old scriptlet names which should be supported as well.\n// should be removed eventually.\n// do not remove until other filter lists maintainers use them\n'setTimeout-defuser.js', 'ubo-setTimeout-defuser.js', 'ubo-setTimeout-defuser', 'std.js', 'ubo-std.js', 'ubo-std'];\npreventSetTimeout.injections = [hit, noopFunc, parseMatchArg, parseDelayArg, toRegExp, startsWith, nativeIsNaN];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet prevent-setInterval\n *\n * @description\n * Prevents a `setInterval` call if:\n * 1) the text of the callback is matching the specified `search` string/regexp which does not start with `!`;\n * otherwise mismatched calls should be defused;\n * 2) the interval is matching the specified `delay`; otherwise mismatched calls should be defused.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#no-setinterval-ifjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-setInterval'[, search[, delay]])\n * ```\n *\n * Call with no arguments will log calls to setInterval while debugging (`log-setInterval` superseding),\n * so production filter lists' rules definitely require at least one of the parameters:\n * - `search` - optional, string or regular expression.\n * If starts with `!`, scriptlet will not match the stringified callback but all other will be defused.\n * If do not start with `!`, the stringified callback will be matched.\n * If not set, prevents all `setInterval` calls due to specified `delay`.\n * - `delay` - optional, must be an integer.\n * If starts with `!`, scriptlet will not match the delay but all other will be defused.\n * If do not start with `!`, the delay passed to the `setInterval` call will be matched.\n *\n * > If `prevent-setInterval` without parameters logs smth like `setInterval(undefined, 1000)`,\n * it means that no callback was passed to setInterval() and that's not scriptlet issue\n\n *  **Examples**\n * 1. Prevents `setInterval` calls if the callback matches `/\\.test/` regardless of the delay.\n *     ```bash\n *     example.org#%#//scriptlet('prevent-setInterval', '/\\.test/')\n *     ```\n *\n *     For instance, the following call will be prevented:\n *     ```javascript\n *     setInterval(function () {\n *         window.test = \"value\";\n *     }, 100);\n *     ```\n *\n * 2. Prevents `setInterval` calls if the callback does not contain `value`.\n *     ```\n *     example.org#%#//scriptlet('prevent-setInterval', '!value')\n *     ```\n *\n *     For instance, only the first of the following calls will be prevented:\n *     ```javascript\n *     setInterval(function () {\n *         window.test = \"test -- prevented\";\n *     }, 300);\n *     setInterval(function () {\n *         window.test = \"value -- executed\";\n *     }, 400);\n *     setInterval(function () {\n *         window.value = \"test -- executed\";\n *     }, 500);\n *     ```\n *\n * 3. Prevents `setInterval` calls if the callback contains `value` and the delay is not set to `300`.\n *     ```\n *     example.org#%#//scriptlet('prevent-setInterval', 'value', '!300')\n *     ```\n *\n *     For instance, only the first of the following calls will not be prevented:\n *     ```javascript\n *     setInterval(function () {\n *         window.test = \"value 1 -- executed\";\n *     }, 300);\n *     setInterval(function () {\n *         window.test = \"value 2 -- prevented\";\n *     }, 400);\n *     setInterval(function () {\n *         window.test = \"value 3 -- prevented\";\n *     }, 500);\n *     ```\n *\n * 4. Prevents `setInterval` calls if the callback does not contain `value` and the delay is not set to `300`.\n *     ```\n *     example.org#%#//scriptlet('prevent-setInterval', '!value', '!300')\n *     ```\n *\n *     For instance, only the second of the following calls will be prevented:\n *     ```javascript\n *     setInterval(function () {\n *         window.test = \"test -- executed\";\n *     }, 300);\n *     setInterval(function () {\n *         window.test = \"test -- prevented\";\n *     }, 400);\n *     setInterval(function () {\n *         window.test = \"value -- executed\";\n *     }, 400);\n *     setInterval(function () {\n *         window.value = \"test -- executed\";\n *     }, 500);\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction preventSetInterval(source, match, delay) {\n  var nativeInterval = window.setInterval;\n  var log = console.log.bind(console); // eslint-disable-line no-console\n  // logs setIntervals to console if no arguments have been specified\n\n  var shouldLog = typeof match === 'undefined' && typeof delay === 'undefined';\n\n  var _parseMatchArg = parseMatchArg(match),\n      isInvertedMatch = _parseMatchArg.isInvertedMatch,\n      matchRegexp = _parseMatchArg.matchRegexp;\n\n  var _parseDelayArg = parseDelayArg(delay),\n      isInvertedDelayMatch = _parseDelayArg.isInvertedDelayMatch,\n      delayMatch = _parseDelayArg.delayMatch;\n\n  var intervalWrapper = function intervalWrapper(callback, interval) {\n    var shouldPrevent = false; // https://github.com/AdguardTeam/Scriptlets/issues/105\n\n    var cbString = String(callback);\n\n    if (shouldLog) {\n      hit(source);\n      log(\"setInterval(\".concat(cbString, \", \").concat(interval, \")\"));\n    } else if (!delayMatch) {\n      shouldPrevent = matchRegexp.test(cbString) !== isInvertedMatch;\n    } else if (!match) {\n      shouldPrevent = interval === delayMatch !== isInvertedDelayMatch;\n    } else {\n      shouldPrevent = matchRegexp.test(cbString) !== isInvertedMatch && interval === delayMatch !== isInvertedDelayMatch;\n    }\n\n    if (shouldPrevent) {\n      hit(source);\n      return nativeInterval(noopFunc, interval);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return nativeInterval.apply(window, [callback, interval].concat(args));\n  };\n\n  window.setInterval = intervalWrapper;\n}\npreventSetInterval.names = ['prevent-setInterval', // aliases are needed for matching the related scriptlet converted into our syntax\n'no-setInterval-if.js', // new implementation of setInterval-defuser.js\n'ubo-no-setInterval-if.js', 'setInterval-defuser.js', // old name should be supported as well\n'ubo-setInterval-defuser.js', 'nosiif.js', // new short name of no-setInterval-if\n'ubo-nosiif.js', 'sid.js', // old short scriptlet name\n'ubo-sid.js', 'ubo-no-setInterval-if', 'ubo-setInterval-defuser', 'ubo-nosiif', 'ubo-sid'];\npreventSetInterval.injections = [hit, noopFunc, parseMatchArg, parseDelayArg, toRegExp, startsWith, nativeIsNaN];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet prevent-window-open\n *\n * @description\n * Prevents `window.open` calls when URL either matches or not matches the specified string/regexp. Using it without parameters prevents all `window.open` calls.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#windowopen-defuserjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-window-open'[, match[, delay[, replacement]]])\n * ```\n *\n * - `match` - optional, string or regular expression. If not set, all window.open calls will be matched.\n * If starts with `!`, scriptlet will not match the stringified callback but all other will be defused.\n * If do not start with `!`, the stringified callback will be matched.\n * - `delay` - optional, number of seconds. If not set, scriptlet will return `null`,\n * otherwise valid sham window object as injected `iframe` will be returned\n * for accessing it's methods (blur(), focus() etc.) and will be removed after the delay.\n * - `replacement` - optional, string; one of the predefined constants:\n *     - `obj` - for returning an object instead of default iframe;\n *        for cases when the page requires a valid `window` instance to be returned\n *     - `log` - for logging window.open calls; permitted for production filter lists.\n *\n * **Examples**\n * 1. Prevent all `window.open` calls:\n * ```\n *     example.org#%#//scriptlet('prevent-window-open')\n * ```\n *\n * 2. Prevent `window.open` for all URLs containing `example`:\n * ```\n *     example.org#%#//scriptlet('prevent-window-open', 'example')\n * ```\n *\n * 3. Prevent `window.open` for all URLs matching RegExp `/example\\./`:\n * ```\n *     example.org#%#//scriptlet('prevent-window-open', '/example\\./')\n * ```\n *\n * 4. Prevent `window.open` for all URLs **NOT** containing `example`:\n * ```\n *     example.org#%#//scriptlet('prevent-window-open', '!example')\n * ```\n *\n * Old syntax of prevent-window-open parameters:\n * - `match` - optional, defaults to \"matching\", any positive number or nothing for \"matching\", 0 or empty string for \"not matching\"\n * - `search` - optional, string or regexp for matching the URL passed to `window.open` call; defaults to search all `window.open` call\n * - `replacement` - optional, string to return prop value or property instead of window.open; defaults to return noopFunc.\n * **Examples**\n * ```\n *     example.org#%#//scriptlet('prevent-window-open', '1', '/example\\./'\n *     example.org#%#//scriptlet('prevent-window-open', '0', 'example')\n *     example.org#%#//scriptlet('prevent-window-open', '', '', 'trueFunc')\n *     example.org#%#//scriptlet('prevent-window-open', '1', '', '{propName=noopFunc}')\n * ```\n *\n * > For better compatibility with uBO, old syntax is not recommended to use.\n */\n\n/* eslint-enable max-len */\n\nfunction preventWindowOpen(source) {\n  var match = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : getWildcardSymbol();\n  var delay = arguments.length > 2 ? arguments[2] : undefined;\n  var replacement = arguments.length > 3 ? arguments[3] : undefined;\n  // default match value is needed for preventing all window.open calls\n  // if scriptlet runs without args\n  var nativeOpen = window.open;\n  var isNewSyntax = match !== '0' && match !== '1';\n\n  var oldOpenWrapper = function oldOpenWrapper(str) {\n    match = Number(match) > 0; // 'delay' was 'search' prop for matching in old syntax\n\n    var searchRegexp = toRegExp(delay);\n\n    if (match !== searchRegexp.test(str)) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return nativeOpen.apply(window, [str].concat(args));\n    }\n\n    hit(source);\n    return handleOldReplacement(replacement);\n  };\n\n  var newOpenWrapper = function newOpenWrapper(url) {\n    var shouldLog = replacement && replacement.indexOf('log') > -1;\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    if (shouldLog) {\n      var argsStr = args && args.length > 0 ? \", \".concat(args.join(', ')) : '';\n      var logMessage = \"log: window-open: \".concat(url).concat(argsStr);\n      hit(source, logMessage);\n    }\n\n    var shouldPrevent = false;\n\n    if (match === getWildcardSymbol()) {\n      shouldPrevent = true;\n    } else {\n      var _parseMatchArg = parseMatchArg(match),\n          isInvertedMatch = _parseMatchArg.isInvertedMatch,\n          matchRegexp = _parseMatchArg.matchRegexp;\n\n      shouldPrevent = matchRegexp.test(url) !== isInvertedMatch;\n    }\n\n    if (shouldPrevent) {\n      var parsedDelay = parseInt(delay, 10);\n      var result;\n\n      if (nativeIsNaN(parsedDelay)) {\n        result = noopNull();\n      } else {\n        var decoyArgs = {\n          replacement: replacement,\n          url: url,\n          delay: parsedDelay\n        };\n        var decoy = createDecoy(decoyArgs);\n        var popup = decoy.contentWindow;\n\n        if (typeof popup === 'object' && popup !== null) {\n          Object.defineProperty(popup, 'closed', {\n            value: false\n          });\n        } else {\n          var nativeGetter = decoy.contentWindow && decoy.contentWindow.get;\n          Object.defineProperty(decoy, 'contentWindow', {\n            get: getPreventGetter(nativeGetter)\n          });\n          popup = decoy.contentWindow;\n        }\n\n        result = popup;\n      }\n\n      hit(source);\n      return result;\n    }\n\n    return nativeOpen.apply(window, [url].concat(args));\n  };\n\n  window.open = isNewSyntax ? newOpenWrapper : oldOpenWrapper;\n}\npreventWindowOpen.names = ['prevent-window-open', // aliases are needed for matching the related scriptlet converted into our syntax\n'window.open-defuser.js', 'ubo-window.open-defuser.js', 'ubo-window.open-defuser', 'nowoif.js', 'ubo-nowoif.js', 'ubo-nowoif'];\npreventWindowOpen.injections = [hit, toRegExp, nativeIsNaN, parseMatchArg, handleOldReplacement, createDecoy, getPreventGetter, noopNull, getWildcardSymbol, noopFunc, trueFunc, startsWith, endsWith, substringBefore, substringAfter];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet abort-current-inline-script\n *\n * @description\n * Aborts an inline script when it attempts to **read** the specified property\n * AND when the contents of the `<script>` element contains the specified\n * text or matches the regular expression.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#abort-current-inline-scriptjs-\n *\n * Related ABP source:\n * https://github.com/adblockplus/adblockpluscore/blob/6b2a309054cc23432102b85d13f12559639ef495/lib/content/snippets.js#L928\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('abort-current-inline-script', property[, search])\n * ```\n *\n * - `property` - required, path to a property (joined with `.` if needed). The property must be attached to `window`\n * - `search` - optional, string or regular expression that must match the inline script contents. If not set, abort all inline scripts which are trying to access the specified property\n *\n * > Note please that for inline script with addEventListener in it\n * `property` should be set as `EventTarget.prototype.addEventListener`,\n * not just `addEventListener`.\n *\n * **Examples**\n * 1. Aborts all inline scripts trying to access `window.alert`\n *     ```\n *     example.org#%#//scriptlet('abort-current-inline-script', 'alert')\n *     ```\n *\n * 2. Aborts inline scripts which are trying to access `window.alert` and contain `Hello, world`.\n *     ```\n *     example.org#%#//scriptlet('abort-current-inline-script', 'alert', 'Hello, world')\n *     ```\n *\n *     For instance, the following script will be aborted\n *     ```html\n *     <script>alert(\"Hello, world\");</script>\n *     ```\n *\n * 3. Aborts inline scripts which are trying to access `window.alert` and match this regexp: `/Hello.+world/`.\n *     ```\n *     example.org#%#//scriptlet('abort-current-inline-script', 'alert', '/Hello.+world/')\n *     ```\n *\n *     For instance, the following scripts will be aborted:\n *     ```html\n *     <script>alert(\"Hello, big world\");</script>\n *     ```\n *     ```html\n *     <script>alert(\"Hello, little world\");</script>\n *     ```\n *\n *     This script will not be aborted:\n *     ```html\n *     <script>alert(\"Hi, little world\");</script>\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction abortCurrentInlineScript(source, property, search) {\n  var searchRegexp = toRegExp(search);\n  var rid = randomId();\n\n  var getCurrentScript = function getCurrentScript() {\n    if ('currentScript' in document) {\n      return document.currentScript; // eslint-disable-line compat/compat\n    }\n\n    var scripts = document.getElementsByTagName('script');\n    return scripts[scripts.length - 1];\n  };\n\n  var ourScript = getCurrentScript();\n\n  var abort = function abort() {\n    var scriptEl = getCurrentScript();\n\n    if (!scriptEl) {\n      return;\n    }\n\n    var content = scriptEl.textContent; // We are using Node.prototype.textContent property descriptor\n    // to get the real script content\n    // even when document.currentScript.textContent is replaced.\n    // https://github.com/AdguardTeam/Scriptlets/issues/57#issuecomment-593638991\n\n    try {\n      var textContentGetter = Object.getOwnPropertyDescriptor(Node.prototype, 'textContent').get;\n      content = textContentGetter.call(scriptEl);\n    } catch (e) {} // eslint-disable-line no-empty\n\n\n    if (scriptEl instanceof HTMLScriptElement && content.length > 0 && scriptEl !== ourScript && searchRegexp.test(content)) {\n      hit(source);\n      throw new ReferenceError(rid);\n    }\n  };\n\n  var setChainPropAccess = function setChainPropAccess(owner, property) {\n    var chainInfo = getPropertyInChain(owner, property);\n    var base = chainInfo.base;\n    var prop = chainInfo.prop,\n        chain = chainInfo.chain; // The scriptlet might be executed before the chain property has been created\n    // (for instance, document.body before the HTML body was loaded).\n    // In this case we're checking whether the base element exists or not\n    // and if not, we simply exit without overriding anything.\n    // e.g. https://github.com/AdguardTeam/Scriptlets/issues/57#issuecomment-575841092\n\n    if (base instanceof Object === false && base === null) {\n      var props = property.split('.');\n      var propIndex = props.indexOf(prop);\n      var baseName = props[propIndex - 1];\n      console.log(\"The scriptlet had been executed before the \".concat(baseName, \" was loaded.\")); // eslint-disable-line no-console\n\n      return;\n    }\n\n    if (chain) {\n      var setter = function setter(a) {\n        base = a;\n\n        if (a instanceof Object) {\n          setChainPropAccess(a, chain);\n        }\n      };\n\n      Object.defineProperty(owner, prop, {\n        get: function get() {\n          return base;\n        },\n        set: setter\n      });\n      return;\n    }\n\n    var currentValue = base[prop];\n    setPropertyAccess(base, prop, {\n      set: function set(value) {\n        abort();\n        currentValue = value;\n      },\n      get: function get() {\n        abort();\n        return currentValue;\n      }\n    });\n  };\n\n  setChainPropAccess(window, property);\n  window.onerror = createOnErrorHandler(rid).bind();\n}\nabortCurrentInlineScript.names = ['abort-current-inline-script', // aliases are needed for matching the related scriptlet converted into our syntax\n'abort-current-inline-script.js', 'ubo-abort-current-inline-script.js', 'acis.js', 'ubo-acis.js', 'ubo-abort-current-inline-script', 'ubo-acis', 'abp-abort-current-inline-script'];\nabortCurrentInlineScript.injections = [randomId, setPropertyAccess, getPropertyInChain, toRegExp, createOnErrorHandler, hit];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet set-constant\n *\n * @description\n * Creates a constant property and assigns it one of the values from the predefined list.\n *\n * > Actually, it's not a constant. Please note, that it can be rewritten with a value of a different type.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#set-constantjs-\n *\n * Related ABP snippet:\n * https://github.com/adblockplus/adblockpluscore/blob/adblockpluschrome-3.9.4/lib/content/snippets.js#L1361\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('set-constant', property, value[, stack])\n * ```\n *\n * - `property` - required, path to a property (joined with `.` if needed). The property must be attached to `window`.\n * - `value` - required. Possible values:\n *     - positive decimal integer `<= 32767`\n *     - one of the predefined constants:\n *         - `undefined`\n *         - `false`\n *         - `true`\n *         - `null`\n *         - `emptyObj` - empty object\n *         - `emptyArr` - empty array\n *         - `noopFunc` - function with empty body\n *         - `trueFunc` - function returning true\n *         - `falseFunc` - function returning false\n *         - `''` - empty string\n *         - `-1` - number value `-1`\n * - `stack` - optional, string or regular expression that must match the current function call stack trace\n *\n * **Examples**\n * ```\n * ! window.firstConst === false // this comparision will return false\n * example.org#%#//scriptlet('set-constant', 'firstConst', 'false')\n *\n * ! window.second() === trueFunc // 'second' call will return true\n * example.org#%#//scriptlet('set-constant', 'secondConst', 'trueFunc')\n *\n * ! document.third() === falseFunc  // 'third' call will return false if the method is related to checking.js\n * example.org#%#//scriptlet('set-constant', 'secondConst', 'trueFunc', 'checking.js')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction setConstant(source, property, value, stack) {\n  if (!property || !matchStackTrace(stack, new Error().stack)) {\n    return;\n  }\n\n  var emptyArr = noopArray();\n  var emptyObj = noopObject();\n  var constantValue;\n\n  if (value === 'undefined') {\n    constantValue = undefined;\n  } else if (value === 'false') {\n    constantValue = false;\n  } else if (value === 'true') {\n    constantValue = true;\n  } else if (value === 'null') {\n    constantValue = null;\n  } else if (value === 'emptyArr') {\n    constantValue = emptyArr;\n  } else if (value === 'emptyObj') {\n    constantValue = emptyObj;\n  } else if (value === 'noopFunc') {\n    constantValue = noopFunc;\n  } else if (value === 'trueFunc') {\n    constantValue = trueFunc;\n  } else if (value === 'falseFunc') {\n    constantValue = falseFunc;\n  } else if (/^\\d+$/.test(value)) {\n    constantValue = parseFloat(value);\n\n    if (nativeIsNaN(constantValue)) {\n      return;\n    }\n\n    if (Math.abs(constantValue) > 0x7FFF) {\n      return;\n    }\n  } else if (value === '-1') {\n    constantValue = -1;\n  } else if (value === '') {\n    constantValue = '';\n  } else {\n    return;\n  }\n\n  var canceled = false;\n\n  var mustCancel = function mustCancel(value) {\n    if (canceled) {\n      return canceled;\n    }\n\n    canceled = value !== undefined && constantValue !== undefined && typeof value !== typeof constantValue;\n    return canceled;\n  };\n\n  var setChainPropAccess = function setChainPropAccess(owner, property) {\n    var chainInfo = getPropertyInChain(owner, property);\n    var base = chainInfo.base;\n    var prop = chainInfo.prop,\n        chain = chainInfo.chain; // The scriptlet might be executed before the chain property has been created.\n    // In this case we're checking whether the base element exists or not\n    // and if not, we simply exit without overriding anything\n\n    if (base instanceof Object === false && base === null) {\n      // log the reason only while debugging\n      if (source.verbose) {\n        var props = property.split('.');\n        var propIndex = props.indexOf(prop);\n        var baseName = props[propIndex - 1];\n        console.log(\"set-constant failed because the property '\".concat(baseName, \"' does not exist\")); // eslint-disable-line no-console\n      }\n\n      return;\n    }\n\n    if (chain) {\n      var setter = function setter(a) {\n        base = a;\n\n        if (a instanceof Object) {\n          setChainPropAccess(a, chain);\n        }\n      };\n\n      Object.defineProperty(owner, prop, {\n        get: function get() {\n          return base;\n        },\n        set: setter\n      });\n      return;\n    }\n\n    if (mustCancel(base[prop])) {\n      return;\n    }\n\n    hit(source);\n    setPropertyAccess(base, prop, {\n      get: function get() {\n        return constantValue;\n      },\n      set: function set(a) {\n        if (mustCancel(a)) {\n          constantValue = a;\n        }\n      }\n    });\n  };\n\n  setChainPropAccess(window, property);\n}\nsetConstant.names = ['set-constant', // aliases are needed for matching the related scriptlet converted into our syntax\n'set-constant.js', 'ubo-set-constant.js', 'set.js', 'ubo-set.js', 'ubo-set-constant', 'ubo-set', 'abp-override-property-read'];\nsetConstant.injections = [hit, noopArray, noopObject, noopFunc, trueFunc, falseFunc, getPropertyInChain, setPropertyAccess, toRegExp, matchStackTrace, nativeIsNaN];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet remove-cookie\n *\n * @description\n * Removes current page cookies by passed string matching with name. For current domain and subdomains. Runs on load and before unload.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#cookie-removerjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('remove-cookie'[, match])\n * ```\n *\n * - `match` - optional, string or regex matching the cookie name. If not specified all accessible cookies will be removed.\n *\n * **Examples**\n * 1. Removes all cookies:\n * ```\n *     example.org#%#//scriptlet('remove-cookie')\n * ```\n *\n * 2. Removes cookies which name contains `example` string.\n * ```\n *     example.org#%#//scriptlet('remove-cookie', 'example')\n * ```\n *\n *     For instance this cookie will be removed\n *     ```javascript\n *     document.cookie = '__example=randomValue';\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction removeCookie(source, match) {\n  var matchRegexp = toRegExp(match);\n\n  var removeCookieFromHost = function removeCookieFromHost(cookieName, hostName) {\n    var cookieSpec = \"\".concat(cookieName, \"=\");\n    var domain1 = \"; domain=\".concat(hostName);\n    var domain2 = \"; domain=.\".concat(hostName);\n    var path = '; path=/';\n    var expiration = '; expires=Thu, 01 Jan 1970 00:00:00 GMT';\n    document.cookie = cookieSpec + expiration;\n    document.cookie = cookieSpec + domain1 + expiration;\n    document.cookie = cookieSpec + domain2 + expiration;\n    document.cookie = cookieSpec + path + expiration;\n    document.cookie = cookieSpec + domain1 + path + expiration;\n    document.cookie = cookieSpec + domain2 + path + expiration;\n    hit(source);\n  };\n\n  var rmCookie = function rmCookie() {\n    document.cookie.split(';').forEach(function (cookieStr) {\n      var pos = cookieStr.indexOf('=');\n\n      if (pos === -1) {\n        return;\n      }\n\n      var cookieName = cookieStr.slice(0, pos).trim();\n\n      if (!matchRegexp.test(cookieName)) {\n        return;\n      }\n\n      var hostParts = document.location.hostname.split('.');\n\n      for (var i = 0; i <= hostParts.length - 1; i += 1) {\n        var hostName = hostParts.slice(i).join('.');\n\n        if (hostName) {\n          removeCookieFromHost(cookieName, hostName);\n        }\n      }\n    });\n  };\n\n  rmCookie();\n  window.addEventListener('beforeunload', rmCookie);\n}\nremoveCookie.names = ['remove-cookie', // aliases are needed for matching the related scriptlet converted into our syntax\n'cookie-remover.js', 'ubo-cookie-remover.js', 'ubo-cookie-remover'];\nremoveCookie.injections = [toRegExp, hit];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet prevent-addEventListener\n *\n * @description\n * Prevents adding event listeners for the specified events and callbacks.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#addeventlistener-defuserjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-addEventListener'[, eventSearch[, functionSearch]])\n * ```\n *\n * - `eventSearch` - optional, string or regex matching the event name. If not specified, the scriptlets prevents all event listeners\n * - `functionSearch` - optional, string or regex matching the event listener function body. If not set, the scriptlet prevents all event listeners with event name matching `eventSearch`\n *\n * **Examples**\n * 1. Prevent all `click` listeners:\n * ```\n *     example.org#%#//scriptlet('prevent-addEventListener', 'click')\n * ```\n\n2. Prevent 'click' listeners with the callback body containing `searchString`.\n * ```\n *     example.org#%#//scriptlet('prevent-addEventListener', 'click', 'searchString')\n * ```\n *\n *     For instance, this listener will not be called:\n * ```javascript\n *     el.addEventListener('click', () => {\n *         window.test = 'searchString';\n *     });\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction preventAddEventListener(source, eventSearch, funcSearch) {\n  var eventSearchRegexp = toRegExp(eventSearch);\n  var funcSearchRegexp = toRegExp(funcSearch);\n  var nativeAddEventListener = window.EventTarget.prototype.addEventListener;\n\n  function addEventListenerWrapper(type, listener) {\n    var shouldPrevent = false;\n\n    if (validateType(type) && validateListener(listener)) {\n      shouldPrevent = eventSearchRegexp.test(type.toString()) && funcSearchRegexp.test(listenerToString(listener));\n    }\n\n    if (shouldPrevent) {\n      hit(source);\n      return undefined;\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return nativeAddEventListener.apply(this, [type, listener].concat(args));\n  }\n\n  window.EventTarget.prototype.addEventListener = addEventListenerWrapper;\n}\npreventAddEventListener.names = ['prevent-addEventListener', // aliases are needed for matching the related scriptlet converted into our syntax\n'addEventListener-defuser.js', 'ubo-addEventListener-defuser.js', 'aeld.js', 'ubo-aeld.js', 'ubo-addEventListener-defuser', 'ubo-aeld'];\npreventAddEventListener.injections = [hit, toRegExp, validateType, validateListener, listenerToString];\n\n/* eslint-disable consistent-return, no-eval */\n/**\n * @scriptlet prevent-bab\n *\n * @description\n * Prevents BlockAdblock script from detecting an ad blocker.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#bab-defuserjs-\n *\n * It also can be used as `$redirect` sometimes.\n * See [redirect description](../wiki/about-redirects.md#prevent-bab).\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-bab')\n * ```\n */\n\nfunction preventBab(source) {\n  var nativeSetTimeout = window.setTimeout;\n  var babRegex = /\\.bab_elementid.$/;\n\n  var timeoutWrapper = function timeoutWrapper(callback) {\n    if (typeof callback !== 'string' || !babRegex.test(callback)) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      return nativeSetTimeout.apply(window, [callback].concat(args));\n    }\n\n    hit(source);\n  };\n\n  window.setTimeout = timeoutWrapper;\n  var signatures = [['blockadblock'], ['babasbm'], [/getItem\\('babn'\\)/], ['getElementById', 'String.fromCharCode', 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789', 'charAt', 'DOMContentLoaded', 'AdBlock', 'addEventListener', 'doScroll', 'fromCharCode', '<<2|r>>4', 'sessionStorage', 'clientWidth', 'localStorage', 'Math', 'random']];\n\n  var check = function check(str) {\n    for (var i = 0; i < signatures.length; i += 1) {\n      var tokens = signatures[i];\n      var match = 0;\n\n      for (var j = 0; j < tokens.length; j += 1) {\n        var token = tokens[j];\n        var found = token instanceof RegExp ? token.test(str) : str.indexOf(token) > -1;\n\n        if (found) {\n          match += 1;\n        }\n      }\n\n      if (match / tokens.length >= 0.8) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  var nativeEval = window.eval;\n\n  var evalWrapper = function evalWrapper(str) {\n    if (!check(str)) {\n      return nativeEval(str);\n    }\n\n    hit(source);\n    var bodyEl = document.body;\n\n    if (bodyEl) {\n      bodyEl.style.removeProperty('visibility');\n    }\n\n    var el = document.getElementById('babasbmsgx');\n\n    if (el) {\n      el.parentNode.removeChild(el);\n    }\n  };\n\n  window.eval = evalWrapper.bind(window);\n}\npreventBab.names = ['prevent-bab', // aliases are needed for matching the related scriptlet converted into our syntax\n'nobab.js', 'ubo-nobab.js', 'bab-defuser.js', 'ubo-bab-defuser.js', 'ubo-nobab', 'ubo-bab-defuser'];\npreventBab.injections = [hit];\n\n/* eslint-disable no-unused-vars, no-extra-bind, func-names */\n/* eslint-disable max-len */\n\n/**\n * @scriptlet nowebrtc\n *\n * @description\n * Disables WebRTC by overriding `RTCPeerConnection`. The overriden function will log every attempt to create a new connection.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#nowebrtcjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('nowebrtc')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction nowebrtc(source) {\n  var propertyName = '';\n\n  if (window.RTCPeerConnection) {\n    propertyName = 'RTCPeerConnection';\n  } else if (window.webkitRTCPeerConnection) {\n    propertyName = 'webkitRTCPeerConnection';\n  }\n\n  if (propertyName === '') {\n    return;\n  }\n\n  var rtcReplacement = function rtcReplacement(config) {\n    hit(source, \"Document tried to create an RTCPeerConnection: \".concat(convertRtcConfigToString(config)));\n  };\n\n  rtcReplacement.prototype = {\n    close: noopFunc,\n    createDataChannel: noopFunc,\n    createOffer: noopFunc,\n    setRemoteDescription: noopFunc\n  };\n  var rtc = window[propertyName];\n  window[propertyName] = rtcReplacement;\n\n  if (rtc.prototype) {\n    rtc.prototype.createDataChannel = function (a, b) {\n      return {\n        close: noopFunc,\n        send: noopFunc\n      };\n    }.bind(null);\n  }\n}\nnowebrtc.names = ['nowebrtc', // aliases are needed for matching the related scriptlet converted into our syntax\n'nowebrtc.js', 'ubo-nowebrtc.js', 'ubo-nowebrtc'];\nnowebrtc.injections = [hit, noopFunc, convertRtcConfigToString];\n\n/**\n * @scriptlet log-addEventListener\n *\n * @description\n * Logs all addEventListener calls to the console.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#addeventlistener-loggerjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('log-addEventListener')\n * ```\n */\n\nfunction logAddEventListener(source) {\n  // eslint-disable-next-line no-console\n  var log = console.log.bind(console);\n  var nativeAddEventListener = window.EventTarget.prototype.addEventListener;\n\n  function addEventListenerWrapper(type, listener) {\n    if (validateType(type) && validateListener(listener)) {\n      var logMessage = \"log: addEventListener(\\\"\".concat(type, \"\\\", \").concat(listenerToString(listener), \")\");\n      hit(source, logMessage);\n    } else if (source.verbose) {\n      // logging while debugging\n      var _logMessage = \"Invalid event type or listener passed to addEventListener:\\ntype: \".concat(convertTypeToString(type), \"\\nlistener: \").concat(convertTypeToString(listener));\n\n      log(_logMessage);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return nativeAddEventListener.apply(this, [type, listener].concat(args));\n  }\n\n  window.EventTarget.prototype.addEventListener = addEventListenerWrapper;\n}\nlogAddEventListener.names = ['log-addEventListener', // aliases are needed for matching the related scriptlet converted into our syntax\n'addEventListener-logger.js', 'ubo-addEventListener-logger.js', 'aell.js', 'ubo-aell.js', 'ubo-addEventListener-logger', 'ubo-aell'];\nlogAddEventListener.injections = [hit, validateType, validateListener, listenerToString, convertTypeToString, objectToString, isEmptyObject, getObjectEntries];\n\n/* eslint-disable no-console, no-eval */\n/**\n * @scriptlet log-eval\n *\n * @description\n * Logs all `eval()` or `new Function()` calls to the console.\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('log-eval')\n * ```\n */\n\nfunction logEval(source) {\n  var log = console.log.bind(console); // wrap eval function\n\n  var nativeEval = window.eval;\n\n  function evalWrapper(str) {\n    hit(source);\n    log(\"eval(\\\"\".concat(str, \"\\\")\"));\n    return nativeEval(str);\n  }\n\n  window.eval = evalWrapper; // wrap new Function\n\n  var nativeFunction = window.Function;\n\n  function FunctionWrapper() {\n    hit(source);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    log(\"new Function(\".concat(args.join(', '), \")\"));\n    return nativeFunction.apply(this, [].concat(args));\n  }\n\n  FunctionWrapper.prototype = Object.create(nativeFunction.prototype);\n  FunctionWrapper.prototype.constructor = FunctionWrapper;\n  window.Function = FunctionWrapper;\n}\nlogEval.names = ['log-eval'];\nlogEval.injections = [hit];\n\n/**\n * @scriptlet log\n *\n * @description\n * A simple scriptlet which only purpose is to print arguments to console.\n * This scriptlet can be helpful for debugging and troubleshooting other scriptlets.\n *\n * **Example**\n * ```\n * example.org#%#//scriptlet('log', 'arg1', 'arg2')\n * ```\n */\nfunction log() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  console.log(args); // eslint-disable-line no-console\n}\nlog.names = ['log'];\n\n/* eslint-disable no-eval, no-extra-bind */\n/**\n * @scriptlet noeval\n *\n * @description\n * Prevents page to use eval.\n * Notifies about attempts in the console\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#noevaljs-\n *\n * It also can be used as `$redirect` rules sometimes.\n * See [redirect description](../wiki/about-redirects.md#noeval).\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('noeval')\n * ```\n */\n\nfunction noeval(source) {\n  window.eval = function evalWrapper(s) {\n    hit(source, \"AdGuard has prevented eval:\\n\".concat(s));\n  }.bind();\n}\nnoeval.names = ['noeval', // aliases are needed for matching the related scriptlet converted into our syntax\n'noeval.js', 'silent-noeval.js', 'ubo-noeval.js', 'ubo-silent-noeval.js', 'ubo-noeval', 'ubo-silent-noeval'];\nnoeval.injections = [hit];\n\n/* eslint-disable no-eval, no-extra-bind, func-names */\n/**\n * @scriptlet prevent-eval-if\n *\n * @description\n * Prevents page to use eval matching payload.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#noeval-ifjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-eval-if'[, search])\n * ```\n *\n * - `search` - optional, string or regexp for matching stringified eval payload.\n * If 'search is not specified — all stringified eval payload will be matched\n *\n * **Examples**\n * ```\n * ! Prevents eval if it matches 'test'\n * example.org#%#//scriptlet('prevent-eval-if', 'test')\n * ```\n *\n * @param {string|RegExp} [search] string or regexp matching stringified eval payload\n */\n\nfunction preventEvalIf(source, search) {\n  var searchRegexp = toRegExp(search);\n  var nativeEval = window.eval;\n\n  window.eval = function (payload) {\n    if (!searchRegexp.test(payload.toString())) {\n      return nativeEval.call(window, payload);\n    }\n\n    hit(source, payload);\n    return undefined;\n  }.bind(window);\n}\npreventEvalIf.names = ['prevent-eval-if', // aliases are needed for matching the related scriptlet converted into our syntax\n'noeval-if.js', 'ubo-noeval-if.js', 'ubo-noeval-if'];\npreventEvalIf.injections = [toRegExp, hit];\n\n/* eslint-disable no-console, func-names, no-multi-assign */\n/**\n * @scriptlet prevent-fab-3.2.0\n *\n * @description\n * Prevents execution of the FAB script v3.2.0.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#fuckadblockjs-320-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-fab-3.2.0')\n * ```\n */\n\nfunction preventFab(source) {\n  hit(source); // redefines Fab function for adblock detection\n\n  var Fab = function Fab() {};\n\n  Fab.prototype.check = noopFunc;\n  Fab.prototype.clearEvent = noopFunc;\n  Fab.prototype.emitEvent = noopFunc;\n\n  Fab.prototype.on = function (a, b) {\n    if (!a) {\n      b();\n    }\n\n    return this;\n  };\n\n  Fab.prototype.onDetected = noopThis;\n\n  Fab.prototype.onNotDetected = function (a) {\n    a();\n    return this;\n  };\n\n  Fab.prototype.setOption = noopFunc;\n  Fab.prototype.options = {\n    set: noopFunc,\n    get: noopFunc\n  };\n  var fab = new Fab();\n  var getSetFab = {\n    get: function get() {\n      return Fab;\n    },\n    set: function set() {}\n  };\n  var getsetfab = {\n    get: function get() {\n      return fab;\n    },\n    set: function set() {}\n  }; // redefined Fab data properties which if 'FuckAdBlock' variable exists\n\n  if (Object.prototype.hasOwnProperty.call(window, 'FuckAdBlock')) {\n    window.FuckAdBlock = Fab;\n  } else {\n    // or redefined Fab accessor properties\n    Object.defineProperty(window, 'FuckAdBlock', getSetFab);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(window, 'BlockAdBlock')) {\n    window.BlockAdBlock = Fab;\n  } else {\n    Object.defineProperty(window, 'BlockAdBlock', getSetFab);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(window, 'SniffAdBlock')) {\n    window.SniffAdBlock = Fab;\n  } else {\n    Object.defineProperty(window, 'SniffAdBlock', getSetFab);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(window, 'fuckAdBlock')) {\n    window.fuckAdBlock = fab;\n  } else {\n    Object.defineProperty(window, 'fuckAdBlock', getsetfab);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(window, 'blockAdBlock')) {\n    window.blockAdBlock = fab;\n  } else {\n    Object.defineProperty(window, 'blockAdBlock', getsetfab);\n  }\n\n  if (Object.prototype.hasOwnProperty.call(window, 'sniffAdBlock')) {\n    window.sniffAdBlock = fab;\n  } else {\n    Object.defineProperty(window, 'sniffAdBlock', getsetfab);\n  }\n}\npreventFab.names = ['prevent-fab-3.2.0', // aliases are needed for matching the related scriptlet converted into our syntax\n'nofab.js', 'ubo-nofab.js', 'fuckadblock.js-3.2.0', 'ubo-fuckadblock.js-3.2.0', 'ubo-nofab'];\npreventFab.injections = [hit, noopFunc, noopThis];\n\n/* eslint-disable no-console, func-names, no-multi-assign */\n/**\n * @scriptlet set-popads-dummy\n *\n * @description\n * Sets static properties PopAds and popns.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#popads-dummyjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('set-popads-dummy')\n * ```\n */\n\nfunction setPopadsDummy(source) {\n  delete window.PopAds;\n  delete window.popns;\n  Object.defineProperties(window, {\n    PopAds: {\n      get: function get() {\n        hit(source);\n        return {};\n      }\n    },\n    popns: {\n      get: function get() {\n        hit(source);\n        return {};\n      }\n    }\n  });\n}\nsetPopadsDummy.names = ['set-popads-dummy', // aliases are needed for matching the related scriptlet converted into our syntax\n'popads-dummy.js', 'ubo-popads-dummy.js', 'ubo-popads-dummy'];\nsetPopadsDummy.injections = [hit];\n\n/**\n * @scriptlet prevent-popads-net\n *\n * @description\n * Aborts on property write (PopAds, popns), throws reference error with random id.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#popadsnetjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-popads-net')\n * ```\n */\n\nfunction preventPopadsNet(source) {\n  var rid = randomId();\n\n  var throwError = function throwError() {\n    throw new ReferenceError(rid);\n  };\n\n  delete window.PopAds;\n  delete window.popns;\n  Object.defineProperties(window, {\n    PopAds: {\n      set: throwError\n    },\n    popns: {\n      set: throwError\n    }\n  });\n  window.onerror = createOnErrorHandler(rid).bind();\n  hit(source);\n}\npreventPopadsNet.names = ['prevent-popads-net', // aliases are needed for matching the related scriptlet converted into our syntax\n'popads.net.js', 'ubo-popads.net.js', 'ubo-popads.net'];\npreventPopadsNet.injections = [createOnErrorHandler, randomId, hit];\n\n/* eslint-disable func-names */\n/**\n * @scriptlet prevent-adfly\n *\n * @description\n * Prevents anti-adblock scripts on adfly short links.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#adfly-defuserjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-adfly')\n * ```\n */\n\nfunction preventAdfly(source) {\n  var isDigit = function isDigit(data) {\n    return /^\\d$/.test(data);\n  };\n\n  var handler = function handler(encodedURL) {\n    var evenChars = '';\n    var oddChars = '';\n\n    for (var i = 0; i < encodedURL.length; i += 1) {\n      if (i % 2 === 0) {\n        evenChars += encodedURL.charAt(i);\n      } else {\n        oddChars = encodedURL.charAt(i) + oddChars;\n      }\n    }\n\n    var data = (evenChars + oddChars).split('');\n\n    for (var _i = 0; _i < data.length; _i += 1) {\n      if (isDigit(data[_i])) {\n        for (var ii = _i + 1; ii < data.length; ii += 1) {\n          if (isDigit(data[ii])) {\n            // eslint-disable-next-line no-bitwise\n            var temp = parseInt(data[_i], 10) ^ parseInt(data[ii], 10);\n\n            if (temp < 10) {\n              data[_i] = temp.toString();\n            }\n\n            _i = ii;\n            break;\n          }\n        }\n      }\n    }\n\n    data = data.join('');\n    var decodedURL = window.atob(data).slice(16, -16);\n    /* eslint-disable compat/compat */\n\n    if (window.stop) {\n      window.stop();\n    }\n    /* eslint-enable compat/compat */\n\n\n    window.onbeforeunload = null;\n    window.location.href = decodedURL;\n  };\n\n  var val; // Do not apply handler more than one time\n\n  var applyHandler = true;\n  var result = setPropertyAccess(window, 'ysmm', {\n    configurable: false,\n    set: function set(value) {\n      if (applyHandler) {\n        applyHandler = false;\n\n        try {\n          if (typeof value === 'string') {\n            handler(value);\n          }\n        } catch (err) {} // eslint-disable-line no-empty\n\n      }\n\n      val = value;\n    },\n    get: function get() {\n      return val;\n    }\n  });\n\n  if (result) {\n    hit(source);\n  } else {\n    window.console.error('Failed to set up prevent-adfly scriptlet');\n  }\n}\npreventAdfly.names = ['prevent-adfly', // aliases are needed for matching the related scriptlet converted into our syntax\n'adfly-defuser.js', 'ubo-adfly-defuser.js', 'ubo-adfly-defuser'];\npreventAdfly.injections = [setPropertyAccess, hit];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet debug-on-property-read\n *\n * @description\n * This scriptlet is basically the same as [abort-on-property-read](#abort-on-property-read), but instead of aborting it starts the debugger.\n *\n * **It is not supposed to be used in production filter lists!**\n *\n * **Syntax**\n * ```\n * ! Debug script if it tries to access `window.alert`\n * example.org#%#//scriptlet('debug-on-property-read', 'alert')\n * ! of `window.open`\n * example.org#%#//scriptlet('debug-on-property-read', 'open')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction debugOnPropertyRead(source, property, stack) {\n  if (!property || !matchStackTrace(stack, new Error().stack)) {\n    return;\n  }\n\n  var rid = randomId();\n\n  var abort = function abort() {\n    hit(source);\n    debugger; // eslint-disable-line no-debugger\n  };\n\n  var setChainPropAccess = function setChainPropAccess(owner, property) {\n    var chainInfo = getPropertyInChain(owner, property);\n    var base = chainInfo.base;\n    var prop = chainInfo.prop,\n        chain = chainInfo.chain;\n\n    if (chain) {\n      var setter = function setter(a) {\n        base = a;\n\n        if (a instanceof Object) {\n          setChainPropAccess(a, chain);\n        }\n      };\n\n      Object.defineProperty(owner, prop, {\n        get: function get() {\n          return base;\n        },\n        set: setter\n      });\n      return;\n    }\n\n    setPropertyAccess(base, prop, {\n      get: abort,\n      set: noopFunc\n    });\n  };\n\n  setChainPropAccess(window, property);\n  window.onerror = createOnErrorHandler(rid).bind();\n}\ndebugOnPropertyRead.names = ['debug-on-property-read'];\ndebugOnPropertyRead.injections = [randomId, setPropertyAccess, getPropertyInChain, createOnErrorHandler, hit, toRegExp, matchStackTrace, noopFunc];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet debug-on-property-write\n *\n * @description\n * This scriptlet is basically the same as [abort-on-property-write](#abort-on-property-write), but instead of aborting it starts the debugger.\n *\n * **It is not supposed to be used in production filter lists!**\n *\n * **Syntax**\n * ```\n * ! Aborts script when it tries to write in property `window.test`\n * example.org#%#//scriptlet('debug-on-property-write', 'test')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction debugOnPropertyWrite(source, property, stack) {\n  if (!property || !matchStackTrace(stack, new Error().stack)) {\n    return;\n  }\n\n  var rid = randomId();\n\n  var abort = function abort() {\n    hit(source);\n    debugger; // eslint-disable-line no-debugger\n  };\n\n  var setChainPropAccess = function setChainPropAccess(owner, property) {\n    var chainInfo = getPropertyInChain(owner, property);\n    var base = chainInfo.base;\n    var prop = chainInfo.prop,\n        chain = chainInfo.chain;\n\n    if (chain) {\n      var setter = function setter(a) {\n        base = a;\n\n        if (a instanceof Object) {\n          setChainPropAccess(a, chain);\n        }\n      };\n\n      Object.defineProperty(owner, prop, {\n        get: function get() {\n          return base;\n        },\n        set: setter\n      });\n      return;\n    }\n\n    setPropertyAccess(base, prop, {\n      set: abort\n    });\n  };\n\n  setChainPropAccess(window, property);\n  window.onerror = createOnErrorHandler(rid).bind();\n}\ndebugOnPropertyWrite.names = ['debug-on-property-write'];\ndebugOnPropertyWrite.injections = [randomId, setPropertyAccess, getPropertyInChain, createOnErrorHandler, hit, toRegExp, matchStackTrace];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet debug-current-inline-script\n *\n * @description\n * This scriptlet is basically the same as [abort-current-inline-script](#abort-current-inline-script), but instead of aborting it starts the debugger.\n *\n * **It is not supposed to be used in production filter lists!**\n *\n * **Syntax**\n *```\n * ! Aborts script when it tries to access `window.alert`\n * example.org#%#//scriptlet('debug-current-inline-script', 'alert')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction debugCurrentInlineScript(source, property) {\n  var search = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var searchRegexp = toRegExp(search);\n  var rid = randomId();\n\n  var getCurrentScript = function getCurrentScript() {\n    if ('currentScript' in document) {\n      return document.currentScript; // eslint-disable-line compat/compat\n    }\n\n    var scripts = document.getElementsByTagName('script');\n    return scripts[scripts.length - 1];\n  };\n\n  var ourScript = getCurrentScript();\n\n  var abort = function abort() {\n    var scriptEl = getCurrentScript();\n\n    if (scriptEl instanceof HTMLScriptElement && scriptEl.textContent.length > 0 && scriptEl !== ourScript && (!search || searchRegexp.test(scriptEl.textContent))) {\n      hit(source);\n      debugger; // eslint-disable-line no-debugger\n    }\n  };\n\n  var setChainPropAccess = function setChainPropAccess(owner, property) {\n    var chainInfo = getPropertyInChain(owner, property);\n    var base = chainInfo.base;\n    var prop = chainInfo.prop,\n        chain = chainInfo.chain;\n\n    if (chain) {\n      var setter = function setter(a) {\n        base = a;\n\n        if (a instanceof Object) {\n          setChainPropAccess(a, chain);\n        }\n      };\n\n      Object.defineProperty(owner, prop, {\n        get: function get() {\n          return base;\n        },\n        set: setter\n      });\n      return;\n    }\n\n    var currentValue = base[prop];\n    setPropertyAccess(base, prop, {\n      set: function set(value) {\n        abort();\n        currentValue = value;\n      },\n      get: function get() {\n        abort();\n        return currentValue;\n      }\n    });\n  };\n\n  setChainPropAccess(window, property);\n  window.onerror = createOnErrorHandler(rid).bind();\n}\ndebugCurrentInlineScript.names = ['debug-current-inline-script'];\ndebugCurrentInlineScript.injections = [randomId, setPropertyAccess, getPropertyInChain, toRegExp, createOnErrorHandler, hit];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet remove-attr\n *\n * @description\n * Removes the specified attributes from DOM nodes. This scriptlet runs once when the page loads\n * and after that periodically in order to DOM tree changes.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#remove-attrjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('remove-attr', attrs[, selector])\n * ```\n *\n * - `attrs` — required, attribute or list of attributes joined by '|'\n * - `selector` — optional, CSS selector, specifies DOM nodes from which the attributes will be removed\n *\n * **Examples**\n * 1.  Removes by attribute\n *     ```\n *     example.org#%#//scriptlet('remove-attr', 'example|test')\n *     ```\n *\n *     ```html\n *     <!-- before  -->\n *     <div example=\"true\" test=\"true\">Some text</div>\n *\n *     <!-- after -->\n *     <div>Some text</div>\n *     ```\n *\n * 2. Removes with specified selector\n *     ```\n *     example.org#%#//scriptlet('remove-attr', 'example', 'div[class=\"inner\"]')\n *     ```\n *\n *     ```html\n *     <!-- before -->\n *     <div class=\"wrapper\" example=\"true\">\n *         <div class=\"inner\" example=\"true\">Some text</div>\n *     </div>\n *\n *     <!-- after -->\n *     <div class=\"wrapper\" example=\"true\">\n *         <div class=\"inner\">Some text</div>\n *     </div>\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction removeAttr(source, attrs, selector) {\n  if (!attrs) {\n    return;\n  }\n\n  attrs = attrs.split(/\\s*\\|\\s*/);\n\n  if (!selector) {\n    selector = \"[\".concat(attrs.join('],['), \"]\");\n  }\n\n  var rmattr = function rmattr() {\n    var nodes = [].slice.call(document.querySelectorAll(selector));\n    var removed = false;\n    nodes.forEach(function (node) {\n      attrs.forEach(function (attr) {\n        node.removeAttribute(attr);\n        removed = true;\n      });\n    });\n\n    if (removed) {\n      hit(source);\n    }\n  };\n\n  rmattr(); // 'true' for observing attributes\n\n  observeDOMChanges(rmattr, true);\n}\nremoveAttr.names = ['remove-attr', // aliases are needed for matching the related scriptlet converted into our syntax\n'remove-attr.js', 'ubo-remove-attr.js', 'ra.js', 'ubo-ra.js', 'ubo-remove-attr', 'ubo-ra'];\nremoveAttr.injections = [hit, observeDOMChanges];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet remove-class\n *\n * @description\n * Removes the specified classes from DOM nodes. This scriptlet runs once after the page loads\n * and after that periodically in order to DOM tree changes.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#remove-classjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('remove-class', classes[, selector])\n * ```\n *\n * - `classes` — required, class or list of classes separated by '|'\n * - `selector` — optional, CSS selector, specifies DOM nodes from which the classes will be removed.\n * If there is no `selector`, each class of `classes` independently will be removed from all nodes which has one\n *\n * **Examples**\n * 1.  Removes by classes\n *     ```\n *     example.org#%#//scriptlet('remove-class', 'example|test')\n *     ```\n *\n *     ```html\n *     <!-- before  -->\n *     <div id=\"first\" class=\"nice test\">Some text</div>\n *     <div id=\"second\" class=\"rare example for test\">Some text</div>\n *     <div id=\"third\" class=\"testing better example\">Some text</div>\n *\n *     <!-- after -->\n *     <div id=\"first\" class=\"nice\">Some text</div>\n *     <div id=\"second\" class=\"rare for\">Some text</div>\n *     <div id=\"third\" class=\"testing better\">Some text</div>\n *     ```\n *\n * 2. Removes with specified selector\n *     ```\n *     example.org#%#//scriptlet('remove-class', 'branding', 'div[class^=\"inner\"]')\n *     ```\n *\n *     ```html\n *     <!-- before -->\n *     <div class=\"wrapper true branding\">\n *         <div class=\"inner bad branding\">Some text</div>\n *     </div>\n *\n *     <!-- after -->\n *     <div class=\"wrapper true branding\">\n *         <div class=\"inner bad\">Some text</div>\n *     </div>\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction removeClass(source, classNames, selector) {\n  if (!classNames) {\n    return;\n  }\n\n  classNames = classNames.split(/\\s*\\|\\s*/);\n  var selectors = [];\n\n  if (!selector) {\n    selectors = classNames.map(function (className) {\n      return \".\".concat(className);\n    });\n  }\n\n  var removeClassHandler = function removeClassHandler() {\n    var nodes = new Set();\n\n    if (selector) {\n      var foundedNodes = [].slice.call(document.querySelectorAll(selector));\n      foundedNodes.forEach(function (n) {\n        return nodes.add(n);\n      });\n    } else if (selectors.length > 0) {\n      selectors.forEach(function (s) {\n        var elements = document.querySelectorAll(s);\n\n        for (var i = 0; i < elements.length; i += 1) {\n          var element = elements[i];\n          nodes.add(element);\n        }\n      });\n    }\n\n    var removed = false;\n    nodes.forEach(function (node) {\n      classNames.forEach(function (className) {\n        if (node.classList.contains(className)) {\n          node.classList.remove(className);\n          removed = true;\n        }\n      });\n    });\n\n    if (removed) {\n      hit(source);\n    }\n  };\n\n  removeClassHandler();\n  var CLASS_ATTR_NAME = ['class']; // 'true' for observing attributes\n  // 'class' for observing only classes\n\n  observeDOMChanges(removeClassHandler, true, CLASS_ATTR_NAME);\n}\nremoveClass.names = ['remove-class', // aliases are needed for matching the related scriptlet converted into our syntax\n'remove-class.js', 'ubo-remove-class.js', 'rc.js', 'ubo-rc.js', 'ubo-remove-class', 'ubo-rc'];\nremoveClass.injections = [hit, observeDOMChanges];\n\n/**\n * @scriptlet disable-newtab-links\n *\n * @description\n * Prevents opening new tabs and windows if there is `target` attribute in element.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#disable-newtab-linksjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('disable-newtab-links')\n * ```\n */\n\nfunction disableNewtabLinks(source) {\n  document.addEventListener('click', function (ev) {\n    var target = ev.target;\n\n    while (target !== null) {\n      if (target.localName === 'a' && target.hasAttribute('target')) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        hit(source);\n        break;\n      }\n\n      target = target.parentNode;\n    }\n  });\n}\ndisableNewtabLinks.names = ['disable-newtab-links', // aliases are needed for matching the related scriptlet converted into our syntax\n'disable-newtab-links.js', 'ubo-disable-newtab-links.js', 'ubo-disable-newtab-links'];\ndisableNewtabLinks.injections = [hit];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet adjust-setInterval\n *\n * @description\n * Adjusts interval for specified setInterval() callbacks.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#nano-setinterval-boosterjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('adjust-setInterval'[, match [, interval[, boost]]])\n * ```\n *\n * - `match` - optional, string/regular expression, matching in stringified callback function\n * - `interval` - optional, defaults to 1000, matching setInterval delay; decimal integer OR '*' for any delay\n * - `boost` - optional, default to 0.05, float, capped at 50 times for up and down (0.02...50), interval multiplier\n *\n * **Examples**\n * 1. Adjust all setInterval() x20 times where interval equal 1000ms:\n *     ```\n *     example.org#%#//scriptlet('adjust-setInterval')\n *     ```\n *\n * 2. Adjust all setInterval() x20 times where callback mathed with `example` and interval equal 1000ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setInterval', 'example')\n *     ```\n *\n * 3. Adjust all setInterval() x20 times where callback mathed with `example` and interval equal 400ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setInterval', 'example', '400')\n *     ```\n *\n * 4. Slow down setInterval() x2 times where callback matched with `example` and interval equal 1000ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setInterval', 'example', '', '2')\n *     ```\n * 5. Adjust all setInterval() x50 times where interval equal 2000ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setInterval', '', '2000', '0.02')\n *     ```\n * 6. Adjust all setInterval() x50 times where interval is randomized\n *     ```\n *     example.org#%#//scriptlet('adjust-setInterval', '', '*', '0.02')\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction adjustSetInterval(source, match, interval, boost) {\n  var nativeSetInterval = window.setInterval;\n  var matchRegexp = toRegExp(match);\n\n  var intervalWrapper = function intervalWrapper(cb, d) {\n    if (matchRegexp.test(cb.toString()) && isDelayMatched(interval, d)) {\n      d *= getBoostMultiplier(boost);\n      hit(source);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return nativeSetInterval.apply(window, [cb, d].concat(args));\n  };\n\n  window.setInterval = intervalWrapper;\n}\nadjustSetInterval.names = ['adjust-setInterval', // aliases are needed for matching the related scriptlet converted into our syntax\n'nano-setInterval-booster.js', 'ubo-nano-setInterval-booster.js', 'nano-sib.js', 'ubo-nano-sib.js', 'ubo-nano-setInterval-booster', 'ubo-nano-sib'];\nadjustSetInterval.injections = [hit, toRegExp, getBoostMultiplier, isDelayMatched, nativeIsNaN, nativeIsFinite, getMatchDelay, getWildcardSymbol, shouldMatchAnyDelay];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet adjust-setTimeout\n *\n * @description\n * Adjusts timeout for specified setTimout() callbacks.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#nano-settimeout-boosterjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('adjust-setTimeout'[, match [, timeout[, boost]]])\n * ```\n *\n * - `match` - optional, string/regular expression, matching in stringified callback function\n * - `timeout` - optional, defaults to 1000, matching setTimout delay; decimal integer OR '*' for any delay\n * - `boost` - optional, default to 0.05, float, capped at 50 times for up and down (0.02...50), timeout multiplier\n *\n * **Examples**\n * 1. Adjust all setTimeout() x20 times where timeout equal 1000ms:\n *     ```\n *     example.org#%#//scriptlet('adjust-setTimeout')\n *     ```\n *\n * 2. Adjust all setTimeout() x20 times where callback mathed with `example` and timeout equal 1000ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setTimeout', 'example')\n *     ```\n *\n * 3. Adjust all setTimeout() x20 times where callback mathed with `example` and timeout equal 400ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setTimeout', 'example', '400')\n *     ```\n *\n * 4. Slow down setTimeout() x2 times where callback matched with `example` and timeout equal 1000ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setTimeout', 'example', '', '2')\n *     ```\n * 5. Adjust all setTimeout() x50 times where timeout equal 2000ms\n *     ```\n *     example.org#%#//scriptlet('adjust-setTimeout', '', '2000', '0.02')\n *     ```\n * 6. Adjust all setTimeout() x20 times where callback mathed with `test` and timeout is randomized\n *     ```\n *     example.org#%#//scriptlet('adjust-setTimeout', 'test', '*')\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction adjustSetTimeout(source, match, timeout, boost) {\n  var nativeSetTimeout = window.setTimeout;\n  var matchRegexp = toRegExp(match);\n\n  var timeoutWrapper = function timeoutWrapper(cb, d) {\n    if (matchRegexp.test(cb.toString()) && isDelayMatched(timeout, d)) {\n      d *= getBoostMultiplier(boost);\n      hit(source);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return nativeSetTimeout.apply(window, [cb, d].concat(args));\n  };\n\n  window.setTimeout = timeoutWrapper;\n}\nadjustSetTimeout.names = ['adjust-setTimeout', // aliases are needed for matching the related scriptlet converted into our syntax\n'nano-setTimeout-booster.js', 'ubo-nano-setTimeout-booster.js', 'nano-stb.js', 'ubo-nano-stb.js', 'ubo-nano-setTimeout-booster', 'ubo-nano-stb'];\nadjustSetTimeout.injections = [hit, toRegExp, getBoostMultiplier, isDelayMatched, nativeIsNaN, nativeIsFinite, getMatchDelay, getWildcardSymbol, shouldMatchAnyDelay];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet dir-string\n *\n * @description\n * Wraps the `console.dir` API to call the `toString` method of the argument.\n * There are several adblock circumvention systems that detect browser devtools\n * and hide themselves. Therefore, if we force them to think\n * that devtools are open (using this scrciptlet),\n * it will automatically disable the adblock circumvention script.\n *\n * Related ABP source:\n * https://github.com/adblockplus/adblockpluscore/blob/6b2a309054cc23432102b85d13f12559639ef495/lib/content/snippets.js#L766\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('dir-string'[, times])\n * ```\n * - `times` - optional, the number of times to call the `toString` method of the argument to `console.dir`\n *\n * **Example**\n * ```\n * ! Run 2 times\n * example.org#%#//scriptlet('dir-string', '2')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction dirString(source, times) {\n  var _console = console,\n      dir = _console.dir;\n  times = parseInt(times, 10);\n\n  function dirWrapper(object) {\n    // eslint-disable-next-line no-unused-vars\n    var temp;\n\n    for (var i = 0; i < times; i += 1) {\n      // eslint-disable-next-line no-unused-expressions\n      temp = \"\".concat(object);\n    }\n\n    if (typeof dir === 'function') {\n      dir.call(this, object);\n    }\n\n    hit(source, temp);\n  } // eslint-disable-next-line no-console\n\n\n  console.dir = dirWrapper;\n}\ndirString.names = ['dir-string', 'abp-dir-string'];\ndirString.injections = [hit];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet json-prune\n *\n * @description\n * Removes specified properties from the result of calling JSON.parse and returns the caller\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#json-prunejs-\n *\n * Related ABP source:\n * https://github.com/adblockplus/adblockpluscore/blob/master/lib/content/snippets.js#L1285\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('json-prune'[, propsToRemove [, obligatoryProps [, stack]]])\n * ```\n *\n * - `propsToRemove` - optional, string of space-separated properties to remove\n * - `obligatoryProps` - optional, string of space-separated properties which must be all present for the pruning to occur\n * - `stack` - optional, string or regular expression that must match the current function call stack trace\n *\n * > Note please that you can use wildcard `*` for chain property name.\n * e.g. 'ad.*.src' instead of 'ad.0.src ad.1.src ad.2.src ...'\n *\n * **Examples**\n * 1. Removes property `example` from the results of JSON.parse call\n *     ```\n *     example.org#%#//scriptlet('json-prune', 'example')\n *     ```\n *\n *     For instance, the following call will return `{ one: 1}`\n *\n *     ```html\n *     JSON.parse('{\"one\":1,\"example\":true}')\n *     ```\n *\n * 2. If there are no specified properties in the result of JSON.parse call, pruning will NOT occur\n *     ```\n *     example.org#%#//scriptlet('json-prune', 'one', 'obligatoryProp')\n *     ```\n *\n *     For instance, the following call will return `{ one: 1, two: 2}`\n *\n *     ```html\n *     JSON.parse('{\"one\":1,\"two\":2}')\n *     ```\n *\n * 3. A property in a list of properties can be a chain of properties\n *\n *     ```\n *     example.org#%#//scriptlet('json-prune', 'a.b', 'adpath.url.first')\n *     ```\n *\n * 4. Removes property `content.ad` from the results of JSON.parse call it's error stack trace contains `test.js`\n *     ```\n *     example.org#%#//scriptlet('json-prune', 'content.ad', '', 'test.js')\n *     ```\n *\n * 5. A property in a list of properties can be a chain of properties with wildcard in it\n *\n *     ```\n *     example.org#%#//scriptlet('json-prune', 'content.*.media.src', 'content.*.media.preroll')\n *     ```\n *\n * 6. Call with no arguments will log the current hostname and json payload at the console\n *     ```\n *     example.org#%#//scriptlet('json-prune')\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction jsonPrune(source, propsToRemove, requiredInitialProps, stack) {\n  if (!!stack && !matchStackTrace(stack, new Error().stack)) {\n    return;\n  } // eslint-disable-next-line no-console\n\n\n  var log = console.log.bind(console);\n  var prunePaths = propsToRemove !== undefined && propsToRemove !== '' ? propsToRemove.split(/ +/) : [];\n  var requiredPaths = requiredInitialProps !== undefined && requiredInitialProps !== '' ? requiredInitialProps.split(/ +/) : [];\n\n  function isPruningNeeded(root) {\n    if (!root) {\n      return false;\n    }\n\n    var shouldProcess;\n\n    for (var i = 0; i < requiredPaths.length; i += 1) {\n      var requiredPath = requiredPaths[i];\n      var lastNestedPropName = requiredPath.split('.').pop();\n      var hasWildcard = requiredPath.indexOf('.*.') > -1 || requiredPath.indexOf('*.') > -1 || requiredPath.indexOf('.*') > -1 || requiredPath.indexOf('.[].') > -1 || requiredPath.indexOf('[].') > -1 || requiredPath.indexOf('.[]') > -1; // if the path has wildcard, getPropertyInChain should 'look through' chain props\n\n      var details = getWildcardPropertyInChain(root, requiredPath, hasWildcard); // start value of 'shouldProcess' due to checking below\n\n      shouldProcess = !hasWildcard;\n\n      for (var _i = 0; _i < details.length; _i += 1) {\n        if (hasWildcard) {\n          // if there is a wildcard,\n          // at least one (||) of props chain should be present in object\n          shouldProcess = !(details[_i].base[lastNestedPropName] === undefined) || shouldProcess;\n        } else {\n          // otherwise each one (&&) of them should be there\n          shouldProcess = !(details[_i].base[lastNestedPropName] === undefined) && shouldProcess;\n        }\n      }\n    }\n\n    return shouldProcess;\n  }\n  /**\n   * Prunes properties of 'root' object\n   * @param {Object} root\n   */\n\n\n  var jsonPruner = function jsonPruner(root) {\n    if (prunePaths.length === 0) {\n      log(window.location.hostname, root);\n      return root;\n    }\n\n    try {\n      if (isPruningNeeded(root) === false) {\n        return root;\n      } // if pruning is needed, we check every input pathToRemove\n      // and delete it if root has it\n\n\n      prunePaths.forEach(function (path) {\n        var ownerObjArr = getWildcardPropertyInChain(root, path, true);\n        ownerObjArr.forEach(function (ownerObj) {\n          if (ownerObj !== undefined && ownerObj.base) {\n            delete ownerObj.base[ownerObj.prop];\n            hit(source);\n          }\n        });\n      });\n    } catch (e) {\n      log(e.toString());\n    }\n\n    return root;\n  };\n\n  var nativeJSONParse = JSON.parse;\n\n  var jsonParseWrapper = function jsonParseWrapper() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    // dealing with stringified json in args, which should be parsed.\n    // so we call nativeJSONParse as JSON.parse which is bound to JSON object\n    var root = nativeJSONParse.apply(JSON, args);\n    return jsonPruner(root);\n  }; // JSON.parse mocking\n\n\n  jsonParseWrapper.toString = nativeJSONParse.toString.bind(nativeJSONParse);\n  JSON.parse = jsonParseWrapper; // eslint-disable-next-line compat/compat\n\n  var nativeResponseJson = Response.prototype.json; // eslint-disable-next-line func-names\n\n  var responseJsonWrapper = function responseJsonWrapper() {\n    var promise = nativeResponseJson.apply(this);\n    return promise.then(function (obj) {\n      return jsonPruner(obj);\n    });\n  }; // do nothing if browser does not support Response (e.g. Internet Explorer)\n  // https://developer.mozilla.org/en-US/docs/Web/API/Response\n\n\n  if (typeof Response === 'undefined') {\n    return;\n  } // eslint-disable-next-line compat/compat\n\n\n  Response.prototype.json = responseJsonWrapper;\n}\njsonPrune.names = ['json-prune', // aliases are needed for matching the related scriptlet converted into our syntax\n'json-prune.js', 'ubo-json-prune.js', 'ubo-json-prune', 'abp-json-prune'];\njsonPrune.injections = [hit, matchStackTrace, getWildcardPropertyInChain, toRegExp, getWildcardSymbol];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet prevent-requestAnimationFrame\n *\n * @description\n * Prevents a `requestAnimationFrame` call\n * if the text of the callback is matching the specified search string which does not start with `!`;\n * otherwise mismatched calls should be defused.\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#no-requestanimationframe-ifjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-requestAnimationFrame'[, search])\n * ```\n *\n * - `search` - optional, string or regular expression.\n * If starts with `!`, scriptlet will not match the stringified callback but all other will be defused.\n * If do not start with `!`, the stringified callback will be matched.\n *\n * Call with no argument will log all requestAnimationFrame calls while debugging.\n * So do not use the scriptlet without any parameter in production filter lists.\n *\n * **Examples**\n * 1. Prevents `requestAnimationFrame` calls if the callback matches `/\\.test/`.\n *     ```bash\n *     example.org#%#//scriptlet('prevent-requestAnimationFrame', '/\\.test/')\n *     ```\n *\n *     For instance, the following call will be prevented:\n *     ```javascript\n *     var times = 0;\n *     requestAnimationFrame(function change() {\n *         window.test = 'new value';\n *         if (times < 2) {\n *             times += 1;\n *             requestAnimationFrame(change);\n *         }\n *     });\n *     ```\n * 2. Prevents `requestAnimationFrame` calls if **does not match** 'check'.\n *     ```bash\n *     example.org#%#//scriptlet('prevent-requestAnimationFrame', '!check')\n *     ```\n *\n *     For instance, only the first call will be prevented:\n *\n *     ```javascript\n *     var timesFirst = 0;\n *     requestAnimationFrame(function changeFirst() {\n *         window.check = 'should not be prevented';\n *         if (timesFirst < 2) {\n *             timesFirst += 1;\n *             requestAnimationFrame(changeFirst);\n *         }\n *     });\n *\n *     var timesSecond = 0;\n *     requestAnimationFrame(function changeSecond() {\n *         window.second = 'should be prevented';\n *         if (timesSecond < 2) {\n *             timesSecond += 1;\n *             requestAnimationFrame(changeSecond);\n *         }\n *     });\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction preventRequestAnimationFrame(source, match) {\n  var nativeRequestAnimationFrame = window.requestAnimationFrame; // logs requestAnimationFrame to console if no arguments have been specified\n\n  var shouldLog = typeof match === 'undefined';\n\n  var _parseMatchArg = parseMatchArg(match),\n      isInvertedMatch = _parseMatchArg.isInvertedMatch,\n      matchRegexp = _parseMatchArg.matchRegexp;\n\n  var rafWrapper = function rafWrapper(callback) {\n    var shouldPrevent = false;\n\n    if (shouldLog) {\n      var logMessage = \"log: requestAnimationFrame(\\\"\".concat(callback.toString(), \"\\\")\");\n      hit(source, logMessage);\n    } else {\n      shouldPrevent = matchRegexp.test(callback.toString()) !== isInvertedMatch;\n    }\n\n    if (shouldPrevent) {\n      hit(source);\n      return nativeRequestAnimationFrame(noopFunc);\n    }\n\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return nativeRequestAnimationFrame.apply(window, [callback].concat(args));\n  };\n\n  window.requestAnimationFrame = rafWrapper;\n}\npreventRequestAnimationFrame.names = ['prevent-requestAnimationFrame', // aliases are needed for matching the related scriptlet converted into our syntax\n'no-requestAnimationFrame-if.js', 'ubo-no-requestAnimationFrame-if.js', 'norafif.js', 'ubo-norafif.js', 'ubo-no-requestAnimationFrame-if', 'ubo-norafif'];\npreventRequestAnimationFrame.injections = [hit, noopFunc, parseMatchArg, toRegExp, startsWith];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet set-cookie\n *\n * @description\n * Sets a cookie with the specified name and value. Cookie path defaults to root.\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('set-cookie', name, value)\n * ```\n *\n * - `name` - required, cookie name to be set\n * - `value` - required, cookie value; possible values:\n *     - number `>= 0 && <= 15`\n *     - one of the predefined constants:\n *         - `true` / `True`\n *         - `false` / `False`\n *         - `yes` / `Yes` / `Y`\n *         - `no`\n *         - `ok` / `OK`\n *\n * **Examples**\n * ```\n * example.org#%#//scriptlet('set-cookie', 'ReadlyCookieConsent', '1'\n *\n * example.org#%#//scriptlet('set-cookie', 'gdpr-settings-cookie', 'true')\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction setCookie(source, name, value) {\n  var cookieData = prepareCookie(name, value);\n\n  if (cookieData) {\n    hit(source);\n    document.cookie = cookieData;\n  }\n}\nsetCookie.names = ['set-cookie'];\nsetCookie.injections = [hit, nativeIsNaN, prepareCookie];\n\n/**\n * @scriptlet set-cookie-reload\n *\n * @description\n * Sets a cookie with the specified name and value, and then reloads the current page.\n * If reloading option is not needed, use [set-cookie](#set-cookie) scriptlet.\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('set-cookie-reload', name, value)\n * ```\n *\n * - `name` - required, cookie name to be set\n * - `value` - required, cookie value; possible values:\n *     - number `>= 0 && <= 15`\n *     - one of the predefined constants:\n *         - `true` / `True`\n *         - `false` / `False`\n *         - `yes` / `Yes` / `Y`\n *         - `no`\n *         - `ok` / `OK`\n *\n * **Examples**\n * ```\n * example.org#%#//scriptlet('set-cookie-reload', 'checking', 'ok')\n *\n * example.org#%#//scriptlet('set-cookie-reload', 'gdpr-settings-cookie', '1')\n * ```\n */\n\nfunction setCookieReload(source, name, value) {\n  var isCookieAlreadySet = document.cookie.split(';').some(function (cookieStr) {\n    var pos = cookieStr.indexOf('=');\n\n    if (pos === -1) {\n      return false;\n    }\n\n    var cookieName = cookieStr.slice(0, pos).trim();\n    var cookieValue = cookieStr.slice(pos + 1).trim();\n    return name === cookieName && value === cookieValue;\n  });\n  var shouldReload = !isCookieAlreadySet;\n  var cookieData = prepareCookie(name, value);\n\n  if (cookieData) {\n    hit(source);\n    document.cookie = cookieData;\n\n    if (shouldReload) {\n      window.location.reload();\n    }\n  }\n}\nsetCookieReload.names = ['set-cookie-reload'];\nsetCookieReload.injections = [hit, nativeIsNaN, prepareCookie];\n\n/**\n * @scriptlet hide-in-shadow-dom\n *\n * @description\n * Hides elements inside open shadow DOM elements.\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('hide-in-shadow-dom', selector[, baseSelector])\n * ```\n *\n * - `selector` — required, CSS selector of element in shadow-dom to hide\n * - `baseSelector` — optional, selector of specific page DOM element,\n * narrows down the part of the page DOM where shadow-dom host supposed to be,\n * defaults to document.documentElement\n *\n * > `baseSelector` should match element of the page DOM, but not of shadow DOM\n *\n * **Examples**\n * ```\n * ! hides menu bar\n * virustotal.com#%#//scriptlet('hide-in-shadow-dom', 'iron-pages', 'vt-virustotal-app')\n *\n * ! hides floating element\n * virustotal.com#%#//scriptlet('hide-in-shadow-dom', 'vt-ui-contact-fab')\n * ```\n */\n\nfunction hideInShadowDom(source, selector, baseSelector) {\n  // do nothing if browser does not support ShadowRoot\n  // https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\n  if (!Element.prototype.attachShadow) {\n    return;\n  }\n\n  var hideElement = function hideElement(targetElement) {\n    var DISPLAY_NONE_CSS = 'display:none!important;';\n    targetElement.style.cssText = DISPLAY_NONE_CSS;\n  };\n  /**\n   * Handles shadow-dom piercing and hiding of found elements\n   */\n\n\n  var hideHandler = function hideHandler() {\n    // start value of shadow-dom hosts for the page dom\n    var hostElements = !baseSelector ? findHostElements(document.documentElement) : document.querySelectorAll(baseSelector); // if there is shadow-dom host, they should be explored\n\n    while (hostElements.length !== 0) {\n      var isHidden = false;\n\n      var _pierceShadowDom = pierceShadowDom(selector, hostElements),\n          targets = _pierceShadowDom.targets,\n          innerHosts = _pierceShadowDom.innerHosts;\n\n      targets.forEach(function (targetEl) {\n        hideElement(targetEl);\n        isHidden = true;\n      });\n\n      if (isHidden) {\n        hit(source);\n      } // continue to pierce for inner shadow-dom hosts\n      // and search inside them while the next iteration\n\n\n      hostElements = innerHosts;\n    }\n  };\n\n  hideHandler();\n  observeDOMChanges(hideHandler, true);\n}\nhideInShadowDom.names = ['hide-in-shadow-dom'];\nhideInShadowDom.injections = [hit, observeDOMChanges, flatten, findHostElements, pierceShadowDom];\n\n/**\n * @scriptlet remove-in-shadow-dom\n *\n * @description\n * Removes elements inside open shadow DOM elements.\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('remove-in-shadow-dom', selector[, baseSelector])\n * ```\n *\n * - `selector` — required, CSS selector of element in shadow-dom to remove\n * - `baseSelector` — optional, selector of specific page DOM element,\n * narrows down the part of the page DOM where shadow-dom host supposed to be,\n * defaults to document.documentElement\n *\n * > `baseSelector` should match element of the page DOM, but not of shadow DOM\n *\n * **Examples**\n * ```\n * ! removes menu bar\n * virustotal.com#%#//scriptlet('remove-in-shadow-dom', 'iron-pages', 'vt-virustotal-app')\n *\n * ! removes floating element\n * virustotal.com#%#//scriptlet('remove-in-shadow-dom', 'vt-ui-contact-fab')\n * ```\n */\n\nfunction removeInShadowDom(source, selector, baseSelector) {\n  // do nothing if browser does not support ShadowRoot\n  // https://developer.mozilla.org/en-US/docs/Web/API/ShadowRoot\n  if (!Element.prototype.attachShadow) {\n    return;\n  }\n\n  var removeElement = function removeElement(targetElement) {\n    targetElement.remove();\n  };\n  /**\n   * Handles shadow-dom piercing and removing of found elements\n   */\n\n\n  var removeHandler = function removeHandler() {\n    // start value of shadow-dom hosts for the page dom\n    var hostElements = !baseSelector ? findHostElements(document.documentElement) : document.querySelectorAll(baseSelector); // if there is shadow-dom host, they should be explored\n\n    while (hostElements.length !== 0) {\n      var isRemoved = false;\n\n      var _pierceShadowDom = pierceShadowDom(selector, hostElements),\n          targets = _pierceShadowDom.targets,\n          innerHosts = _pierceShadowDom.innerHosts;\n\n      targets.forEach(function (targetEl) {\n        removeElement(targetEl);\n        isRemoved = true;\n      });\n\n      if (isRemoved) {\n        hit(source);\n      } // continue to pierce for inner shadow-dom hosts\n      // and search inside them while the next iteration\n\n\n      hostElements = innerHosts;\n    }\n  };\n\n  removeHandler();\n  observeDOMChanges(removeHandler, true);\n}\nremoveInShadowDom.names = ['remove-in-shadow-dom'];\nremoveInShadowDom.injections = [hit, observeDOMChanges, flatten, findHostElements, pierceShadowDom];\n\n/**\n * @scriptlet no-floc\n *\n * @description\n * Prevents using Google Chrome tracking feature called Federated Learning of Cohorts (aka \"FLoC\")\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#no-flocjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('no-floc')\n * ```\n */\n\nfunction noFloc(source) {\n  var FLOC_PROPERTY_NAME = 'interestCohort';\n\n  if (Document instanceof Object === false) {\n    return;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(Document.prototype, FLOC_PROPERTY_NAME) || Document.prototype[FLOC_PROPERTY_NAME] instanceof Function === false) {\n    return;\n  } // document.interestCohort() is async function so it's better to return Promise.reject()\n  // https://github.com/WICG/floc/blob/dcd4c042fa6a81b048e04a78b184ea4203a75219/README.md\n\n\n  Document.prototype[FLOC_PROPERTY_NAME] = noopPromiseReject;\n  hit(source);\n}\nnoFloc.names = ['no-floc', // aliases are needed for matching the related scriptlet converted into our syntax\n'no-floc.js', 'ubo-no-floc.js', 'ubo-no-floc'];\nnoFloc.injections = [hit, noopPromiseReject];\n\n/* eslint-disable max-len */\n\n/**\n * @scriptlet prevent-fetch\n *\n * @description\n * Prevents `fetch` calls if **all** given parameters match\n *\n * Related UBO scriptlet:\n * https://github.com/gorhill/uBlock/wiki/Resources-Library#no-fetch-ifjs-\n *\n * **Syntax**\n * ```\n * example.org#%#//scriptlet('prevent-fetch'[, propsToMatch])\n * ```\n *\n * - `propsToMatch` - optional, string of space-separated properties to match; possible props:\n *   - string or regular expression for matching the URL passed to fetch call; empty string or wildcard `*` for all fetch calls match\n *   - colon-separated pairs `name:value` where\n *     - `name` is [`init` option name](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#parameters)\n *     - `value` is string or regular expression for matching the value of the option passed to fetch call\n *\n * > Usage with no arguments will log fetch calls to browser console;\n * which is usefull for debugging but permitted for production filter lists.\n *\n * **Examples**\n * 1. Prevent all fetch calls\n *     ```\n *     example.org#%#//scriptlet('prevent-fetch', '*')\n *     ```\n *\n * 2. Prevent fetch call for specific url\n *     ```\n *     example.org#%#//scriptlet('prevent-fetch', '/url\\\\.part/')\n *     ```\n *\n * 3. Prevent fetch call for specific request method\n *     ```\n *     example.org#%#//scriptlet('prevent-fetch', 'method:HEAD')\n *     ```\n *\n * 4. Prevent fetch call for specific url and request method\n *     ```\n *     example.org#%#//scriptlet('prevent-fetch', '/specified_url_part/ method:/HEAD|GET/')\n *     ```\n */\n\n/* eslint-enable max-len */\n\nfunction preventFetch(source, propsToMatch) {\n  // do nothing if browser does not support fetch or Proxy (e.g. Internet Explorer)\n  // https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\n  if (typeof fetch === 'undefined' || typeof Proxy === 'undefined') {\n    return;\n  }\n\n  var handlerWrapper = function handlerWrapper(target, thisArg, args) {\n    var shouldPrevent = false;\n    var fetchData = getFetchData(args);\n\n    if (typeof propsToMatch === 'undefined') {\n      // log if no propsToMatch given\n      var logMessage = \"log: fetch( \".concat(objectToString(fetchData), \" )\");\n      hit(source, logMessage);\n    } else if (propsToMatch === '' || propsToMatch === getWildcardSymbol()) {\n      // prevent all fetch calls\n      shouldPrevent = true;\n    } else {\n      var matchData = convertMatchPropsToObj(propsToMatch); // prevent only if all props match\n\n      shouldPrevent = Object.keys(matchData).every(function (matchKey) {\n        var matchValue = matchData[matchKey];\n        return Object.prototype.hasOwnProperty.call(fetchData, matchKey) && matchValue.test(fetchData[matchKey]);\n      });\n    }\n\n    if (shouldPrevent) {\n      hit(source);\n      return noopPromiseResolve();\n    }\n\n    return Reflect.apply(target, thisArg, args);\n  };\n\n  var fetchHandler = {\n    apply: handlerWrapper\n  };\n  fetch = new Proxy(fetch, fetchHandler); // eslint-disable-line no-global-assign\n}\npreventFetch.names = ['prevent-fetch', // aliases are needed for matching the related scriptlet converted into our syntax\n'no-fetch-if.js', 'ubo-no-fetch-if.js', 'ubo-no-fetch-if'];\npreventFetch.injections = [hit, getFetchData, objectToString, convertMatchPropsToObj, noopPromiseResolve, getWildcardSymbol, toRegExp, isEmptyObject, getRequestData, getObjectEntries, getObjectFromEntries];\n\n/**\n * This file must export all scriptlets which should be accessible\n */\n\nvar scriptletList = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    abortOnPropertyRead: abortOnPropertyRead,\n    abortOnPropertyWrite: abortOnPropertyWrite,\n    preventSetTimeout: preventSetTimeout,\n    preventSetInterval: preventSetInterval,\n    preventWindowOpen: preventWindowOpen,\n    abortCurrentInlineScript: abortCurrentInlineScript,\n    setConstant: setConstant,\n    removeCookie: removeCookie,\n    preventAddEventListener: preventAddEventListener,\n    preventBab: preventBab,\n    nowebrtc: nowebrtc,\n    logAddEventListener: logAddEventListener,\n    logEval: logEval,\n    log: log,\n    noeval: noeval,\n    preventEvalIf: preventEvalIf,\n    preventFab: preventFab,\n    setPopadsDummy: setPopadsDummy,\n    preventPopadsNet: preventPopadsNet,\n    preventAdfly: preventAdfly,\n    debugOnPropertyRead: debugOnPropertyRead,\n    debugOnPropertyWrite: debugOnPropertyWrite,\n    debugCurrentInlineScript: debugCurrentInlineScript,\n    removeAttr: removeAttr,\n    removeClass: removeClass,\n    disableNewtabLinks: disableNewtabLinks,\n    adjustSetInterval: adjustSetInterval,\n    adjustSetTimeout: adjustSetTimeout,\n    dirString: dirString,\n    jsonPrune: jsonPrune,\n    preventRequestAnimationFrame: preventRequestAnimationFrame,\n    setCookie: setCookie,\n    setCookieReload: setCookieReload,\n    hideInShadowDom: hideInShadowDom,\n    removeInShadowDom: removeInShadowDom,\n    noFloc: noFloc,\n    preventFetch: preventFetch\n});\n\n/**\n * Store of ADG redirects names and thier analogs.\n * As it is not a compatibility table, no need to keep in redirects array third-party redirects.\n *\n * Needed only for converion purposes.\n * e.g. googletagmanager-gtm is removed and should be removed from compatibility table as well\n * but now it works as alias for google-analytics so it should stay valid for compiler\n */\nvar redirects = [{\n  adg: '1x1-transparent.gif',\n  ubo: '1x1.gif',\n  abp: '1x1-transparent-gif'\n}, {\n  adg: '2x2-transparent.png',\n  ubo: '2x2.png',\n  abp: '2x2-transparent-png'\n}, {\n  adg: '3x2-transparent.png',\n  ubo: '3x2.png',\n  abp: '3x2-transparent-png'\n}, {\n  adg: '32x32-transparent.png',\n  ubo: '32x32.png',\n  abp: '32x32-transparent-png'\n}, {\n  adg: 'amazon-apstag',\n  ubo: 'amazon_apstag.js'\n}, {\n  adg: 'google-analytics',\n  ubo: 'google-analytics_analytics.js'\n}, {\n  adg: 'google-analytics-ga',\n  ubo: 'google-analytics_ga.js'\n}, {\n  adg: 'googlesyndication-adsbygoogle',\n  ubo: 'googlesyndication_adsbygoogle.js'\n}, {\n  // https://github.com/AdguardTeam/Scriptlets/issues/127\n  adg: 'googletagmanager-gtm',\n  ubo: 'google-analytics_ga.js'\n}, {\n  adg: 'googletagservices-gpt',\n  ubo: 'googletagservices_gpt.js'\n}, {\n  adg: 'metrika-yandex-watch'\n}, {\n  adg: 'metrika-yandex-tag'\n}, {\n  adg: 'noeval',\n  ubo: 'noeval-silent.js'\n}, {\n  adg: 'noopcss',\n  abp: 'blank-css'\n}, {\n  adg: 'noopframe',\n  ubo: 'noop.html',\n  abp: 'blank-html'\n}, {\n  adg: 'noopjs',\n  ubo: 'noop.js',\n  abp: 'blank-js'\n}, {\n  adg: 'nooptext',\n  ubo: 'noop.txt',\n  abp: 'blank-text'\n}, {\n  adg: 'noopmp3-0.1s',\n  ubo: 'noop-0.1s.mp3',\n  abp: 'blank-mp3'\n}, {\n  adg: 'noopmp4-1s',\n  ubo: 'noop-1s.mp4',\n  abp: 'blank-mp4'\n}, {\n  adg: 'noopvmap-1.0',\n  ubo: 'noop-vmap1.0.xml'\n}, {\n  adg: 'noopvast-2.0'\n}, {\n  adg: 'noopvast-3.0'\n}, {\n  adg: 'prevent-bab',\n  ubo: 'nobab.js'\n}, {\n  adg: 'prevent-fab-3.2.0',\n  ubo: 'nofab.js'\n}, {\n  adg: 'prevent-popads-net',\n  ubo: 'popads.js'\n}, {\n  adg: 'scorecardresearch-beacon',\n  ubo: 'scorecardresearch_beacon.js'\n}, {\n  adg: 'set-popads-dummy',\n  ubo: 'popads-dummy.js'\n}, {\n  adg: 'empty',\n  ubo: 'empty'\n}];\n\nvar JS_RULE_MARKER = '#%#';\nvar COMMENT_MARKER = '!';\n/**\n * Checks if rule text is comment e.g. !!example.org##+js(set-constant.js, test, false)\n * @param {string} rule\n * @return {boolean}\n */\n\nvar isComment = function isComment(rule) {\n  return startsWith(rule, COMMENT_MARKER);\n};\n/* ************************************************************************\n *\n * Scriptlets\n *\n ************************************************************************** */\n\n/**\n * uBlock scriptlet rule mask\n */\n\n\nvar UBO_SCRIPTLET_MASK_REG = /#@?#script:inject|#@?#\\s*\\+js/;\nvar UBO_SCRIPTLET_MASK_1 = '##+js';\nvar UBO_SCRIPTLET_MASK_2 = '##script:inject';\nvar UBO_SCRIPTLET_EXCEPTION_MASK_1 = '#@#+js';\nvar UBO_SCRIPTLET_EXCEPTION_MASK_2 = '#@#script:inject';\n/**\n * AdBlock Plus snippet rule mask\n */\n\nvar ABP_SCRIPTLET_MASK = '#$#';\nvar ABP_SCRIPTLET_EXCEPTION_MASK = '#@$#';\n/**\n * AdGuard CSS rule mask\n */\n\nvar ADG_CSS_MASK_REG = /#@?\\$#.+?\\s*\\{.*\\}\\s*$/g;\n/**\n * Checks if the `rule` is AdGuard scriptlet rule\n * @param {string} rule - rule text\n */\n\nvar isAdgScriptletRule = function isAdgScriptletRule(rule) {\n  return !isComment(rule) && rule.indexOf(ADG_SCRIPTLET_MASK) > -1;\n};\n/**\n * Checks if the `rule` is uBO scriptlet rule\n * @param {string} rule rule text\n */\n\n\nvar isUboScriptletRule = function isUboScriptletRule(rule) {\n  return (rule.indexOf(UBO_SCRIPTLET_MASK_1) > -1 || rule.indexOf(UBO_SCRIPTLET_MASK_2) > -1 || rule.indexOf(UBO_SCRIPTLET_EXCEPTION_MASK_1) > -1 || rule.indexOf(UBO_SCRIPTLET_EXCEPTION_MASK_2) > -1) && UBO_SCRIPTLET_MASK_REG.test(rule) && !isComment(rule);\n};\n/**\n * Checks if the `rule` is AdBlock Plus snippet\n * @param {string} rule rule text\n */\n\n\nvar isAbpSnippetRule = function isAbpSnippetRule(rule) {\n  return (rule.indexOf(ABP_SCRIPTLET_MASK) > -1 || rule.indexOf(ABP_SCRIPTLET_EXCEPTION_MASK) > -1) && rule.search(ADG_CSS_MASK_REG) === -1 && !isComment(rule);\n};\n/**\n * Finds scriptlet by it's name\n * @param {string} name - scriptlet name\n */\n\n\nvar getScriptletByName = function getScriptletByName(name) {\n  var scriptlets = Object.keys(scriptletList).map(function (key) {\n    return scriptletList[key];\n  });\n  return scriptlets.find(function (s) {\n    return s.names // full match name checking\n    && (s.names.indexOf(name) > -1 // or check ubo alias name without '.js' at the end\n    || !endsWith(name, '.js') && s.names.indexOf(\"\".concat(name, \".js\")) > -1);\n  });\n};\n/**\n * Checks if the scriptlet name is valid\n * @param {string} name - Scriptlet name\n */\n\n\nvar isValidScriptletName = function isValidScriptletName(name) {\n  if (!name) {\n    return false;\n  }\n\n  var scriptlet = getScriptletByName(name);\n\n  if (!scriptlet) {\n    return false;\n  }\n\n  return true;\n};\n/* ************************************************************************\n *\n * Redirects\n *\n ************************************************************************** */\n\n/**\n * Redirect resources markers\n */\n\n\nvar ADG_UBO_REDIRECT_MARKER = 'redirect=';\nvar ABP_REDIRECT_MARKER = 'rewrite=abp-resource:';\nvar EMPTY_REDIRECT_MARKER = 'empty';\nvar VALID_SOURCE_TYPES = ['image', 'media', 'subdocument', 'stylesheet', 'script', 'xmlhttprequest', 'other'];\n/**\n * Source types for redirect rules if there is no one of them.\n * Used for ADG -> UBO conversion.\n */\n\nvar ABSENT_SOURCE_TYPE_REPLACEMENT = [{\n  NAME: 'nooptext',\n  TYPES: VALID_SOURCE_TYPES\n}, {\n  NAME: 'noopjs',\n  TYPES: ['script']\n}, {\n  NAME: 'noopframe',\n  TYPES: ['subdocument']\n}, {\n  NAME: '1x1-transparent.gif',\n  TYPES: ['image']\n}, {\n  NAME: 'noopmp3-0.1s',\n  TYPES: ['media']\n}, {\n  NAME: 'noopmp4-1s',\n  TYPES: ['media']\n}, {\n  NAME: 'googlesyndication-adsbygoogle',\n  TYPES: ['xmlhttprequest', 'script']\n}, {\n  NAME: 'google-analytics',\n  TYPES: ['script']\n}, {\n  NAME: 'googletagservices-gpt',\n  TYPES: ['script']\n}];\nvar validAdgRedirects = redirects.filter(function (el) {\n  return el.adg;\n});\n/**\n * Compatibility object where KEYS = UBO redirect names and VALUES = ADG redirect names\n * It's used for UBO -> ADG converting\n */\n\nvar uboToAdgCompatibility = getObjectFromEntries(validAdgRedirects.filter(function (el) {\n  return el.ubo;\n}).map(function (el) {\n  return [el.ubo, el.adg];\n}));\n/**\n * Compatibility object where KEYS = ABP redirect names and VALUES = ADG redirect names\n * It's used for ABP -> ADG converting\n */\n\nvar abpToAdgCompatibility = getObjectFromEntries(validAdgRedirects.filter(function (el) {\n  return el.abp;\n}).map(function (el) {\n  return [el.abp, el.adg];\n}));\n/**\n * Compatibility object where KEYS = UBO redirect names and VALUES = ADG redirect names\n * It's used for ADG -> UBO converting\n */\n\nvar adgToUboCompatibility = getObjectFromEntries(validAdgRedirects.filter(function (el) {\n  return el.ubo;\n}).map(function (el) {\n  return [el.adg, el.ubo];\n}));\n/**\n * Needed for AdGuard redirect names validation where KEYS = **valid** AdGuard redirect names\n * 'adgToUboCompatibility' is still needed for ADG -> UBO converting\n */\n\nvar validAdgCompatibility = getObjectFromEntries(validAdgRedirects.map(function (el) {\n  return [el.adg, 'valid adg redirect'];\n}));\nvar REDIRECT_RULE_TYPES = {\n  VALID_ADG: {\n    marker: ADG_UBO_REDIRECT_MARKER,\n    compatibility: validAdgCompatibility\n  },\n  ADG: {\n    marker: ADG_UBO_REDIRECT_MARKER,\n    compatibility: adgToUboCompatibility\n  },\n  UBO: {\n    marker: ADG_UBO_REDIRECT_MARKER,\n    compatibility: uboToAdgCompatibility\n  },\n  ABP: {\n    marker: ABP_REDIRECT_MARKER,\n    compatibility: abpToAdgCompatibility\n  }\n};\n/**\n * Parses redirect rule modifiers\n * @param {string} rule\n * @returns {Array}\n */\n\nvar parseModifiers = function parseModifiers(rule) {\n  return substringAfter(rule, '$').split(',');\n};\n/**\n * Gets redirect resource name\n * @param {string} rule\n * @param {string} marker - specific Adg/Ubo or Abp redirect resources marker\n * @returns {string} - redirect resource name\n */\n\n\nvar getRedirectName = function getRedirectName(rule, marker) {\n  var ruleModifiers = parseModifiers(rule);\n  var redirectNamePart = ruleModifiers.find(function (el) {\n    return el.indexOf(marker) > -1;\n  });\n  return substringAfter(redirectNamePart, marker);\n};\n/**\n * Checks if the `rule` is AdGuard redirect rule.\n * Discards comments and JS rules and checks if the `rule` has 'redirect' modifier.\n * @param {string} rule - rule text\n */\n\n\nvar isAdgRedirectRule = function isAdgRedirectRule(rule) {\n  var MARKER_IN_BASE_PART_MASK = '/((?!\\\\$|\\\\,).{1})redirect=(.{0,}?)\\\\$(popup)?/';\n  return !isComment(rule) && rule.indexOf(REDIRECT_RULE_TYPES.ADG.marker) > -1 // some js rules may have 'redirect=' in it, so we should get rid of them\n  && rule.indexOf(JS_RULE_MARKER) === -1 // get rid of rules like '_redirect=*://look.$popup'\n  && !toRegExp(MARKER_IN_BASE_PART_MASK).test(rule);\n};\n/**\n * Checks if the `rule` satisfies the `type`\n * @param {string} rule - rule text\n * @param {'VALID_ADG'|'ADG'|'UBO'|'ABP'} type - type of a redirect rule\n */\n\n\nvar isRedirectRuleByType = function isRedirectRuleByType(rule, type) {\n  var _REDIRECT_RULE_TYPES$ = REDIRECT_RULE_TYPES[type],\n      marker = _REDIRECT_RULE_TYPES$.marker,\n      compatibility = _REDIRECT_RULE_TYPES$.compatibility;\n\n  if (rule && !isComment(rule) && rule.indexOf(marker) > -1) {\n    var redirectName = getRedirectName(rule, marker);\n\n    if (!redirectName) {\n      return false;\n    }\n\n    return redirectName === Object.keys(compatibility).find(function (el) {\n      return el === redirectName;\n    });\n  }\n\n  return false;\n};\n/**\n* Checks if the `rule` is **valid** AdGuard redirect resource rule\n* @param {string} rule - rule text\n* @returns {boolean}\n*/\n\n\nvar isValidAdgRedirectRule = function isValidAdgRedirectRule(rule) {\n  return isRedirectRuleByType(rule, 'VALID_ADG');\n};\n/**\n* Checks if the AdGuard redirect `rule` has Ubo analog. Needed for Adg->Ubo conversion\n* @param {string} rule - AdGuard rule text\n* @returns {boolean} - true if the rule can be converted to Ubo\n*/\n\n\nvar isAdgRedirectCompatibleWithUbo = function isAdgRedirectCompatibleWithUbo(rule) {\n  return isAdgRedirectRule(rule) && isRedirectRuleByType(rule, 'ADG');\n};\n/**\n* Checks if the Ubo redirect `rule` has AdGuard analog. Needed for Ubo->Adg conversion\n* @param {string} rule - Ubo rule text\n* @returns {boolean} - true if the rule can be converted to AdGuard\n*/\n\n\nvar isUboRedirectCompatibleWithAdg = function isUboRedirectCompatibleWithAdg(rule) {\n  return isRedirectRuleByType(rule, 'UBO');\n};\n/**\n* Checks if the Abp redirect `rule` has AdGuard analog. Needed for Abp->Adg conversion\n* @param {string} rule - Abp rule text\n* @returns {boolean} - true if the rule can be converted to AdGuard\n*/\n\n\nvar isAbpRedirectCompatibleWithAdg = function isAbpRedirectCompatibleWithAdg(rule) {\n  return isRedirectRuleByType(rule, 'ABP');\n};\n/**\n * Checks if the rule has specified content type before Adg -> Ubo conversion.\n *\n * Used ONLY for Adg -> Ubo conversion\n * because Ubo redirect rules must contain content type, but Adg and Abp must not.\n *\n * Also source type can not be added automatically because of such valid rules:\n * ! Abp:\n * $rewrite=abp-resource:blank-js,xmlhttprequest\n * ! Adg:\n * $script,redirect=noopvast-2.0\n * $xmlhttprequest,redirect=noopvast-2.0\n *\n * @param {string} rule\n * @returns {boolean}\n */\n\n\nvar hasValidContentType = function hasValidContentType(rule) {\n  var ruleModifiers = parseModifiers(rule); // rule can have more than one source type modifier\n\n  var sourceTypes = ruleModifiers.filter(function (el) {\n    return VALID_SOURCE_TYPES.indexOf(el) > -1;\n  });\n  var isSourceTypeSpecified = sourceTypes.length > 0;\n  var isEmptyRedirect = ruleModifiers.indexOf(\"\".concat(ADG_UBO_REDIRECT_MARKER).concat(EMPTY_REDIRECT_MARKER)) > -1;\n\n  if (isEmptyRedirect) {\n    // no source type for 'empty' is allowed\n    return true;\n  }\n\n  return isSourceTypeSpecified;\n};\n\nvar validator = {\n  UBO_SCRIPTLET_MASK_REG: UBO_SCRIPTLET_MASK_REG,\n  ABP_SCRIPTLET_MASK: ABP_SCRIPTLET_MASK,\n  ABP_SCRIPTLET_EXCEPTION_MASK: ABP_SCRIPTLET_EXCEPTION_MASK,\n  isComment: isComment,\n  isAdgScriptletRule: isAdgScriptletRule,\n  isUboScriptletRule: isUboScriptletRule,\n  isAbpSnippetRule: isAbpSnippetRule,\n  getScriptletByName: getScriptletByName,\n  isValidScriptletName: isValidScriptletName,\n  REDIRECT_RULE_TYPES: REDIRECT_RULE_TYPES,\n  ABSENT_SOURCE_TYPE_REPLACEMENT: ABSENT_SOURCE_TYPE_REPLACEMENT,\n  isAdgRedirectRule: isAdgRedirectRule,\n  isValidAdgRedirectRule: isValidAdgRedirectRule,\n  isAdgRedirectCompatibleWithUbo: isAdgRedirectCompatibleWithUbo,\n  isUboRedirectCompatibleWithAdg: isUboRedirectCompatibleWithAdg,\n  isAbpRedirectCompatibleWithAdg: isAbpRedirectCompatibleWithAdg,\n  parseModifiers: parseModifiers,\n  getRedirectName: getRedirectName,\n  hasValidContentType: hasValidContentType\n};\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar arrayLikeToArray = _arrayLikeToArray;\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}\n\nvar arrayWithoutHoles = _arrayWithoutHoles;\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nvar iterableToArray = _iterableToArray;\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}\n\nvar unsupportedIterableToArray = _unsupportedIterableToArray;\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar nonIterableSpread = _nonIterableSpread;\n\nfunction _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}\n\nvar toConsumableArray = _toConsumableArray;\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar arrayWithHoles = _arrayWithHoles;\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nvar nonIterableRest = _nonIterableRest;\n\nfunction _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}\n\nvar toArray = _toArray;\n\n/**\n * AdGuard scriptlet rule\n */\n\nvar ADGUARD_SCRIPTLET_MASK_REG = /#@?%#\\/\\/scriptlet\\(.+\\)/; // eslint-disable-next-line no-template-curly-in-string\n\nvar ADGUARD_SCRIPTLET_TEMPLATE = '${domains}#%#//scriptlet(${args})'; // eslint-disable-next-line no-template-curly-in-string\n\nvar ADGUARD_SCRIPTLET_EXCEPTION_TEMPLATE = '${domains}#@%#//scriptlet(${args})';\n/**\n * uBlock scriptlet rule mask\n */\n// eslint-disable-next-line no-template-curly-in-string\n\nvar UBO_SCRIPTLET_TEMPLATE = '${domains}##+js(${args})'; // eslint-disable-next-line no-template-curly-in-string\n\nvar UBO_SCRIPTLET_EXCEPTION_TEMPLATE = '${domains}#@#+js(${args})';\nvar UBO_ALIAS_NAME_MARKER = 'ubo-';\nvar UBO_SCRIPTLET_JS_ENDING = '.js'; // https://github.com/gorhill/uBlock/wiki/Static-filter-syntax#xhr\n\nvar UBO_XHR_TYPE = 'xhr';\nvar ADG_XHR_TYPE = 'xmlhttprequest';\nvar ADG_SET_CONSTANT_NAME = 'set-constant';\nvar ADG_SET_CONSTANT_EMPTY_STRING = '';\nvar UBO_SET_CONSTANT_EMPTY_STRING = '\\'\\'';\nvar ADG_PREVENT_FETCH_NAME = 'prevent-fetch';\nvar ADG_PREVENT_FETCH_EMPTY_STRING = '';\nvar ADG_PREVENT_FETCH_WILDCARD = getWildcardSymbol();\nvar UBO_NO_FETCH_IF_WILDCARD = '/^/';\nvar ESCAPED_COMMA_SEPARATOR = '\\\\,';\nvar COMMA_SEPARATOR = ',';\nvar MAX_REMOVE_ATTR_CLASS_ARGS_COUNT = 3;\nvar REMOVE_ATTR_METHOD = 'removeAttr';\nvar REMOVE_CLASS_METHOD = 'removeClass';\nvar REMOVE_ATTR_ALIASES = scriptletList[REMOVE_ATTR_METHOD].names;\nvar REMOVE_CLASS_ALIASES = scriptletList[REMOVE_CLASS_METHOD].names;\nvar ADG_REMOVE_ATTR_NAME = REMOVE_ATTR_ALIASES[0];\nvar ADG_REMOVE_CLASS_NAME = REMOVE_CLASS_ALIASES[0];\n/**\n * Returns array of strings separated by space which not in quotes\n * @param {string} str\n */\n\nvar getSentences = function getSentences(str) {\n  var reg = /'.*?'|\".*?\"|\\S+/g;\n  return str.match(reg);\n};\n/**\n * Replaces string with data by placeholders\n * @param {string} str\n * @param {Object} data - where keys are placeholders names\n */\n\n\nvar replacePlaceholders = function replacePlaceholders(str, data) {\n  return Object.keys(data).reduce(function (acc, key) {\n    var reg = new RegExp(\"\\\\$\\\\{\".concat(key, \"\\\\}\"), 'g');\n    acc = acc.replace(reg, data[key]);\n    return acc;\n  }, str);\n};\n/**\n * Converts string of UBO scriptlet rule to AdGuard scritlet rule\n * @param {string} rule - UBO scriptlet rule\n * @returns {Array} - array with one AdGuard scriptlet rule\n */\n\n\nvar convertUboScriptletToAdg = function convertUboScriptletToAdg(rule) {\n  var domains = getBeforeRegExp(rule, validator.UBO_SCRIPTLET_MASK_REG);\n  var mask = rule.match(validator.UBO_SCRIPTLET_MASK_REG)[0];\n  var template;\n\n  if (mask.indexOf('@') > -1) {\n    template = ADGUARD_SCRIPTLET_EXCEPTION_TEMPLATE;\n  } else {\n    template = ADGUARD_SCRIPTLET_TEMPLATE;\n  }\n\n  var parsedArgs = getStringInBraces(rule).split(/,\\s/g);\n\n  if (parsedArgs.length === 1) {\n    // Most probably this is not correct separator, in this case we use ','\n    parsedArgs = getStringInBraces(rule).split(/,/g);\n  }\n\n  var scriptletName = parsedArgs[0].indexOf(UBO_SCRIPTLET_JS_ENDING) > -1 ? \"ubo-\".concat(parsedArgs[0]) : \"ubo-\".concat(parsedArgs[0]).concat(UBO_SCRIPTLET_JS_ENDING);\n\n  if ((REMOVE_ATTR_ALIASES.indexOf(scriptletName) > -1 || REMOVE_CLASS_ALIASES.indexOf(scriptletName) > -1) && parsedArgs.length > MAX_REMOVE_ATTR_CLASS_ARGS_COUNT) {\n    parsedArgs = [parsedArgs[0], parsedArgs[1], // if there are more than 3 args for remove-attr/class scriptlet,\n    // ubo rule has maltiple selector separated by comma. so we should:\n    // 1. join them into a single string\n    // 2. replace escaped commas by regular ones\n    // https://github.com/AdguardTeam/Scriptlets/issues/133\n    replaceAll(parsedArgs.slice(2).join(\"\".concat(COMMA_SEPARATOR, \" \")), ESCAPED_COMMA_SEPARATOR, COMMA_SEPARATOR)];\n  }\n\n  var args = parsedArgs.map(function (arg, index) {\n    var outputArg = arg;\n\n    if (index === 0) {\n      outputArg = scriptletName;\n    } // for example: dramaserial.xyz##+js(abort-current-inline-script, $, popup)\n\n\n    if (arg === '$') {\n      outputArg = '$$';\n    }\n\n    return outputArg;\n  }).map(function (arg) {\n    return wrapInSingleQuotes(arg);\n  }).join(\"\".concat(COMMA_SEPARATOR, \" \"));\n  var adgRule = replacePlaceholders(template, {\n    domains: domains,\n    args: args\n  });\n  return [adgRule];\n};\n/**\n * Convert string of ABP snippet rule to AdGuard scritlet rule\n * @param {string} rule - ABP snippet rule\n * @returns {Array} - array of AdGuard scriptlet rules -\n * one or few items depends on Abp-rule\n */\n\nvar convertAbpSnippetToAdg = function convertAbpSnippetToAdg(rule) {\n  var SEMICOLON_DIVIDER = /;(?=(?:(?:[^\"]*\"){2})*[^\"]*$)/g;\n  var mask = rule.indexOf(validator.ABP_SCRIPTLET_MASK) > -1 ? validator.ABP_SCRIPTLET_MASK : validator.ABP_SCRIPTLET_EXCEPTION_MASK;\n  var template = mask === validator.ABP_SCRIPTLET_MASK ? ADGUARD_SCRIPTLET_TEMPLATE : ADGUARD_SCRIPTLET_EXCEPTION_TEMPLATE;\n  var domains = substringBefore(rule, mask);\n  var args = substringAfter(rule, mask);\n  return args.split(SEMICOLON_DIVIDER).map(function (args) {\n    return getSentences(args).filter(function (arg) {\n      return arg;\n    }).map(function (arg, index) {\n      return index === 0 ? \"abp-\".concat(arg) : arg;\n    }).map(function (arg) {\n      return wrapInSingleQuotes(arg);\n    }).join(\"\".concat(COMMA_SEPARATOR, \" \"));\n  }).map(function (args) {\n    return replacePlaceholders(template, {\n      domains: domains,\n      args: args\n    });\n  });\n};\n/**\n * Converts scriptlet rule to AdGuard one\n * @param {string} rule\n * @returns {Array} - array of AdGuard scriptlet rules -\n * one item for Adg and Ubo or few items for Abp\n */\n\nvar convertScriptletToAdg = function convertScriptletToAdg(rule) {\n  var result;\n\n  if (validator.isUboScriptletRule(rule)) {\n    result = convertUboScriptletToAdg(rule);\n  } else if (validator.isAbpSnippetRule(rule)) {\n    result = convertAbpSnippetToAdg(rule);\n  } else if (validator.isAdgScriptletRule(rule) || validator.isComment(rule)) {\n    result = [rule];\n  }\n\n  return result;\n};\n/**\n * Converts UBO scriptlet rule to AdGuard one\n * @param {string} rule - AdGuard scriptlet rule\n * @returns {string} - UBO scriptlet rule\n */\n\nvar convertAdgScriptletToUbo = function convertAdgScriptletToUbo(rule) {\n  var res;\n\n  if (validator.isAdgScriptletRule(rule)) {\n    var _parseRule = parseRule(rule),\n        parsedName = _parseRule.name,\n        parsedParams = _parseRule.args;\n\n    var preparedParams; // https://github.com/AdguardTeam/FiltersCompiler/issues/102\n\n    if (parsedName === ADG_SET_CONSTANT_NAME && parsedParams[1] === ADG_SET_CONSTANT_EMPTY_STRING) {\n      preparedParams = [parsedParams[0], UBO_SET_CONSTANT_EMPTY_STRING];\n    } else if (parsedName === ADG_PREVENT_FETCH_NAME // https://github.com/AdguardTeam/Scriptlets/issues/109\n    && (parsedParams[0] === ADG_PREVENT_FETCH_WILDCARD || parsedParams[0] === ADG_PREVENT_FETCH_EMPTY_STRING)) {\n      preparedParams = [UBO_NO_FETCH_IF_WILDCARD];\n    } else if ((parsedName === ADG_REMOVE_ATTR_NAME || parsedName === ADG_REMOVE_CLASS_NAME) && parsedParams[1] && parsedParams[1].indexOf(COMMA_SEPARATOR) > -1) {\n      preparedParams = [parsedParams[0], replaceAll(parsedParams[1], COMMA_SEPARATOR, ESCAPED_COMMA_SEPARATOR)];\n    } else {\n      preparedParams = parsedParams;\n    } // object of name and aliases for the Adg-scriptlet\n\n\n    var adgScriptletObject = Object.keys(scriptletList).map(function (el) {\n      return scriptletList[el];\n    }).map(function (s) {\n      var _s$names = toArray(s.names),\n          name = _s$names[0],\n          aliases = _s$names.slice(1);\n\n      return {\n        name: name,\n        aliases: aliases\n      };\n    }).find(function (el) {\n      return el.name === parsedName || el.aliases.indexOf(parsedName) >= 0;\n    });\n    var aliases = adgScriptletObject.aliases;\n\n    if (aliases.length > 0) {\n      var uboAlias = adgScriptletObject.aliases // eslint-disable-next-line no-restricted-properties\n      .find(function (alias) {\n        return alias.includes(UBO_ALIAS_NAME_MARKER);\n      });\n\n      if (uboAlias) {\n        var mask = rule.match(ADGUARD_SCRIPTLET_MASK_REG)[0];\n        var template;\n\n        if (mask.indexOf('@') > -1) {\n          template = UBO_SCRIPTLET_EXCEPTION_TEMPLATE;\n        } else {\n          template = UBO_SCRIPTLET_TEMPLATE;\n        }\n\n        var domains = getBeforeRegExp(rule, ADGUARD_SCRIPTLET_MASK_REG);\n        var uboName = uboAlias.replace(UBO_ALIAS_NAME_MARKER, '') // '.js' in the Ubo scriptlet name can be omitted\n        // https://github.com/gorhill/uBlock/wiki/Resources-Library#general-purpose-scriptlets\n        .replace(UBO_SCRIPTLET_JS_ENDING, '');\n        var args = preparedParams.length > 0 ? \"\".concat(uboName, \", \").concat(preparedParams.join(\"\".concat(COMMA_SEPARATOR, \" \"))) : uboName;\n        var uboRule = replacePlaceholders(template, {\n          domains: domains,\n          args: args\n        });\n        res = uboRule;\n      }\n    }\n  }\n\n  return res;\n};\n/**\n * Checks whether the ADG scriptlet exists or UBO/ABP scriptlet is compatible to ADG\n * @param {string} input - can be ADG or UBO or ABP scriptlet rule\n * @returns {boolean}\n */\n\nvar isValidScriptletRule = function isValidScriptletRule(input) {\n  if (!input) {\n    return false;\n  } // ABP 'input' rule may contain more than one snippet\n\n\n  var rulesArray = convertScriptletToAdg(input); // checking if each of parsed scriptlets is valid\n  // if at least one of them is not valid - whole 'input' rule is not valid too\n\n  var isValid = rulesArray.every(function (rule) {\n    var parsedRule = parseRule(rule);\n    return validator.isValidScriptletName(parsedRule.name);\n  });\n  return isValid;\n};\n/**\n * Converts Ubo redirect rule to Adg one\n * @param {string} rule\n * @returns {string}\n */\n\nvar convertUboRedirectToAdg = function convertUboRedirectToAdg(rule) {\n  var firstPartOfRule = substringBefore(rule, '$');\n  var uboModifiers = validator.parseModifiers(rule);\n  var adgModifiers = uboModifiers.map(function (el) {\n    if (el.indexOf(validator.REDIRECT_RULE_TYPES.UBO.marker) > -1) {\n      var uboName = substringAfter(el, validator.REDIRECT_RULE_TYPES.UBO.marker);\n      var adgName = validator.REDIRECT_RULE_TYPES.UBO.compatibility[uboName];\n      return \"\".concat(validator.REDIRECT_RULE_TYPES.ADG.marker).concat(adgName);\n    }\n\n    if (el === UBO_XHR_TYPE) {\n      return ADG_XHR_TYPE;\n    }\n\n    return el;\n  }).join(COMMA_SEPARATOR);\n  return \"\".concat(firstPartOfRule, \"$\").concat(adgModifiers);\n};\n/**\n * Converts Abp redirect rule to Adg one\n * @param {string} rule\n * @returns {string}\n */\n\nvar convertAbpRedirectToAdg = function convertAbpRedirectToAdg(rule) {\n  var firstPartOfRule = substringBefore(rule, '$');\n  var abpModifiers = validator.parseModifiers(rule);\n  var adgModifiers = abpModifiers.map(function (el) {\n    if (el.indexOf(validator.REDIRECT_RULE_TYPES.ABP.marker) > -1) {\n      var abpName = substringAfter(el, validator.REDIRECT_RULE_TYPES.ABP.marker);\n      var adgName = validator.REDIRECT_RULE_TYPES.ABP.compatibility[abpName];\n      return \"\".concat(validator.REDIRECT_RULE_TYPES.ADG.marker).concat(adgName);\n    }\n\n    return el;\n  }).join(COMMA_SEPARATOR);\n  return \"\".concat(firstPartOfRule, \"$\").concat(adgModifiers);\n};\n/**\n * Converts redirect rule to AdGuard one\n * @param {string} rule\n * @returns {string}\n */\n\nvar convertRedirectToAdg = function convertRedirectToAdg(rule) {\n  var result;\n\n  if (validator.isUboRedirectCompatibleWithAdg(rule)) {\n    result = convertUboRedirectToAdg(rule);\n  } else if (validator.isAbpRedirectCompatibleWithAdg(rule)) {\n    result = convertAbpRedirectToAdg(rule);\n  } else if (validator.isValidAdgRedirectRule(rule)) {\n    result = rule;\n  }\n\n  return result;\n};\n/**\n * Converts Adg redirect rule to Ubo one\n * 1. Checks if there is Ubo analog for Adg rule\n * 2. Parses the rule and chechs if there are any source type modifiers which are required by Ubo\n *    and if there are no one we add it manually to the end.\n *    Source types are chosen according to redirect name\n *    e.g. ||ad.com^$redirect=<name>,important  ->>  ||ad.com^$redirect=<name>,important,script\n * 3. Replaces Adg redirect name by Ubo analog\n * @param {string} rule\n * @returns {string}\n */\n\nvar convertAdgRedirectToUbo = function convertAdgRedirectToUbo(rule) {\n  if (!validator.isAdgRedirectCompatibleWithUbo(rule)) {\n    throw new Error(\"Unable to convert for uBO - unsupported redirect in rule: \".concat(rule));\n  }\n\n  var basePart = substringBefore(rule, '$');\n  var adgModifiers = validator.parseModifiers(rule);\n  var adgRedirectModifier = adgModifiers.find(function (el) {\n    return el.indexOf(validator.REDIRECT_RULE_TYPES.ADG.marker) > -1;\n  });\n  var adgRedirectName = adgRedirectModifier.slice(validator.REDIRECT_RULE_TYPES.ADG.marker.length);\n  var uboRedirectName = validator.REDIRECT_RULE_TYPES.ADG.compatibility[adgRedirectName];\n  var uboRedirectModifier = \"\".concat(validator.REDIRECT_RULE_TYPES.UBO.marker).concat(uboRedirectName);\n\n  if (!validator.hasValidContentType(rule)) {\n    // add missed source types as content type modifiers\n    var sourceTypesData = validator.ABSENT_SOURCE_TYPE_REPLACEMENT.find(function (el) {\n      return el.NAME === adgRedirectName;\n    });\n\n    if (typeof sourceTypesData === 'undefined') {\n      throw new Error(\"Unable to convert for uBO - no types to add for specific redirect in rule: \".concat(rule));\n    }\n\n    var additionModifiers = sourceTypesData.TYPES;\n    adgModifiers.push.apply(adgModifiers, toConsumableArray(additionModifiers));\n  }\n\n  var uboModifiers = adgModifiers.map(function (el) {\n    if (el === adgRedirectModifier) {\n      return uboRedirectModifier;\n    }\n\n    return el;\n  }).join(COMMA_SEPARATOR);\n  return \"\".concat(basePart, \"$\").concat(uboModifiers);\n};\n\n/**\n * @redirect google-analytics\n *\n * @description\n * Mocks Google's Analytics and Tag Manager APIs.\n * [Covers obsolete googletagmanager-gtm redirect functionality](https://github.com/AdguardTeam/Scriptlets/issues/127).\n *\n * Related UBO redirect resource:\n * https://github.com/gorhill/uBlock/blob/8cd2a1d263a96421487b39040c1d23eb01169484/src/web_accessible_resources/google-analytics_analytics.js\n *\n * **Example**\n * ```\n * ||google-analytics.com/analytics.js$script,redirect=google-analytics\n * ||googletagmanager.com/gtm.js$script,redirect=googletagmanager-gtm\n * ```\n */\n\nfunction GoogleAnalytics(source) {\n  // eslint-disable-next-line func-names\n  var Tracker = function Tracker() {}; // constructor\n\n\n  var proto = Tracker.prototype;\n  proto.get = noopFunc;\n  proto.set = noopFunc;\n  proto.send = noopFunc;\n  var googleAnalyticsName = window.GoogleAnalyticsObject || 'ga'; // a -- fake arg for 'ga.length < 1' antiadblock checking\n  // eslint-disable-next-line no-unused-vars\n\n  function ga(a) {\n    var len = arguments.length;\n\n    if (len === 0) {\n      return;\n    } // eslint-disable-next-line prefer-rest-params\n\n\n    var lastArg = arguments[len - 1];\n    var replacer;\n\n    if (lastArg instanceof Object && lastArg !== null && typeof lastArg.hitCallback === 'function') {\n      replacer = lastArg.hitCallback;\n    } else if (typeof lastArg === 'function') {\n      // https://github.com/AdguardTeam/Scriptlets/issues/98\n      replacer = function replacer() {\n        lastArg(ga.create());\n      };\n    }\n\n    try {\n      setTimeout(replacer, 1); // eslint-disable-next-line no-empty\n    } catch (ex) {}\n  }\n\n  ga.create = function () {\n    return new Tracker();\n  };\n\n  ga.getByName = noopNull;\n  ga.getAll = noopArray;\n  ga.remove = noopFunc;\n  ga.loaded = true;\n  window[googleAnalyticsName] = ga;\n  var _window = window,\n      dataLayer = _window.dataLayer,\n      google_optimize = _window.google_optimize; // eslint-disable-line camelcase\n\n  if (dataLayer instanceof Object === false) {\n    return;\n  }\n\n  if (dataLayer.hide instanceof Object && typeof dataLayer.hide.end === 'function') {\n    dataLayer.hide.end();\n  }\n\n  if (typeof dataLayer.push === 'function') {\n    dataLayer.push = function (data) {\n      if (data instanceof Object && typeof data.eventCallback === 'function') {\n        setTimeout(data.eventCallback, 1);\n      }\n    };\n  } // https://github.com/AdguardTeam/Scriptlets/issues/81\n\n\n  if (google_optimize instanceof Object && typeof google_optimize.get === 'function') {\n    // eslint-disable-line camelcase\n    var googleOptimizeWrapper = {};\n    googleOptimizeWrapper.get = noopFunc;\n    window.google_optimize = googleOptimizeWrapper;\n  }\n\n  hit(source);\n}\nGoogleAnalytics.names = ['google-analytics', 'ubo-google-analytics_analytics.js', 'google-analytics_analytics.js', // https://github.com/AdguardTeam/Scriptlets/issues/127\n'googletagmanager-gtm', 'ubo-googletagmanager_gtm.js', 'googletagmanager_gtm.js'];\nGoogleAnalytics.injections = [hit, noopFunc, noopNull, noopArray];\n\n/* eslint-disable no-underscore-dangle */\n/**\n * @redirect google-analytics-ga\n *\n * @description\n * Mocks old Google Analytics API.\n *\n * Related UBO redirect resource:\n * https://github.com/gorhill/uBlock/blob/a94df7f3b27080ae2dcb3b914ace39c0c294d2f6/src/web_accessible_resources/google-analytics_ga.js\n *\n * **Example**\n * ```\n * ||google-analytics.com/ga.js$script,redirect=google-analytics-ga\n * ```\n */\n\nfunction GoogleAnalyticsGa(source) {\n  // Gaq constructor\n  function Gaq() {}\n\n  Gaq.prototype.Na = noopFunc;\n  Gaq.prototype.O = noopFunc;\n  Gaq.prototype.Sa = noopFunc;\n  Gaq.prototype.Ta = noopFunc;\n  Gaq.prototype.Va = noopFunc;\n  Gaq.prototype._createAsyncTracker = noopFunc;\n  Gaq.prototype._getAsyncTracker = noopFunc;\n  Gaq.prototype._getPlugin = noopFunc;\n\n  Gaq.prototype.push = function (data) {\n    if (typeof data === 'function') {\n      data();\n      return;\n    }\n\n    if (Array.isArray(data) === false) {\n      return;\n    } // https://developers.google.com/analytics/devguides/collection/gajs/methods/gaJSApiDomainDirectory#_gat.GA_Tracker_._link\n\n\n    if (data[0] === '_link' && typeof data[1] === 'string') {\n      window.location.assign(data[1]);\n    } // https://github.com/gorhill/uBlock/issues/2162\n\n\n    if (data[0] === '_set' && data[1] === 'hitCallback' && typeof data[2] === 'function') {\n      data[2]();\n    }\n  };\n\n  var gaq = new Gaq();\n  var asyncTrackers = window._gaq || [];\n\n  if (Array.isArray(asyncTrackers)) {\n    while (asyncTrackers[0]) {\n      gaq.push(asyncTrackers.shift());\n    }\n  } // eslint-disable-next-line no-multi-assign\n\n\n  window._gaq = gaq.qf = gaq; // Gat constructor\n\n  function Gat() {} // Mock tracker api\n\n\n  var api = ['_addIgnoredOrganic', '_addIgnoredRef', '_addItem', '_addOrganic', '_addTrans', '_clearIgnoredOrganic', '_clearIgnoredRef', '_clearOrganic', '_cookiePathCopy', '_deleteCustomVar', '_getName', '_setAccount', '_getAccount', '_getClientInfo', '_getDetectFlash', '_getDetectTitle', '_getLinkerUrl', '_getLocalGifPath', '_getServiceMode', '_getVersion', '_getVisitorCustomVar', '_initData', '_link', '_linkByPost', '_setAllowAnchor', '_setAllowHash', '_setAllowLinker', '_setCampContentKey', '_setCampMediumKey', '_setCampNameKey', '_setCampNOKey', '_setCampSourceKey', '_setCampTermKey', '_setCampaignCookieTimeout', '_setCampaignTrack', '_setClientInfo', '_setCookiePath', '_setCookiePersistence', '_setCookieTimeout', '_setCustomVar', '_setDetectFlash', '_setDetectTitle', '_setDomainName', '_setLocalGifPath', '_setLocalRemoteServerMode', '_setLocalServerMode', '_setReferrerOverride', '_setRemoteServerMode', '_setSampleRate', '_setSessionTimeout', '_setSiteSpeedSampleRate', '_setSessionCookieTimeout', '_setVar', '_setVisitorCookieTimeout', '_trackEvent', '_trackPageLoadTime', '_trackPageview', '_trackSocial', '_trackTiming', '_trackTrans', '_visitCode'];\n  var tracker = api.reduce(function (res, funcName) {\n    res[funcName] = noopFunc;\n    return res;\n  }, {});\n\n  tracker._getLinkerUrl = function (a) {\n    return a;\n  };\n\n  Gat.prototype._anonymizeIP = noopFunc;\n  Gat.prototype._createTracker = noopFunc;\n  Gat.prototype._forceSSL = noopFunc;\n  Gat.prototype._getPlugin = noopFunc;\n\n  Gat.prototype._getTracker = function () {\n    return tracker;\n  };\n\n  Gat.prototype._getTrackerByName = function () {\n    return tracker;\n  };\n\n  Gat.prototype._getTrackers = noopFunc;\n  Gat.prototype.aa = noopFunc;\n  Gat.prototype.ab = noopFunc;\n  Gat.prototype.hb = noopFunc;\n  Gat.prototype.la = noopFunc;\n  Gat.prototype.oa = noopFunc;\n  Gat.prototype.pa = noopFunc;\n  Gat.prototype.u = noopFunc;\n  var gat = new Gat();\n  window._gat = gat;\n  hit(source);\n}\nGoogleAnalyticsGa.names = ['google-analytics-ga', 'ubo-google-analytics_ga.js', 'google-analytics_ga.js'];\nGoogleAnalyticsGa.injections = [hit, noopFunc];\n\n/* eslint-disable max-len */\n\n/**\n * @redirect googlesyndication-adsbygoogle\n *\n * @description\n * Mocks Google AdSense API.\n *\n * Related UBO redirect resource:\n * https://github.com/gorhill/uBlock/blob/a94df7f3b27080ae2dcb3b914ace39c0c294d2f6/src/web_accessible_resources/googlesyndication_adsbygoogle.js\n *\n * **Example**\n * ```\n * ||pagead2.googlesyndication.com/pagead/js/adsbygoogle.js$script,redirect=googlesyndication-adsbygoogle\n * ```\n */\n\n/* eslint-enable max-len */\n\nfunction GoogleSyndicationAdsByGoogle(source) {\n  window.adsbygoogle = {\n    // https://github.com/AdguardTeam/Scriptlets/issues/113\n    // length: 0,\n    loaded: true,\n    push: function push() {\n      if (typeof this.length === 'undefined') {\n        this.length = 0;\n        this.length += 1;\n      }\n    }\n  };\n  var adElems = document.querySelectorAll('.adsbygoogle');\n  var css = 'height:1px!important;max-height:1px!important;max-width:1px!important;width:1px!important;';\n  var statusAttrName = 'data-adsbygoogle-status';\n  var ASWIFT_IFRAME_MARKER = 'aswift_';\n  var GOOGLE_ADS_IFRAME_MARKER = 'google_ads_iframe_';\n  var executed = false;\n\n  for (var i = 0; i < adElems.length; i += 1) {\n    var adElemChildNodes = adElems[i].childNodes;\n    var childNodesQuantity = adElemChildNodes.length; // childNodes of .adsbygoogle can be defined if scriptlet was executed before\n    // so we should check are that childNodes exactly defined by us\n    // TODO: remake after scriptlets context developing in 1.3\n\n    var areIframesDefined = false;\n\n    if (childNodesQuantity > 0) {\n      // it should be only 2 child iframes if scriptlet was executed\n      areIframesDefined = childNodesQuantity === 2 // the first of child nodes should be aswift iframe\n      && adElemChildNodes[0].tagName.toLowerCase() === 'iframe' && adElemChildNodes[0].id.indexOf(ASWIFT_IFRAME_MARKER) > -1 // the second of child nodes should be google_ads iframe\n      && adElemChildNodes[1].tagName.toLowerCase() === 'iframe' && adElemChildNodes[1].id.indexOf(GOOGLE_ADS_IFRAME_MARKER) > -1;\n    }\n\n    if (!areIframesDefined) {\n      // here we do the job if scriptlet has not been executed earlier\n      adElems[i].setAttribute(statusAttrName, 'done');\n      var aswiftIframe = document.createElement('iframe');\n      aswiftIframe.id = \"\".concat(ASWIFT_IFRAME_MARKER).concat(i);\n      aswiftIframe.style = css;\n      adElems[i].appendChild(aswiftIframe);\n      var innerAswiftIframe = document.createElement('iframe');\n      aswiftIframe.contentWindow.document.body.appendChild(innerAswiftIframe);\n      var googleadsIframe = document.createElement('iframe');\n      googleadsIframe.id = \"\".concat(GOOGLE_ADS_IFRAME_MARKER).concat(i);\n      googleadsIframe.style = css;\n      adElems[i].appendChild(googleadsIframe);\n      var innerGoogleadsIframe = document.createElement('iframe');\n      googleadsIframe.contentWindow.document.body.appendChild(innerGoogleadsIframe);\n      executed = true;\n    }\n  }\n\n  if (executed) {\n    hit(source);\n  }\n}\nGoogleSyndicationAdsByGoogle.names = ['googlesyndication-adsbygoogle', 'ubo-googlesyndication_adsbygoogle.js', 'googlesyndication_adsbygoogle.js'];\nGoogleSyndicationAdsByGoogle.injections = [hit];\n\n/**\n * @redirect googletagservices-gpt\n *\n * @description\n * Mocks Google Publisher Tag API.\n *\n * Related UBO redirect resource:\n * https://github.com/gorhill/uBlock/blob/a94df7f3b27080ae2dcb3b914ace39c0c294d2f6/src/web_accessible_resources/googletagservices_gpt.js\n *\n * **Example**\n * ```\n * ||googletagservices.com/tag/js/gpt.js$script,redirect=googletagservices-gpt\n * ```\n */\n\nfunction GoogleTagServicesGpt(source) {\n  var companionAdsService = {\n    addEventListener: noopThis,\n    enableSyncLoading: noopFunc,\n    setRefreshUnfilledSlots: noopFunc\n  };\n  var contentService = {\n    addEventListener: noopThis,\n    setContent: noopFunc\n  };\n\n  function PassbackSlot() {} // constructor\n\n\n  PassbackSlot.prototype.display = noopFunc;\n  PassbackSlot.prototype.get = noopNull;\n  PassbackSlot.prototype.set = noopThis;\n  PassbackSlot.prototype.setClickUrl = noopThis;\n  PassbackSlot.prototype.setTagForChildDirectedTreatment = noopThis;\n  PassbackSlot.prototype.setTargeting = noopThis;\n  PassbackSlot.prototype.updateTargetingFromMap = noopThis;\n\n  function SizeMappingBuilder() {} // constructor\n\n\n  SizeMappingBuilder.prototype.addSize = noopThis;\n  SizeMappingBuilder.prototype.build = noopNull;\n\n  function Slot() {} // constructor\n\n\n  Slot.prototype.addService = noopThis;\n  Slot.prototype.clearCategoryExclusions = noopThis;\n  Slot.prototype.clearTargeting = noopThis;\n  Slot.prototype.defineSizeMapping = noopThis;\n  Slot.prototype.get = noopNull;\n  Slot.prototype.getAdUnitPath = noopArray;\n  Slot.prototype.getAttributeKeys = noopArray;\n  Slot.prototype.getCategoryExclusions = noopArray;\n  Slot.prototype.getDomId = noopStr;\n  Slot.prototype.getSlotElementId = noopStr;\n  Slot.prototype.getSlotId = noopThis;\n  Slot.prototype.getTargeting = noopArray;\n  Slot.prototype.getTargetingKeys = noopArray;\n  Slot.prototype.set = noopThis;\n  Slot.prototype.setCategoryExclusion = noopThis;\n  Slot.prototype.setClickUrl = noopThis;\n  Slot.prototype.setCollapseEmptyDiv = noopThis;\n  Slot.prototype.setTargeting = noopThis;\n  var pubAdsService = {\n    addEventListener: noopThis,\n    clear: noopFunc,\n    clearCategoryExclusions: noopThis,\n    clearTagForChildDirectedTreatment: noopThis,\n    clearTargeting: noopThis,\n    collapseEmptyDivs: noopFunc,\n    defineOutOfPagePassback: function defineOutOfPagePassback() {\n      return new PassbackSlot();\n    },\n    definePassback: function definePassback() {\n      return new PassbackSlot();\n    },\n    disableInitialLoad: noopFunc,\n    display: noopFunc,\n    enableAsyncRendering: noopFunc,\n    enableSingleRequest: noopFunc,\n    enableSyncRendering: noopFunc,\n    enableVideoAds: noopFunc,\n    get: noopNull,\n    getAttributeKeys: noopArray,\n    getTargeting: noopFunc,\n    getTargetingKeys: noopArray,\n    getSlots: noopArray,\n    refresh: noopFunc,\n    set: noopThis,\n    setCategoryExclusion: noopThis,\n    setCentering: noopFunc,\n    setCookieOptions: noopThis,\n    setForceSafeFrame: noopThis,\n    setLocation: noopThis,\n    setPublisherProvidedId: noopThis,\n    setRequestNonPersonalizedAds: noopThis,\n    setSafeFrameConfig: noopThis,\n    setTagForChildDirectedTreatment: noopThis,\n    setTargeting: noopThis,\n    setVideoContent: noopThis,\n    updateCorrelator: noopFunc\n  };\n  var _window = window,\n      _window$googletag = _window.googletag,\n      googletag = _window$googletag === void 0 ? {} : _window$googletag;\n  var _googletag$cmd = googletag.cmd,\n      cmd = _googletag$cmd === void 0 ? [] : _googletag$cmd;\n  googletag.apiReady = true;\n  googletag.cmd = [];\n\n  googletag.cmd.push = function (a) {\n    try {\n      a(); // eslint-disable-next-line no-empty\n    } catch (ex) {}\n\n    return 1;\n  };\n\n  googletag.companionAds = function () {\n    return companionAdsService;\n  };\n\n  googletag.content = function () {\n    return contentService;\n  };\n\n  googletag.defineOutOfPageSlot = function () {\n    return new Slot();\n  };\n\n  googletag.defineSlot = function () {\n    return new Slot();\n  };\n\n  googletag.destroySlots = noopFunc;\n  googletag.disablePublisherConsole = noopFunc;\n  googletag.display = noopFunc;\n  googletag.enableServices = noopFunc;\n  googletag.getVersion = noopStr;\n\n  googletag.pubads = function () {\n    return pubAdsService;\n  };\n\n  googletag.pubadsReady = true;\n  googletag.setAdIframeTitle = noopFunc;\n\n  googletag.sizeMapping = function () {\n    return new SizeMappingBuilder();\n  };\n\n  window.googletag = googletag;\n\n  while (cmd.length !== 0) {\n    googletag.cmd.push(cmd.shift());\n  }\n\n  hit(source);\n}\nGoogleTagServicesGpt.names = ['googletagservices-gpt', 'ubo-googletagservices_gpt.js', 'googletagservices_gpt.js'];\nGoogleTagServicesGpt.injections = [hit, noopFunc, noopThis, noopNull, noopArray, noopStr];\n\n/**\n * @redirect scorecardresearch-beacon\n *\n * @description\n * Mocks Scorecard Research API.\n *\n * Related UBO redirect resource:\n * https://github.com/gorhill/uBlock/blob/a94df7f3b27080ae2dcb3b914ace39c0c294d2f6/src/web_accessible_resources/scorecardresearch_beacon.js\n *\n * **Example**\n * ```\n * ||sb.scorecardresearch.com/beacon.js$script,redirect=scorecardresearch-beacon\n * ```\n */\n\nfunction ScoreCardResearchBeacon(source) {\n  window.COMSCORE = {\n    purge: function purge() {\n      // eslint-disable-next-line no-underscore-dangle\n      window._comscore = [];\n    },\n    beacon: function beacon() {}\n  };\n  hit(source);\n}\nScoreCardResearchBeacon.names = ['scorecardresearch-beacon', 'ubo-scorecardresearch_beacon.js', 'scorecardresearch_beacon.js'];\nScoreCardResearchBeacon.injections = [hit];\n\n/**\n * @redirect metrika-yandex-tag\n *\n * @description\n * Mocks Yandex Metrika API.\n * https://yandex.ru/support/metrica/objects/method-reference.html\n *\n * **Example**\n * ```\n * ||mc.yandex.ru/metrika/tag.js$script,redirect=metrika-yandex-tag\n * ```\n */\n\nfunction metrikaYandexTag(source) {\n  var asyncCallbackFromOptions = function asyncCallbackFromOptions(param) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var callback = options.callback;\n    var ctx = options.ctx;\n\n    if (typeof callback === 'function') {\n      callback = ctx !== undefined ? callback.bind(ctx) : callback;\n      setTimeout(function () {\n        return callback();\n      });\n    }\n  };\n\n  var init = noopFunc;\n  /**\n   * https://yandex.ru/support/metrica/objects/addfileextension.html\n   */\n\n  var addFileExtension = noopFunc;\n  /**\n   * https://yandex.ru/support/metrica/objects/extlink.html\n   */\n\n  var extLink = asyncCallbackFromOptions;\n  /**\n   * https://yandex.ru/support/metrica/objects/file.html\n   */\n\n  var file = asyncCallbackFromOptions;\n  /**\n   * https://yandex.ru/support/metrica/objects/get-client-id.html\n   * @param {Function} cb\n   */\n\n  var getClientID = function getClientID(cb) {\n    setTimeout(cb(null));\n  };\n  /**\n   * https://yandex.ru/support/metrica/objects/hit.html\n   */\n\n\n  var hitFunc = asyncCallbackFromOptions;\n  /**\n   * https://yandex.ru/support/metrica/objects/notbounce.html\n   */\n\n  var notBounce = asyncCallbackFromOptions;\n  /**\n   * https://yandex.ru/support/metrica/objects/params-method.html\n   */\n\n  var params = noopFunc;\n  /**\n   * https://yandex.ru/support/metrica/objects/reachgoal.html\n   * @param {string} target\n   * @param {Object} params\n   * @param {Function} callback\n   * @param {any} ctx\n   */\n\n  var reachGoal = function reachGoal(target, params, callback, ctx) {\n    asyncCallbackFromOptions(null, {\n      callback: callback,\n      ctx: ctx\n    });\n  };\n  /**\n   * https://yandex.ru/support/metrica/objects/set-user-id.html\n   */\n\n\n  var setUserID = noopFunc;\n  /**\n   * https://yandex.ru/support/metrica/objects/user-params.html\n   */\n\n  var userParams = noopFunc;\n  var api = {\n    init: init,\n    addFileExtension: addFileExtension,\n    extLink: extLink,\n    file: file,\n    getClientID: getClientID,\n    hit: hitFunc,\n    notBounce: notBounce,\n    params: params,\n    reachGoal: reachGoal,\n    setUserID: setUserID,\n    userParams: userParams\n  };\n\n  function ym(id, funcName) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    return api[funcName] && api[funcName].apply(api, args);\n  }\n\n  window.ym = ym;\n  hit(source);\n}\nmetrikaYandexTag.names = ['metrika-yandex-tag'];\nmetrikaYandexTag.injections = [hit, noopFunc];\n\n/**\n * @redirect metrika-yandex-watch\n *\n * @description\n * Mocks the old Yandex Metrika API.\n * https://yandex.ru/support/metrica/objects/_method-reference.html\n *\n * **Example**\n * ```\n * ||mc.yandex.ru/metrika/watch.js$script,redirect=metrika-yandex-watch\n * ```\n */\n\nfunction metrikaYandexWatch(source) {\n  var cbName = 'yandex_metrika_callbacks';\n  /**\n   * Gets callback and its context from options and call it in async way\n   * @param {Object} options Yandex Metrika API options\n   */\n\n  var asyncCallbackFromOptions = function asyncCallbackFromOptions() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var callback = options.callback;\n    var ctx = options.ctx;\n\n    if (typeof callback === 'function') {\n      callback = ctx !== undefined ? callback.bind(ctx) : callback;\n      setTimeout(function () {\n        return callback();\n      });\n    }\n  };\n\n  function Metrika() {} // constructor\n  // Methods without options\n\n\n  Metrika.prototype.addFileExtension = noopFunc;\n  Metrika.prototype.getClientID = noopFunc;\n  Metrika.prototype.setUserID = noopFunc;\n  Metrika.prototype.userParams = noopFunc; // Methods with options\n  // The order of arguments should be kept in according to API\n\n  Metrika.prototype.extLink = function (url, options) {\n    asyncCallbackFromOptions(options);\n  };\n\n  Metrika.prototype.file = function (url, options) {\n    asyncCallbackFromOptions(options);\n  };\n\n  Metrika.prototype.hit = function (url, options) {\n    asyncCallbackFromOptions(options);\n  };\n\n  Metrika.prototype.reachGoal = function (target, params, cb, ctx) {\n    asyncCallbackFromOptions({\n      callback: cb,\n      ctx: ctx\n    });\n  };\n\n  Metrika.prototype.notBounce = asyncCallbackFromOptions;\n\n  if (window.Ya) {\n    window.Ya.Metrika = Metrika;\n  } else {\n    window.Ya = {\n      Metrika: Metrika\n    };\n  }\n\n  if (window[cbName] && Array.isArray(window[cbName])) {\n    window[cbName].forEach(function (func) {\n      if (typeof func === 'function') {\n        func();\n      }\n    });\n  }\n\n  hit(source);\n}\nmetrikaYandexWatch.names = ['metrika-yandex-watch'];\nmetrikaYandexWatch.injections = [hit, noopFunc];\n\n/**\n * @redirect amazon-apstag\n *\n * @description\n * Mocks Amazon's apstag.js\n *\n * Related UBO redirect resource:\n * https://github.com/gorhill/uBlock/blob/f842ab6d3c1cf0394f95d27092bf59627262da40/src/web_accessible_resources/amazon_apstag.js\n *\n * **Example**\n * ```\n * ||amazon-adsystem.com/aax2/apstag.js$script,redirect=amazon-apstag\n * ```\n */\n\nfunction AmazonApstag(source) {\n  var apstagWrapper = {\n    fetchBids: function fetchBids(a, b) {\n      if (typeof b === 'function') {\n        b([]);\n      }\n    },\n    init: noopFunc,\n    setDisplayBids: noopFunc,\n    targetingKeys: noopFunc\n  };\n  window.apstag = apstagWrapper;\n  hit(source);\n}\nAmazonApstag.names = ['amazon-apstag', 'ubo-amazon_apstag.js', 'amazon_apstag.js'];\nAmazonApstag.injections = [hit, noopFunc];\n\nvar redirectsList = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    noeval: noeval,\n    GoogleAnalytics: GoogleAnalytics,\n    GoogleAnalyticsGa: GoogleAnalyticsGa,\n    GoogleSyndicationAdsByGoogle: GoogleSyndicationAdsByGoogle,\n    GoogleTagServicesGpt: GoogleTagServicesGpt,\n    ScoreCardResearchBeacon: ScoreCardResearchBeacon,\n    metrikaYandexTag: metrikaYandexTag,\n    metrikaYandexWatch: metrikaYandexWatch,\n    preventFab: preventFab,\n    preventBab: preventBab,\n    setPopadsDummy: setPopadsDummy,\n    preventPopadsNet: preventPopadsNet,\n    AmazonApstag: AmazonApstag\n});\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar classCallCheck = _classCallCheck;\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar createClass = _createClass;\n\nfunction isNothing(subject) {\n  return typeof subject === 'undefined' || subject === null;\n}\n\nfunction isObject(subject) {\n  return typeof subject === 'object' && subject !== null;\n}\n\nfunction toArray$1(sequence) {\n  if (Array.isArray(sequence)) return sequence;else if (isNothing(sequence)) return [];\n  return [sequence];\n}\n\nfunction extend(target, source) {\n  var index, length, key, sourceKeys;\n\n  if (source) {\n    sourceKeys = Object.keys(source);\n\n    for (index = 0, length = sourceKeys.length; index < length; index += 1) {\n      key = sourceKeys[index];\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction repeat(string, count) {\n  var result = '',\n      cycle;\n\n  for (cycle = 0; cycle < count; cycle += 1) {\n    result += string;\n  }\n\n  return result;\n}\n\nfunction isNegativeZero(number) {\n  return number === 0 && Number.NEGATIVE_INFINITY === 1 / number;\n}\n\nvar isNothing_1 = isNothing;\nvar isObject_1 = isObject;\nvar toArray_1 = toArray$1;\nvar repeat_1 = repeat;\nvar isNegativeZero_1 = isNegativeZero;\nvar extend_1 = extend;\nvar common = {\n  isNothing: isNothing_1,\n  isObject: isObject_1,\n  toArray: toArray_1,\n  repeat: repeat_1,\n  isNegativeZero: isNegativeZero_1,\n  extend: extend_1\n};\n\n// YAML error class. http://stackoverflow.com/questions/8458984\n\nfunction YAMLException(reason, mark) {\n  // Super constructor\n  Error.call(this);\n  this.name = 'YAMLException';\n  this.reason = reason;\n  this.mark = mark;\n  this.message = (this.reason || '(unknown reason)') + (this.mark ? ' ' + this.mark.toString() : ''); // Include stack trace in error object\n\n  if (Error.captureStackTrace) {\n    // Chrome and NodeJS\n    Error.captureStackTrace(this, this.constructor);\n  } else {\n    // FF, IE 10+ and Safari 6+. Fallback for others\n    this.stack = new Error().stack || '';\n  }\n} // Inherit from Error\n\n\nYAMLException.prototype = Object.create(Error.prototype);\nYAMLException.prototype.constructor = YAMLException;\n\nYAMLException.prototype.toString = function toString(compact) {\n  var result = this.name + ': ';\n  result += this.reason || '(unknown reason)';\n\n  if (!compact && this.mark) {\n    result += ' ' + this.mark.toString();\n  }\n\n  return result;\n};\n\nvar exception = YAMLException;\n\nfunction Mark(name, buffer, position, line, column) {\n  this.name = name;\n  this.buffer = buffer;\n  this.position = position;\n  this.line = line;\n  this.column = column;\n}\n\nMark.prototype.getSnippet = function getSnippet(indent, maxLength) {\n  var head, start, tail, end, snippet;\n  if (!this.buffer) return null;\n  indent = indent || 4;\n  maxLength = maxLength || 75;\n  head = '';\n  start = this.position;\n\n  while (start > 0 && \"\\0\\r\\n\\x85\\u2028\\u2029\".indexOf(this.buffer.charAt(start - 1)) === -1) {\n    start -= 1;\n\n    if (this.position - start > maxLength / 2 - 1) {\n      head = ' ... ';\n      start += 5;\n      break;\n    }\n  }\n\n  tail = '';\n  end = this.position;\n\n  while (end < this.buffer.length && \"\\0\\r\\n\\x85\\u2028\\u2029\".indexOf(this.buffer.charAt(end)) === -1) {\n    end += 1;\n\n    if (end - this.position > maxLength / 2 - 1) {\n      tail = ' ... ';\n      end -= 5;\n      break;\n    }\n  }\n\n  snippet = this.buffer.slice(start, end);\n  return common.repeat(' ', indent) + head + snippet + tail + '\\n' + common.repeat(' ', indent + this.position - start + head.length) + '^';\n};\n\nMark.prototype.toString = function toString(compact) {\n  var snippet,\n      where = '';\n\n  if (this.name) {\n    where += 'in \"' + this.name + '\" ';\n  }\n\n  where += 'at line ' + (this.line + 1) + ', column ' + (this.column + 1);\n\n  if (!compact) {\n    snippet = this.getSnippet();\n\n    if (snippet) {\n      where += ':\\n' + snippet;\n    }\n  }\n\n  return where;\n};\n\nvar mark = Mark;\n\nvar TYPE_CONSTRUCTOR_OPTIONS = ['kind', 'resolve', 'construct', 'instanceOf', 'predicate', 'represent', 'defaultStyle', 'styleAliases'];\nvar YAML_NODE_KINDS = ['scalar', 'sequence', 'mapping'];\n\nfunction compileStyleAliases(map) {\n  var result = {};\n\n  if (map !== null) {\n    Object.keys(map).forEach(function (style) {\n      map[style].forEach(function (alias) {\n        result[String(alias)] = style;\n      });\n    });\n  }\n\n  return result;\n}\n\nfunction Type(tag, options) {\n  options = options || {};\n  Object.keys(options).forEach(function (name) {\n    if (TYPE_CONSTRUCTOR_OPTIONS.indexOf(name) === -1) {\n      throw new exception('Unknown option \"' + name + '\" is met in definition of \"' + tag + '\" YAML type.');\n    }\n  }); // TODO: Add tag format check.\n\n  this.tag = tag;\n  this.kind = options['kind'] || null;\n\n  this.resolve = options['resolve'] || function () {\n    return true;\n  };\n\n  this.construct = options['construct'] || function (data) {\n    return data;\n  };\n\n  this.instanceOf = options['instanceOf'] || null;\n  this.predicate = options['predicate'] || null;\n  this.represent = options['represent'] || null;\n  this.defaultStyle = options['defaultStyle'] || null;\n  this.styleAliases = compileStyleAliases(options['styleAliases'] || null);\n\n  if (YAML_NODE_KINDS.indexOf(this.kind) === -1) {\n    throw new exception('Unknown kind \"' + this.kind + '\" is specified for \"' + tag + '\" YAML type.');\n  }\n}\n\nvar type = Type;\n\n/*eslint-disable max-len*/\n\n\nfunction compileList(schema, name, result) {\n  var exclude = [];\n  schema.include.forEach(function (includedSchema) {\n    result = compileList(includedSchema, name, result);\n  });\n  schema[name].forEach(function (currentType) {\n    result.forEach(function (previousType, previousIndex) {\n      if (previousType.tag === currentType.tag && previousType.kind === currentType.kind) {\n        exclude.push(previousIndex);\n      }\n    });\n    result.push(currentType);\n  });\n  return result.filter(function (type, index) {\n    return exclude.indexOf(index) === -1;\n  });\n}\n\nfunction compileMap()\n/* lists... */\n{\n  var result = {\n    scalar: {},\n    sequence: {},\n    mapping: {},\n    fallback: {}\n  },\n      index,\n      length;\n\n  function collectType(type) {\n    result[type.kind][type.tag] = result['fallback'][type.tag] = type;\n  }\n\n  for (index = 0, length = arguments.length; index < length; index += 1) {\n    arguments[index].forEach(collectType);\n  }\n\n  return result;\n}\n\nfunction Schema(definition) {\n  this.include = definition.include || [];\n  this.implicit = definition.implicit || [];\n  this.explicit = definition.explicit || [];\n  this.implicit.forEach(function (type) {\n    if (type.loadKind && type.loadKind !== 'scalar') {\n      throw new exception('There is a non-scalar type in the implicit list of a schema. Implicit resolving of such types is not supported.');\n    }\n  });\n  this.compiledImplicit = compileList(this, 'implicit', []);\n  this.compiledExplicit = compileList(this, 'explicit', []);\n  this.compiledTypeMap = compileMap(this.compiledImplicit, this.compiledExplicit);\n}\n\nSchema.DEFAULT = null;\n\nSchema.create = function createSchema() {\n  var schemas, types;\n\n  switch (arguments.length) {\n    case 1:\n      schemas = Schema.DEFAULT;\n      types = arguments[0];\n      break;\n\n    case 2:\n      schemas = arguments[0];\n      types = arguments[1];\n      break;\n\n    default:\n      throw new exception('Wrong number of arguments for Schema.create function');\n  }\n\n  schemas = common.toArray(schemas);\n  types = common.toArray(types);\n\n  if (!schemas.every(function (schema) {\n    return schema instanceof Schema;\n  })) {\n    throw new exception('Specified list of super schemas (or a single Schema object) contains a non-Schema object.');\n  }\n\n  if (!types.every(function (type$1) {\n    return type$1 instanceof type;\n  })) {\n    throw new exception('Specified list of YAML types (or a single Type object) contains a non-Type object.');\n  }\n\n  return new Schema({\n    include: schemas,\n    explicit: types\n  });\n};\n\nvar schema = Schema;\n\nvar str = new type('tag:yaml.org,2002:str', {\n  kind: 'scalar',\n  construct: function construct(data) {\n    return data !== null ? data : '';\n  }\n});\n\nvar seq = new type('tag:yaml.org,2002:seq', {\n  kind: 'sequence',\n  construct: function construct(data) {\n    return data !== null ? data : [];\n  }\n});\n\nvar map = new type('tag:yaml.org,2002:map', {\n  kind: 'mapping',\n  construct: function construct(data) {\n    return data !== null ? data : {};\n  }\n});\n\nvar failsafe = new schema({\n  explicit: [str, seq, map]\n});\n\nfunction resolveYamlNull(data) {\n  if (data === null) return true;\n  var max = data.length;\n  return max === 1 && data === '~' || max === 4 && (data === 'null' || data === 'Null' || data === 'NULL');\n}\n\nfunction constructYamlNull() {\n  return null;\n}\n\nfunction isNull(object) {\n  return object === null;\n}\n\nvar _null = new type('tag:yaml.org,2002:null', {\n  kind: 'scalar',\n  resolve: resolveYamlNull,\n  construct: constructYamlNull,\n  predicate: isNull,\n  represent: {\n    canonical: function canonical() {\n      return '~';\n    },\n    lowercase: function lowercase() {\n      return 'null';\n    },\n    uppercase: function uppercase() {\n      return 'NULL';\n    },\n    camelcase: function camelcase() {\n      return 'Null';\n    }\n  },\n  defaultStyle: 'lowercase'\n});\n\nfunction resolveYamlBoolean(data) {\n  if (data === null) return false;\n  var max = data.length;\n  return max === 4 && (data === 'true' || data === 'True' || data === 'TRUE') || max === 5 && (data === 'false' || data === 'False' || data === 'FALSE');\n}\n\nfunction constructYamlBoolean(data) {\n  return data === 'true' || data === 'True' || data === 'TRUE';\n}\n\nfunction isBoolean(object) {\n  return Object.prototype.toString.call(object) === '[object Boolean]';\n}\n\nvar bool = new type('tag:yaml.org,2002:bool', {\n  kind: 'scalar',\n  resolve: resolveYamlBoolean,\n  construct: constructYamlBoolean,\n  predicate: isBoolean,\n  represent: {\n    lowercase: function lowercase(object) {\n      return object ? 'true' : 'false';\n    },\n    uppercase: function uppercase(object) {\n      return object ? 'TRUE' : 'FALSE';\n    },\n    camelcase: function camelcase(object) {\n      return object ? 'True' : 'False';\n    }\n  },\n  defaultStyle: 'lowercase'\n});\n\nfunction isHexCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  || 0x41\n  /* A */\n  <= c && c <= 0x46\n  /* F */\n  || 0x61\n  /* a */\n  <= c && c <= 0x66\n  /* f */\n  ;\n}\n\nfunction isOctCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x37\n  /* 7 */\n  ;\n}\n\nfunction isDecCode(c) {\n  return 0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ;\n}\n\nfunction resolveYamlInteger(data) {\n  if (data === null) return false;\n  var max = data.length,\n      index = 0,\n      hasDigits = false,\n      ch;\n  if (!max) return false;\n  ch = data[index]; // sign\n\n  if (ch === '-' || ch === '+') {\n    ch = data[++index];\n  }\n\n  if (ch === '0') {\n    // 0\n    if (index + 1 === max) return true;\n    ch = data[++index]; // base 2, base 8, base 16\n\n    if (ch === 'b') {\n      // base 2\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (ch !== '0' && ch !== '1') return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    }\n\n    if (ch === 'x') {\n      // base 16\n      index++;\n\n      for (; index < max; index++) {\n        ch = data[index];\n        if (ch === '_') continue;\n        if (!isHexCode(data.charCodeAt(index))) return false;\n        hasDigits = true;\n      }\n\n      return hasDigits && ch !== '_';\n    } // base 8\n\n\n    for (; index < max; index++) {\n      ch = data[index];\n      if (ch === '_') continue;\n      if (!isOctCode(data.charCodeAt(index))) return false;\n      hasDigits = true;\n    }\n\n    return hasDigits && ch !== '_';\n  } // base 10 (except 0) or base 60\n  // value should not start with `_`;\n\n\n  if (ch === '_') return false;\n\n  for (; index < max; index++) {\n    ch = data[index];\n    if (ch === '_') continue;\n    if (ch === ':') break;\n\n    if (!isDecCode(data.charCodeAt(index))) {\n      return false;\n    }\n\n    hasDigits = true;\n  } // Should have digits and should not end with `_`\n\n\n  if (!hasDigits || ch === '_') return false; // if !base60 - done;\n\n  if (ch !== ':') return true; // base60 almost not used, no needs to optimize\n\n  return /^(:[0-5]?[0-9])+$/.test(data.slice(index));\n}\n\nfunction constructYamlInteger(data) {\n  var value = data,\n      sign = 1,\n      ch,\n      base,\n      digits = [];\n\n  if (value.indexOf('_') !== -1) {\n    value = value.replace(/_/g, '');\n  }\n\n  ch = value[0];\n\n  if (ch === '-' || ch === '+') {\n    if (ch === '-') sign = -1;\n    value = value.slice(1);\n    ch = value[0];\n  }\n\n  if (value === '0') return 0;\n\n  if (ch === '0') {\n    if (value[1] === 'b') return sign * parseInt(value.slice(2), 2);\n    if (value[1] === 'x') return sign * parseInt(value, 16);\n    return sign * parseInt(value, 8);\n  }\n\n  if (value.indexOf(':') !== -1) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseInt(v, 10));\n    });\n    value = 0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseInt(value, 10);\n}\n\nfunction isInteger(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && object % 1 === 0 && !common.isNegativeZero(object);\n}\n\nvar int = new type('tag:yaml.org,2002:int', {\n  kind: 'scalar',\n  resolve: resolveYamlInteger,\n  construct: constructYamlInteger,\n  predicate: isInteger,\n  represent: {\n    binary: function binary(obj) {\n      return obj >= 0 ? '0b' + obj.toString(2) : '-0b' + obj.toString(2).slice(1);\n    },\n    octal: function octal(obj) {\n      return obj >= 0 ? '0' + obj.toString(8) : '-0' + obj.toString(8).slice(1);\n    },\n    decimal: function decimal(obj) {\n      return obj.toString(10);\n    },\n\n    /* eslint-disable max-len */\n    hexadecimal: function hexadecimal(obj) {\n      return obj >= 0 ? '0x' + obj.toString(16).toUpperCase() : '-0x' + obj.toString(16).toUpperCase().slice(1);\n    }\n  },\n  defaultStyle: 'decimal',\n  styleAliases: {\n    binary: [2, 'bin'],\n    octal: [8, 'oct'],\n    decimal: [10, 'dec'],\n    hexadecimal: [16, 'hex']\n  }\n});\n\nvar YAML_FLOAT_PATTERN = new RegExp( // 2.5e4, 2.5 and integers\n'^(?:[-+]?(?:0|[1-9][0-9_]*)(?:\\\\.[0-9_]*)?(?:[eE][-+]?[0-9]+)?' + // .2e4, .2\n// special case, seems not from spec\n'|\\\\.[0-9_]+(?:[eE][-+]?[0-9]+)?' + // 20:59\n'|[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\\\\.[0-9_]*' + // .inf\n'|[-+]?\\\\.(?:inf|Inf|INF)' + // .nan\n'|\\\\.(?:nan|NaN|NAN))$');\n\nfunction resolveYamlFloat(data) {\n  if (data === null) return false;\n\n  if (!YAML_FLOAT_PATTERN.test(data) || // Quick hack to not allow integers end with `_`\n  // Probably should update regexp & check speed\n  data[data.length - 1] === '_') {\n    return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlFloat(data) {\n  var value, sign, base, digits;\n  value = data.replace(/_/g, '').toLowerCase();\n  sign = value[0] === '-' ? -1 : 1;\n  digits = [];\n\n  if ('+-'.indexOf(value[0]) >= 0) {\n    value = value.slice(1);\n  }\n\n  if (value === '.inf') {\n    return sign === 1 ? Number.POSITIVE_INFINITY : Number.NEGATIVE_INFINITY;\n  } else if (value === '.nan') {\n    return NaN;\n  } else if (value.indexOf(':') >= 0) {\n    value.split(':').forEach(function (v) {\n      digits.unshift(parseFloat(v, 10));\n    });\n    value = 0.0;\n    base = 1;\n    digits.forEach(function (d) {\n      value += d * base;\n      base *= 60;\n    });\n    return sign * value;\n  }\n\n  return sign * parseFloat(value, 10);\n}\n\nvar SCIENTIFIC_WITHOUT_DOT = /^[-+]?[0-9]+e/;\n\nfunction representYamlFloat(object, style) {\n  var res;\n\n  if (isNaN(object)) {\n    switch (style) {\n      case 'lowercase':\n        return '.nan';\n\n      case 'uppercase':\n        return '.NAN';\n\n      case 'camelcase':\n        return '.NaN';\n    }\n  } else if (Number.POSITIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '.inf';\n\n      case 'uppercase':\n        return '.INF';\n\n      case 'camelcase':\n        return '.Inf';\n    }\n  } else if (Number.NEGATIVE_INFINITY === object) {\n    switch (style) {\n      case 'lowercase':\n        return '-.inf';\n\n      case 'uppercase':\n        return '-.INF';\n\n      case 'camelcase':\n        return '-.Inf';\n    }\n  } else if (common.isNegativeZero(object)) {\n    return '-0.0';\n  }\n\n  res = object.toString(10); // JS stringifier can build scientific format without dots: 5e-100,\n  // while YAML requres dot: 5.e-100. Fix it with simple hack\n\n  return SCIENTIFIC_WITHOUT_DOT.test(res) ? res.replace('e', '.e') : res;\n}\n\nfunction isFloat(object) {\n  return Object.prototype.toString.call(object) === '[object Number]' && (object % 1 !== 0 || common.isNegativeZero(object));\n}\n\nvar float = new type('tag:yaml.org,2002:float', {\n  kind: 'scalar',\n  resolve: resolveYamlFloat,\n  construct: constructYamlFloat,\n  predicate: isFloat,\n  represent: representYamlFloat,\n  defaultStyle: 'lowercase'\n});\n\nvar json = new schema({\n  include: [failsafe],\n  implicit: [_null, bool, int, float]\n});\n\nvar core = new schema({\n  include: [json]\n});\n\nvar YAML_DATE_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9])' + // [2] month\n'-([0-9][0-9])$'); // [3] day\n\nvar YAML_TIMESTAMP_REGEXP = new RegExp('^([0-9][0-9][0-9][0-9])' + // [1] year\n'-([0-9][0-9]?)' + // [2] month\n'-([0-9][0-9]?)' + // [3] day\n'(?:[Tt]|[ \\\\t]+)' + // ...\n'([0-9][0-9]?)' + // [4] hour\n':([0-9][0-9])' + // [5] minute\n':([0-9][0-9])' + // [6] second\n'(?:\\\\.([0-9]*))?' + // [7] fraction\n'(?:[ \\\\t]*(Z|([-+])([0-9][0-9]?)' + // [8] tz [9] tz_sign [10] tz_hour\n'(?::([0-9][0-9]))?))?$'); // [11] tz_minute\n\nfunction resolveYamlTimestamp(data) {\n  if (data === null) return false;\n  if (YAML_DATE_REGEXP.exec(data) !== null) return true;\n  if (YAML_TIMESTAMP_REGEXP.exec(data) !== null) return true;\n  return false;\n}\n\nfunction constructYamlTimestamp(data) {\n  var match,\n      year,\n      month,\n      day,\n      hour,\n      minute,\n      second,\n      fraction = 0,\n      delta = null,\n      tz_hour,\n      tz_minute,\n      date;\n  match = YAML_DATE_REGEXP.exec(data);\n  if (match === null) match = YAML_TIMESTAMP_REGEXP.exec(data);\n  if (match === null) throw new Error('Date resolve error'); // match: [1] year [2] month [3] day\n\n  year = +match[1];\n  month = +match[2] - 1; // JS month starts with 0\n\n  day = +match[3];\n\n  if (!match[4]) {\n    // no hour\n    return new Date(Date.UTC(year, month, day));\n  } // match: [4] hour [5] minute [6] second [7] fraction\n\n\n  hour = +match[4];\n  minute = +match[5];\n  second = +match[6];\n\n  if (match[7]) {\n    fraction = match[7].slice(0, 3);\n\n    while (fraction.length < 3) {\n      // milli-seconds\n      fraction += '0';\n    }\n\n    fraction = +fraction;\n  } // match: [8] tz [9] tz_sign [10] tz_hour [11] tz_minute\n\n\n  if (match[9]) {\n    tz_hour = +match[10];\n    tz_minute = +(match[11] || 0);\n    delta = (tz_hour * 60 + tz_minute) * 60000; // delta in mili-seconds\n\n    if (match[9] === '-') delta = -delta;\n  }\n\n  date = new Date(Date.UTC(year, month, day, hour, minute, second, fraction));\n  if (delta) date.setTime(date.getTime() - delta);\n  return date;\n}\n\nfunction representYamlTimestamp(object\n/*, style*/\n) {\n  return object.toISOString();\n}\n\nvar timestamp = new type('tag:yaml.org,2002:timestamp', {\n  kind: 'scalar',\n  resolve: resolveYamlTimestamp,\n  construct: constructYamlTimestamp,\n  instanceOf: Date,\n  represent: representYamlTimestamp\n});\n\nfunction resolveYamlMerge(data) {\n  return data === '<<' || data === null;\n}\n\nvar merge = new type('tag:yaml.org,2002:merge', {\n  kind: 'scalar',\n  resolve: resolveYamlMerge\n});\n\nfunction commonjsRequire (target) {\n\tthrow new Error('Could not dynamically require \"' + target + '\". Please configure the dynamicRequireTargets option of @rollup/plugin-commonjs appropriately for this require call to behave properly.');\n}\n\n/*eslint-disable no-bitwise*/\n\n\nvar NodeBuffer;\n\ntry {\n  // A trick for browserified version, to not include `Buffer` shim\n  var _require = commonjsRequire;\n  NodeBuffer = _require('buffer').Buffer;\n} catch (__) {} // [ 64, 65, 66 ] -> [ padding, CR, LF ]\n\n\nvar BASE64_MAP = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\\n\\r';\n\nfunction resolveYamlBinary(data) {\n  if (data === null) return false;\n  var code,\n      idx,\n      bitlen = 0,\n      max = data.length,\n      map = BASE64_MAP; // Convert one by one.\n\n  for (idx = 0; idx < max; idx++) {\n    code = map.indexOf(data.charAt(idx)); // Skip CR/LF\n\n    if (code > 64) continue; // Fail on illegal characters\n\n    if (code < 0) return false;\n    bitlen += 6;\n  } // If there are any bits left, source was corrupted\n\n\n  return bitlen % 8 === 0;\n}\n\nfunction constructYamlBinary(data) {\n  var idx,\n      tailbits,\n      input = data.replace(/[\\r\\n=]/g, ''),\n      // remove CR/LF & padding to simplify scan\n  max = input.length,\n      map = BASE64_MAP,\n      bits = 0,\n      result = []; // Collect by 6*4 bits (3 bytes)\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 4 === 0 && idx) {\n      result.push(bits >> 16 & 0xFF);\n      result.push(bits >> 8 & 0xFF);\n      result.push(bits & 0xFF);\n    }\n\n    bits = bits << 6 | map.indexOf(input.charAt(idx));\n  } // Dump tail\n\n\n  tailbits = max % 4 * 6;\n\n  if (tailbits === 0) {\n    result.push(bits >> 16 & 0xFF);\n    result.push(bits >> 8 & 0xFF);\n    result.push(bits & 0xFF);\n  } else if (tailbits === 18) {\n    result.push(bits >> 10 & 0xFF);\n    result.push(bits >> 2 & 0xFF);\n  } else if (tailbits === 12) {\n    result.push(bits >> 4 & 0xFF);\n  } // Wrap into Buffer for NodeJS and leave Array for browser\n\n\n  if (NodeBuffer) {\n    // Support node 6.+ Buffer API when available\n    return NodeBuffer.from ? NodeBuffer.from(result) : new NodeBuffer(result);\n  }\n\n  return result;\n}\n\nfunction representYamlBinary(object\n/*, style*/\n) {\n  var result = '',\n      bits = 0,\n      idx,\n      tail,\n      max = object.length,\n      map = BASE64_MAP; // Convert every three bytes to 4 ASCII characters.\n\n  for (idx = 0; idx < max; idx++) {\n    if (idx % 3 === 0 && idx) {\n      result += map[bits >> 18 & 0x3F];\n      result += map[bits >> 12 & 0x3F];\n      result += map[bits >> 6 & 0x3F];\n      result += map[bits & 0x3F];\n    }\n\n    bits = (bits << 8) + object[idx];\n  } // Dump tail\n\n\n  tail = max % 3;\n\n  if (tail === 0) {\n    result += map[bits >> 18 & 0x3F];\n    result += map[bits >> 12 & 0x3F];\n    result += map[bits >> 6 & 0x3F];\n    result += map[bits & 0x3F];\n  } else if (tail === 2) {\n    result += map[bits >> 10 & 0x3F];\n    result += map[bits >> 4 & 0x3F];\n    result += map[bits << 2 & 0x3F];\n    result += map[64];\n  } else if (tail === 1) {\n    result += map[bits >> 2 & 0x3F];\n    result += map[bits << 4 & 0x3F];\n    result += map[64];\n    result += map[64];\n  }\n\n  return result;\n}\n\nfunction isBinary(object) {\n  return NodeBuffer && NodeBuffer.isBuffer(object);\n}\n\nvar binary = new type('tag:yaml.org,2002:binary', {\n  kind: 'scalar',\n  resolve: resolveYamlBinary,\n  construct: constructYamlBinary,\n  predicate: isBinary,\n  represent: representYamlBinary\n});\n\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nvar _toString = Object.prototype.toString;\n\nfunction resolveYamlOmap(data) {\n  if (data === null) return true;\n  var objectKeys = [],\n      index,\n      length,\n      pair,\n      pairKey,\n      pairHasKey,\n      object = data;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    pairHasKey = false;\n    if (_toString.call(pair) !== '[object Object]') return false;\n\n    for (pairKey in pair) {\n      if (_hasOwnProperty.call(pair, pairKey)) {\n        if (!pairHasKey) pairHasKey = true;else return false;\n      }\n    }\n\n    if (!pairHasKey) return false;\n    if (objectKeys.indexOf(pairKey) === -1) objectKeys.push(pairKey);else return false;\n  }\n\n  return true;\n}\n\nfunction constructYamlOmap(data) {\n  return data !== null ? data : [];\n}\n\nvar omap = new type('tag:yaml.org,2002:omap', {\n  kind: 'sequence',\n  resolve: resolveYamlOmap,\n  construct: constructYamlOmap\n});\n\nvar _toString$1 = Object.prototype.toString;\n\nfunction resolveYamlPairs(data) {\n  if (data === null) return true;\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    if (_toString$1.call(pair) !== '[object Object]') return false;\n    keys = Object.keys(pair);\n    if (keys.length !== 1) return false;\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return true;\n}\n\nfunction constructYamlPairs(data) {\n  if (data === null) return [];\n  var index,\n      length,\n      pair,\n      keys,\n      result,\n      object = data;\n  result = new Array(object.length);\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    pair = object[index];\n    keys = Object.keys(pair);\n    result[index] = [keys[0], pair[keys[0]]];\n  }\n\n  return result;\n}\n\nvar pairs = new type('tag:yaml.org,2002:pairs', {\n  kind: 'sequence',\n  resolve: resolveYamlPairs,\n  construct: constructYamlPairs\n});\n\nvar _hasOwnProperty$1 = Object.prototype.hasOwnProperty;\n\nfunction resolveYamlSet(data) {\n  if (data === null) return true;\n  var key,\n      object = data;\n\n  for (key in object) {\n    if (_hasOwnProperty$1.call(object, key)) {\n      if (object[key] !== null) return false;\n    }\n  }\n\n  return true;\n}\n\nfunction constructYamlSet(data) {\n  return data !== null ? data : {};\n}\n\nvar set = new type('tag:yaml.org,2002:set', {\n  kind: 'mapping',\n  resolve: resolveYamlSet,\n  construct: constructYamlSet\n});\n\nvar default_safe = new schema({\n  include: [core],\n  implicit: [timestamp, merge],\n  explicit: [binary, omap, pairs, set]\n});\n\nfunction resolveJavascriptUndefined() {\n  return true;\n}\n\nfunction constructJavascriptUndefined() {\n  /*eslint-disable no-undefined*/\n  return undefined;\n}\n\nfunction representJavascriptUndefined() {\n  return '';\n}\n\nfunction isUndefined(object) {\n  return typeof object === 'undefined';\n}\n\nvar _undefined = new type('tag:yaml.org,2002:js/undefined', {\n  kind: 'scalar',\n  resolve: resolveJavascriptUndefined,\n  construct: constructJavascriptUndefined,\n  predicate: isUndefined,\n  represent: representJavascriptUndefined\n});\n\nfunction resolveJavascriptRegExp(data) {\n  if (data === null) return false;\n  if (data.length === 0) return false;\n  var regexp = data,\n      tail = /\\/([gim]*)$/.exec(data),\n      modifiers = ''; // if regexp starts with '/' it can have modifiers and must be properly closed\n  // `/foo/gim` - modifiers tail can be maximum 3 chars\n\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    if (modifiers.length > 3) return false; // if expression starts with /, is should be properly terminated\n\n    if (regexp[regexp.length - modifiers.length - 1] !== '/') return false;\n  }\n\n  return true;\n}\n\nfunction constructJavascriptRegExp(data) {\n  var regexp = data,\n      tail = /\\/([gim]*)$/.exec(data),\n      modifiers = ''; // `/foo/gim` - tail can be maximum 4 chars\n\n  if (regexp[0] === '/') {\n    if (tail) modifiers = tail[1];\n    regexp = regexp.slice(1, regexp.length - modifiers.length - 1);\n  }\n\n  return new RegExp(regexp, modifiers);\n}\n\nfunction representJavascriptRegExp(object\n/*, style*/\n) {\n  var result = '/' + object.source + '/';\n  if (object.global) result += 'g';\n  if (object.multiline) result += 'm';\n  if (object.ignoreCase) result += 'i';\n  return result;\n}\n\nfunction isRegExp(object) {\n  return Object.prototype.toString.call(object) === '[object RegExp]';\n}\n\nvar regexp = new type('tag:yaml.org,2002:js/regexp', {\n  kind: 'scalar',\n  resolve: resolveJavascriptRegExp,\n  construct: constructJavascriptRegExp,\n  predicate: isRegExp,\n  represent: representJavascriptRegExp\n});\n\nvar esprima; // Browserified version does not have esprima\n//\n// 1. For node.js just require module as deps\n// 2. For browser try to require mudule via external AMD system.\n//    If not found - try to fallback to window.esprima. If not\n//    found too - then fail to parse.\n//\n\ntry {\n  // workaround to exclude package from browserify list.\n  var _require$1 = commonjsRequire;\n  esprima = _require$1('esprima');\n} catch (_) {\n  /* eslint-disable no-redeclare */\n\n  /* global window */\n  if (typeof window !== 'undefined') esprima = window.esprima;\n}\n\nfunction resolveJavascriptFunction(data) {\n  if (data === null) return false;\n\n  try {\n    var source = '(' + data + ')',\n        ast = esprima.parse(source, {\n      range: true\n    });\n\n    if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    return false;\n  }\n}\n\nfunction constructJavascriptFunction(data) {\n  /*jslint evil:true*/\n  var source = '(' + data + ')',\n      ast = esprima.parse(source, {\n    range: true\n  }),\n      params = [],\n      body;\n\n  if (ast.type !== 'Program' || ast.body.length !== 1 || ast.body[0].type !== 'ExpressionStatement' || ast.body[0].expression.type !== 'ArrowFunctionExpression' && ast.body[0].expression.type !== 'FunctionExpression') {\n    throw new Error('Failed to resolve function');\n  }\n\n  ast.body[0].expression.params.forEach(function (param) {\n    params.push(param.name);\n  });\n  body = ast.body[0].expression.body.range; // Esprima's ranges include the first '{' and the last '}' characters on\n  // function expressions. So cut them out.\n\n  if (ast.body[0].expression.body.type === 'BlockStatement') {\n    /*eslint-disable no-new-func*/\n    return new Function(params, source.slice(body[0] + 1, body[1] - 1));\n  } // ES6 arrow functions can omit the BlockStatement. In that case, just return\n  // the body.\n\n  /*eslint-disable no-new-func*/\n\n\n  return new Function(params, 'return ' + source.slice(body[0], body[1]));\n}\n\nfunction representJavascriptFunction(object\n/*, style*/\n) {\n  return object.toString();\n}\n\nfunction isFunction(object) {\n  return Object.prototype.toString.call(object) === '[object Function]';\n}\n\nvar _function = new type('tag:yaml.org,2002:js/function', {\n  kind: 'scalar',\n  resolve: resolveJavascriptFunction,\n  construct: constructJavascriptFunction,\n  predicate: isFunction,\n  represent: representJavascriptFunction\n});\n\nvar default_full = schema.DEFAULT = new schema({\n  include: [default_safe],\n  explicit: [_undefined, regexp, _function]\n});\n\n/*eslint-disable max-len,no-use-before-define*/\n\n\nvar _hasOwnProperty$2 = Object.prototype.hasOwnProperty;\nvar CONTEXT_FLOW_IN = 1;\nvar CONTEXT_FLOW_OUT = 2;\nvar CONTEXT_BLOCK_IN = 3;\nvar CONTEXT_BLOCK_OUT = 4;\nvar CHOMPING_CLIP = 1;\nvar CHOMPING_STRIP = 2;\nvar CHOMPING_KEEP = 3;\nvar PATTERN_NON_PRINTABLE = /[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x84\\x86-\\x9F\\uFFFE\\uFFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF]/;\nvar PATTERN_NON_ASCII_LINE_BREAKS = /[\\x85\\u2028\\u2029]/;\nvar PATTERN_FLOW_INDICATORS = /[,\\[\\]\\{\\}]/;\nvar PATTERN_TAG_HANDLE = /^(?:!|!!|![a-z\\-]+!)$/i;\nvar PATTERN_TAG_URI = /^(?:!|[^,\\[\\]\\{\\}])(?:%[0-9a-f]{2}|[0-9a-z\\-#;\\/\\?:@&=\\+\\$,_\\.!~\\*'\\(\\)\\[\\]])*$/i;\n\nfunction _class(obj) {\n  return Object.prototype.toString.call(obj);\n}\n\nfunction is_EOL(c) {\n  return c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_WHITE_SPACE(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  ;\n}\n\nfunction is_WS_OR_EOL(c) {\n  return c === 0x09\n  /* Tab */\n  || c === 0x20\n  /* Space */\n  || c === 0x0A\n  /* LF */\n  || c === 0x0D\n  /* CR */\n  ;\n}\n\nfunction is_FLOW_INDICATOR(c) {\n  return c === 0x2C\n  /* , */\n  || c === 0x5B\n  /* [ */\n  || c === 0x5D\n  /* ] */\n  || c === 0x7B\n  /* { */\n  || c === 0x7D\n  /* } */\n  ;\n}\n\nfunction fromHexCode(c) {\n  var lc;\n\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n  /*eslint-disable no-bitwise*/\n\n\n  lc = c | 0x20;\n\n  if (0x61\n  /* a */\n  <= lc && lc <= 0x66\n  /* f */\n  ) {\n    return lc - 0x61 + 10;\n  }\n\n  return -1;\n}\n\nfunction escapedHexLen(c) {\n  if (c === 0x78\n  /* x */\n  ) {\n      return 2;\n    }\n\n  if (c === 0x75\n  /* u */\n  ) {\n      return 4;\n    }\n\n  if (c === 0x55\n  /* U */\n  ) {\n      return 8;\n    }\n\n  return 0;\n}\n\nfunction fromDecimalCode(c) {\n  if (0x30\n  /* 0 */\n  <= c && c <= 0x39\n  /* 9 */\n  ) {\n    return c - 0x30;\n  }\n\n  return -1;\n}\n\nfunction simpleEscapeSequence(c) {\n  /* eslint-disable indent */\n  return c === 0x30\n  /* 0 */\n  ? '\\x00' : c === 0x61\n  /* a */\n  ? '\\x07' : c === 0x62\n  /* b */\n  ? '\\x08' : c === 0x74\n  /* t */\n  ? '\\x09' : c === 0x09\n  /* Tab */\n  ? '\\x09' : c === 0x6E\n  /* n */\n  ? '\\x0A' : c === 0x76\n  /* v */\n  ? '\\x0B' : c === 0x66\n  /* f */\n  ? '\\x0C' : c === 0x72\n  /* r */\n  ? '\\x0D' : c === 0x65\n  /* e */\n  ? '\\x1B' : c === 0x20\n  /* Space */\n  ? ' ' : c === 0x22\n  /* \" */\n  ? '\\x22' : c === 0x2F\n  /* / */\n  ? '/' : c === 0x5C\n  /* \\ */\n  ? '\\x5C' : c === 0x4E\n  /* N */\n  ? '\\x85' : c === 0x5F\n  /* _ */\n  ? '\\xA0' : c === 0x4C\n  /* L */\n  ? \"\\u2028\" : c === 0x50\n  /* P */\n  ? \"\\u2029\" : '';\n}\n\nfunction charFromCodepoint(c) {\n  if (c <= 0xFFFF) {\n    return String.fromCharCode(c);\n  } // Encode UTF-16 surrogate pair\n  // https://en.wikipedia.org/wiki/UTF-16#Code_points_U.2B010000_to_U.2B10FFFF\n\n\n  return String.fromCharCode((c - 0x010000 >> 10) + 0xD800, (c - 0x010000 & 0x03FF) + 0xDC00);\n}\n\nvar simpleEscapeCheck = new Array(256); // integer, for fast access\n\nvar simpleEscapeMap = new Array(256);\n\nfor (var i = 0; i < 256; i++) {\n  simpleEscapeCheck[i] = simpleEscapeSequence(i) ? 1 : 0;\n  simpleEscapeMap[i] = simpleEscapeSequence(i);\n}\n\nfunction State(input, options) {\n  this.input = input;\n  this.filename = options['filename'] || null;\n  this.schema = options['schema'] || default_full;\n  this.onWarning = options['onWarning'] || null;\n  this.legacy = options['legacy'] || false;\n  this.json = options['json'] || false;\n  this.listener = options['listener'] || null;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.typeMap = this.schema.compiledTypeMap;\n  this.length = input.length;\n  this.position = 0;\n  this.line = 0;\n  this.lineStart = 0;\n  this.lineIndent = 0;\n  this.documents = [];\n  /*\n  this.version;\n  this.checkLineBreaks;\n  this.tagMap;\n  this.anchorMap;\n  this.tag;\n  this.anchor;\n  this.kind;\n  this.result;*/\n}\n\nfunction generateError(state, message) {\n  return new exception(message, new mark(state.filename, state.input, state.position, state.line, state.position - state.lineStart));\n}\n\nfunction throwError(state, message) {\n  throw generateError(state, message);\n}\n\nfunction throwWarning(state, message) {\n  if (state.onWarning) {\n    state.onWarning.call(null, generateError(state, message));\n  }\n}\n\nvar directiveHandlers = {\n  YAML: function handleYamlDirective(state, name, args) {\n    var match, major, minor;\n\n    if (state.version !== null) {\n      throwError(state, 'duplication of %YAML directive');\n    }\n\n    if (args.length !== 1) {\n      throwError(state, 'YAML directive accepts exactly one argument');\n    }\n\n    match = /^([0-9]+)\\.([0-9]+)$/.exec(args[0]);\n\n    if (match === null) {\n      throwError(state, 'ill-formed argument of the YAML directive');\n    }\n\n    major = parseInt(match[1], 10);\n    minor = parseInt(match[2], 10);\n\n    if (major !== 1) {\n      throwError(state, 'unacceptable YAML version of the document');\n    }\n\n    state.version = args[0];\n    state.checkLineBreaks = minor < 2;\n\n    if (minor !== 1 && minor !== 2) {\n      throwWarning(state, 'unsupported YAML version of the document');\n    }\n  },\n  TAG: function handleTagDirective(state, name, args) {\n    var handle, prefix;\n\n    if (args.length !== 2) {\n      throwError(state, 'TAG directive accepts exactly two arguments');\n    }\n\n    handle = args[0];\n    prefix = args[1];\n\n    if (!PATTERN_TAG_HANDLE.test(handle)) {\n      throwError(state, 'ill-formed tag handle (first argument) of the TAG directive');\n    }\n\n    if (_hasOwnProperty$2.call(state.tagMap, handle)) {\n      throwError(state, 'there is a previously declared suffix for \"' + handle + '\" tag handle');\n    }\n\n    if (!PATTERN_TAG_URI.test(prefix)) {\n      throwError(state, 'ill-formed tag prefix (second argument) of the TAG directive');\n    }\n\n    state.tagMap[handle] = prefix;\n  }\n};\n\nfunction captureSegment(state, start, end, checkJson) {\n  var _position, _length, _character, _result;\n\n  if (start < end) {\n    _result = state.input.slice(start, end);\n\n    if (checkJson) {\n      for (_position = 0, _length = _result.length; _position < _length; _position += 1) {\n        _character = _result.charCodeAt(_position);\n\n        if (!(_character === 0x09 || 0x20 <= _character && _character <= 0x10FFFF)) {\n          throwError(state, 'expected valid JSON character');\n        }\n      }\n    } else if (PATTERN_NON_PRINTABLE.test(_result)) {\n      throwError(state, 'the stream contains non-printable characters');\n    }\n\n    state.result += _result;\n  }\n}\n\nfunction mergeMappings(state, destination, source, overridableKeys) {\n  var sourceKeys, key, index, quantity;\n\n  if (!common.isObject(source)) {\n    throwError(state, 'cannot merge mappings; the provided source object is unacceptable');\n  }\n\n  sourceKeys = Object.keys(source);\n\n  for (index = 0, quantity = sourceKeys.length; index < quantity; index += 1) {\n    key = sourceKeys[index];\n\n    if (!_hasOwnProperty$2.call(destination, key)) {\n      destination[key] = source[key];\n      overridableKeys[key] = true;\n    }\n  }\n}\n\nfunction storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, startLine, startPos) {\n  var index, quantity; // The output is a plain object here, so keys can only be strings.\n  // We need to convert keyNode to a string, but doing so can hang the process\n  // (deeply nested arrays that explode exponentially using aliases).\n\n  if (Array.isArray(keyNode)) {\n    keyNode = Array.prototype.slice.call(keyNode);\n\n    for (index = 0, quantity = keyNode.length; index < quantity; index += 1) {\n      if (Array.isArray(keyNode[index])) {\n        throwError(state, 'nested arrays are not supported inside keys');\n      }\n\n      if (typeof keyNode === 'object' && _class(keyNode[index]) === '[object Object]') {\n        keyNode[index] = '[object Object]';\n      }\n    }\n  } // Avoid code execution in load() via toString property\n  // (still use its own toString for arrays, timestamps,\n  // and whatever user schema extensions happen to have @@toStringTag)\n\n\n  if (typeof keyNode === 'object' && _class(keyNode) === '[object Object]') {\n    keyNode = '[object Object]';\n  }\n\n  keyNode = String(keyNode);\n\n  if (_result === null) {\n    _result = {};\n  }\n\n  if (keyTag === 'tag:yaml.org,2002:merge') {\n    if (Array.isArray(valueNode)) {\n      for (index = 0, quantity = valueNode.length; index < quantity; index += 1) {\n        mergeMappings(state, _result, valueNode[index], overridableKeys);\n      }\n    } else {\n      mergeMappings(state, _result, valueNode, overridableKeys);\n    }\n  } else {\n    if (!state.json && !_hasOwnProperty$2.call(overridableKeys, keyNode) && _hasOwnProperty$2.call(_result, keyNode)) {\n      state.line = startLine || state.line;\n      state.position = startPos || state.position;\n      throwError(state, 'duplicated mapping key');\n    }\n\n    _result[keyNode] = valueNode;\n    delete overridableKeys[keyNode];\n  }\n\n  return _result;\n}\n\nfunction readLineBreak(state) {\n  var ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x0A\n  /* LF */\n  ) {\n      state.position++;\n    } else if (ch === 0x0D\n  /* CR */\n  ) {\n      state.position++;\n\n      if (state.input.charCodeAt(state.position) === 0x0A\n      /* LF */\n      ) {\n          state.position++;\n        }\n    } else {\n    throwError(state, 'a line break is expected');\n  }\n\n  state.line += 1;\n  state.lineStart = state.position;\n}\n\nfunction skipSeparationSpace(state, allowComments, checkIndent) {\n  var lineBreaks = 0,\n      ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    while (is_WHITE_SPACE(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (allowComments && ch === 0x23\n    /* # */\n    ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (ch !== 0x0A\n        /* LF */\n        && ch !== 0x0D\n        /* CR */\n        && ch !== 0);\n      }\n\n    if (is_EOL(ch)) {\n      readLineBreak(state);\n      ch = state.input.charCodeAt(state.position);\n      lineBreaks++;\n      state.lineIndent = 0;\n\n      while (ch === 0x20\n      /* Space */\n      ) {\n        state.lineIndent++;\n        ch = state.input.charCodeAt(++state.position);\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (checkIndent !== -1 && lineBreaks !== 0 && state.lineIndent < checkIndent) {\n    throwWarning(state, 'deficient indentation');\n  }\n\n  return lineBreaks;\n}\n\nfunction testDocumentSeparator(state) {\n  var _position = state.position,\n      ch;\n  ch = state.input.charCodeAt(_position); // Condition state.position === state.lineStart is tested\n  // in parent on each call, for efficiency. No needs to test here again.\n\n  if ((ch === 0x2D\n  /* - */\n  || ch === 0x2E\n  /* . */\n  ) && ch === state.input.charCodeAt(_position + 1) && ch === state.input.charCodeAt(_position + 2)) {\n    _position += 3;\n    ch = state.input.charCodeAt(_position);\n\n    if (ch === 0 || is_WS_OR_EOL(ch)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFoldedLines(state, count) {\n  if (count === 1) {\n    state.result += ' ';\n  } else if (count > 1) {\n    state.result += common.repeat('\\n', count - 1);\n  }\n}\n\nfunction readPlainScalar(state, nodeIndent, withinFlowCollection) {\n  var preceding,\n      following,\n      captureStart,\n      captureEnd,\n      hasPendingContent,\n      _line,\n      _lineStart,\n      _lineIndent,\n      _kind = state.kind,\n      _result = state.result,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (is_WS_OR_EOL(ch) || is_FLOW_INDICATOR(ch) || ch === 0x23\n  /* # */\n  || ch === 0x26\n  /* & */\n  || ch === 0x2A\n  /* * */\n  || ch === 0x21\n  /* ! */\n  || ch === 0x7C\n  /* | */\n  || ch === 0x3E\n  /* > */\n  || ch === 0x27\n  /* ' */\n  || ch === 0x22\n  /* \" */\n  || ch === 0x25\n  /* % */\n  || ch === 0x40\n  /* @ */\n  || ch === 0x60\n  /* ` */\n  ) {\n      return false;\n    }\n\n  if (ch === 0x3F\n  /* ? */\n  || ch === 0x2D\n  /* - */\n  ) {\n      following = state.input.charCodeAt(state.position + 1);\n\n      if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n        return false;\n      }\n    }\n\n  state.kind = 'scalar';\n  state.result = '';\n  captureStart = captureEnd = state.position;\n  hasPendingContent = false;\n\n  while (ch !== 0) {\n    if (ch === 0x3A\n    /* : */\n    ) {\n        following = state.input.charCodeAt(state.position + 1);\n\n        if (is_WS_OR_EOL(following) || withinFlowCollection && is_FLOW_INDICATOR(following)) {\n          break;\n        }\n      } else if (ch === 0x23\n    /* # */\n    ) {\n        preceding = state.input.charCodeAt(state.position - 1);\n\n        if (is_WS_OR_EOL(preceding)) {\n          break;\n        }\n      } else if (state.position === state.lineStart && testDocumentSeparator(state) || withinFlowCollection && is_FLOW_INDICATOR(ch)) {\n      break;\n    } else if (is_EOL(ch)) {\n      _line = state.line;\n      _lineStart = state.lineStart;\n      _lineIndent = state.lineIndent;\n      skipSeparationSpace(state, false, -1);\n\n      if (state.lineIndent >= nodeIndent) {\n        hasPendingContent = true;\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      } else {\n        state.position = captureEnd;\n        state.line = _line;\n        state.lineStart = _lineStart;\n        state.lineIndent = _lineIndent;\n        break;\n      }\n    }\n\n    if (hasPendingContent) {\n      captureSegment(state, captureStart, captureEnd, false);\n      writeFoldedLines(state, state.line - _line);\n      captureStart = captureEnd = state.position;\n      hasPendingContent = false;\n    }\n\n    if (!is_WHITE_SPACE(ch)) {\n      captureEnd = state.position + 1;\n    }\n\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  captureSegment(state, captureStart, captureEnd, false);\n\n  if (state.result) {\n    return true;\n  }\n\n  state.kind = _kind;\n  state.result = _result;\n  return false;\n}\n\nfunction readSingleQuotedScalar(state, nodeIndent) {\n  var ch, captureStart, captureEnd;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x27\n  /* ' */\n  ) {\n      return false;\n    }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x27\n    /* ' */\n    ) {\n        captureSegment(state, captureStart, state.position, true);\n        ch = state.input.charCodeAt(++state.position);\n\n        if (ch === 0x27\n        /* ' */\n        ) {\n            captureStart = state.position;\n            state.position++;\n            captureEnd = state.position;\n          } else {\n          return true;\n        }\n      } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a single quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a single quoted scalar');\n}\n\nfunction readDoubleQuotedScalar(state, nodeIndent) {\n  var captureStart, captureEnd, hexLength, hexResult, tmp, ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch !== 0x22\n  /* \" */\n  ) {\n      return false;\n    }\n\n  state.kind = 'scalar';\n  state.result = '';\n  state.position++;\n  captureStart = captureEnd = state.position;\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    if (ch === 0x22\n    /* \" */\n    ) {\n        captureSegment(state, captureStart, state.position, true);\n        state.position++;\n        return true;\n      } else if (ch === 0x5C\n    /* \\ */\n    ) {\n        captureSegment(state, captureStart, state.position, true);\n        ch = state.input.charCodeAt(++state.position);\n\n        if (is_EOL(ch)) {\n          skipSeparationSpace(state, false, nodeIndent); // TODO: rework to inline fn with no type cast?\n        } else if (ch < 256 && simpleEscapeCheck[ch]) {\n          state.result += simpleEscapeMap[ch];\n          state.position++;\n        } else if ((tmp = escapedHexLen(ch)) > 0) {\n          hexLength = tmp;\n          hexResult = 0;\n\n          for (; hexLength > 0; hexLength--) {\n            ch = state.input.charCodeAt(++state.position);\n\n            if ((tmp = fromHexCode(ch)) >= 0) {\n              hexResult = (hexResult << 4) + tmp;\n            } else {\n              throwError(state, 'expected hexadecimal character');\n            }\n          }\n\n          state.result += charFromCodepoint(hexResult);\n          state.position++;\n        } else {\n          throwError(state, 'unknown escape sequence');\n        }\n\n        captureStart = captureEnd = state.position;\n      } else if (is_EOL(ch)) {\n      captureSegment(state, captureStart, captureEnd, true);\n      writeFoldedLines(state, skipSeparationSpace(state, false, nodeIndent));\n      captureStart = captureEnd = state.position;\n    } else if (state.position === state.lineStart && testDocumentSeparator(state)) {\n      throwError(state, 'unexpected end of the document within a double quoted scalar');\n    } else {\n      state.position++;\n      captureEnd = state.position;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a double quoted scalar');\n}\n\nfunction readFlowCollection(state, nodeIndent) {\n  var readNext = true,\n      _line,\n      _tag = state.tag,\n      _result,\n      _anchor = state.anchor,\n      following,\n      terminator,\n      isPair,\n      isExplicitPair,\n      isMapping,\n      overridableKeys = {},\n      keyNode,\n      keyTag,\n      valueNode,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x5B\n  /* [ */\n  ) {\n      terminator = 0x5D;\n      /* ] */\n\n      isMapping = false;\n      _result = [];\n    } else if (ch === 0x7B\n  /* { */\n  ) {\n      terminator = 0x7D;\n      /* } */\n\n      isMapping = true;\n      _result = {};\n    } else {\n    return false;\n  }\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  while (ch !== 0) {\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === terminator) {\n      state.position++;\n      state.tag = _tag;\n      state.anchor = _anchor;\n      state.kind = isMapping ? 'mapping' : 'sequence';\n      state.result = _result;\n      return true;\n    } else if (!readNext) {\n      throwError(state, 'missed comma between flow collection entries');\n    }\n\n    keyTag = keyNode = valueNode = null;\n    isPair = isExplicitPair = false;\n\n    if (ch === 0x3F\n    /* ? */\n    ) {\n        following = state.input.charCodeAt(state.position + 1);\n\n        if (is_WS_OR_EOL(following)) {\n          isPair = isExplicitPair = true;\n          state.position++;\n          skipSeparationSpace(state, true, nodeIndent);\n        }\n      }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n    keyTag = state.tag;\n    keyNode = state.result;\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((isExplicitPair || state.line === _line) && ch === 0x3A\n    /* : */\n    ) {\n        isPair = true;\n        ch = state.input.charCodeAt(++state.position);\n        skipSeparationSpace(state, true, nodeIndent);\n        composeNode(state, nodeIndent, CONTEXT_FLOW_IN, false, true);\n        valueNode = state.result;\n      }\n\n    if (isMapping) {\n      storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode);\n    } else if (isPair) {\n      _result.push(storeMappingPair(state, null, overridableKeys, keyTag, keyNode, valueNode));\n    } else {\n      _result.push(keyNode);\n    }\n\n    skipSeparationSpace(state, true, nodeIndent);\n    ch = state.input.charCodeAt(state.position);\n\n    if (ch === 0x2C\n    /* , */\n    ) {\n        readNext = true;\n        ch = state.input.charCodeAt(++state.position);\n      } else {\n      readNext = false;\n    }\n  }\n\n  throwError(state, 'unexpected end of the stream within a flow collection');\n}\n\nfunction readBlockScalar(state, nodeIndent) {\n  var captureStart,\n      folding,\n      chomping = CHOMPING_CLIP,\n      didReadContent = false,\n      detectedIndent = false,\n      textIndent = nodeIndent,\n      emptyLines = 0,\n      atMoreIndented = false,\n      tmp,\n      ch;\n  ch = state.input.charCodeAt(state.position);\n\n  if (ch === 0x7C\n  /* | */\n  ) {\n      folding = false;\n    } else if (ch === 0x3E\n  /* > */\n  ) {\n      folding = true;\n    } else {\n    return false;\n  }\n\n  state.kind = 'scalar';\n  state.result = '';\n\n  while (ch !== 0) {\n    ch = state.input.charCodeAt(++state.position);\n\n    if (ch === 0x2B\n    /* + */\n    || ch === 0x2D\n    /* - */\n    ) {\n        if (CHOMPING_CLIP === chomping) {\n          chomping = ch === 0x2B\n          /* + */\n          ? CHOMPING_KEEP : CHOMPING_STRIP;\n        } else {\n          throwError(state, 'repeat of a chomping mode identifier');\n        }\n      } else if ((tmp = fromDecimalCode(ch)) >= 0) {\n      if (tmp === 0) {\n        throwError(state, 'bad explicit indentation width of a block scalar; it cannot be less than one');\n      } else if (!detectedIndent) {\n        textIndent = nodeIndent + tmp - 1;\n        detectedIndent = true;\n      } else {\n        throwError(state, 'repeat of an indentation width identifier');\n      }\n    } else {\n      break;\n    }\n  }\n\n  if (is_WHITE_SPACE(ch)) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (is_WHITE_SPACE(ch));\n\n    if (ch === 0x23\n    /* # */\n    ) {\n        do {\n          ch = state.input.charCodeAt(++state.position);\n        } while (!is_EOL(ch) && ch !== 0);\n      }\n  }\n\n  while (ch !== 0) {\n    readLineBreak(state);\n    state.lineIndent = 0;\n    ch = state.input.charCodeAt(state.position);\n\n    while ((!detectedIndent || state.lineIndent < textIndent) && ch === 0x20\n    /* Space */\n    ) {\n      state.lineIndent++;\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    if (!detectedIndent && state.lineIndent > textIndent) {\n      textIndent = state.lineIndent;\n    }\n\n    if (is_EOL(ch)) {\n      emptyLines++;\n      continue;\n    } // End of the scalar.\n\n\n    if (state.lineIndent < textIndent) {\n      // Perform the chomping.\n      if (chomping === CHOMPING_KEEP) {\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n      } else if (chomping === CHOMPING_CLIP) {\n        if (didReadContent) {\n          // i.e. only if the scalar is not empty.\n          state.result += '\\n';\n        }\n      } // Break this `while` cycle and go to the funciton's epilogue.\n\n\n      break;\n    } // Folded style: use fancy rules to handle line breaks.\n\n\n    if (folding) {\n      // Lines starting with white space characters (more-indented lines) are not folded.\n      if (is_WHITE_SPACE(ch)) {\n        atMoreIndented = true; // except for the first content line (cf. Example 8.1)\n\n        state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines); // End of more-indented block.\n      } else if (atMoreIndented) {\n        atMoreIndented = false;\n        state.result += common.repeat('\\n', emptyLines + 1); // Just one line break - perceive as the same line.\n      } else if (emptyLines === 0) {\n        if (didReadContent) {\n          // i.e. only if we have already read some scalar content.\n          state.result += ' ';\n        } // Several line breaks - perceive as different lines.\n\n      } else {\n        state.result += common.repeat('\\n', emptyLines);\n      } // Literal style: just add exact number of line breaks between content lines.\n\n    } else {\n      // Keep all line breaks except the header line break.\n      state.result += common.repeat('\\n', didReadContent ? 1 + emptyLines : emptyLines);\n    }\n\n    didReadContent = true;\n    detectedIndent = true;\n    emptyLines = 0;\n    captureStart = state.position;\n\n    while (!is_EOL(ch) && ch !== 0) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    captureSegment(state, captureStart, state.position, false);\n  }\n\n  return true;\n}\n\nfunction readBlockSequence(state, nodeIndent) {\n  var _line,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = [],\n      following,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    if (ch !== 0x2D\n    /* - */\n    ) {\n        break;\n      }\n\n    following = state.input.charCodeAt(state.position + 1);\n\n    if (!is_WS_OR_EOL(following)) {\n      break;\n    }\n\n    detected = true;\n    state.position++;\n\n    if (skipSeparationSpace(state, true, -1)) {\n      if (state.lineIndent <= nodeIndent) {\n        _result.push(null);\n\n        ch = state.input.charCodeAt(state.position);\n        continue;\n      }\n    }\n\n    _line = state.line;\n    composeNode(state, nodeIndent, CONTEXT_BLOCK_IN, false, true);\n\n    _result.push(state.result);\n\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if ((state.line === _line || state.lineIndent > nodeIndent) && ch !== 0) {\n      throwError(state, 'bad indentation of a sequence entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  }\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'sequence';\n    state.result = _result;\n    return true;\n  }\n\n  return false;\n}\n\nfunction readBlockMapping(state, nodeIndent, flowIndent) {\n  var following,\n      allowCompact,\n      _line,\n      _pos,\n      _tag = state.tag,\n      _anchor = state.anchor,\n      _result = {},\n      overridableKeys = {},\n      keyTag = null,\n      keyNode = null,\n      valueNode = null,\n      atExplicitKey = false,\n      detected = false,\n      ch;\n\n  if (state.anchor !== null) {\n    state.anchorMap[state.anchor] = _result;\n  }\n\n  ch = state.input.charCodeAt(state.position);\n\n  while (ch !== 0) {\n    following = state.input.charCodeAt(state.position + 1);\n    _line = state.line; // Save the current line.\n\n    _pos = state.position; //\n    // Explicit notation case. There are two separate blocks:\n    // first for the key (denoted by \"?\") and second for the value (denoted by \":\")\n    //\n\n    if ((ch === 0x3F\n    /* ? */\n    || ch === 0x3A\n    /* : */\n    ) && is_WS_OR_EOL(following)) {\n      if (ch === 0x3F\n      /* ? */\n      ) {\n          if (atExplicitKey) {\n            storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n            keyTag = keyNode = valueNode = null;\n          }\n\n          detected = true;\n          atExplicitKey = true;\n          allowCompact = true;\n        } else if (atExplicitKey) {\n        // i.e. 0x3A/* : */ === character after the explicit key.\n        atExplicitKey = false;\n        allowCompact = true;\n      } else {\n        throwError(state, 'incomplete explicit mapping pair; a key node is missed; or followed by a non-tabulated empty line');\n      }\n\n      state.position += 1;\n      ch = following; //\n      // Implicit notation case. Flow-style node as the key first, then \":\", and the value.\n      //\n    } else if (composeNode(state, flowIndent, CONTEXT_FLOW_OUT, false, true)) {\n      if (state.line === _line) {\n        ch = state.input.charCodeAt(state.position);\n\n        while (is_WHITE_SPACE(ch)) {\n          ch = state.input.charCodeAt(++state.position);\n        }\n\n        if (ch === 0x3A\n        /* : */\n        ) {\n            ch = state.input.charCodeAt(++state.position);\n\n            if (!is_WS_OR_EOL(ch)) {\n              throwError(state, 'a whitespace character is expected after the key-value separator within a block mapping');\n            }\n\n            if (atExplicitKey) {\n              storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n              keyTag = keyNode = valueNode = null;\n            }\n\n            detected = true;\n            atExplicitKey = false;\n            allowCompact = false;\n            keyTag = state.tag;\n            keyNode = state.result;\n          } else if (detected) {\n          throwError(state, 'can not read an implicit mapping pair; a colon is missed');\n        } else {\n          state.tag = _tag;\n          state.anchor = _anchor;\n          return true; // Keep the result of `composeNode`.\n        }\n      } else if (detected) {\n        throwError(state, 'can not read a block mapping entry; a multiline key may not be an implicit key');\n      } else {\n        state.tag = _tag;\n        state.anchor = _anchor;\n        return true; // Keep the result of `composeNode`.\n      }\n    } else {\n        break; // Reading is done. Go to the epilogue.\n      } //\n    // Common reading code for both explicit and implicit notations.\n    //\n\n\n    if (state.line === _line || state.lineIndent > nodeIndent) {\n      if (composeNode(state, nodeIndent, CONTEXT_BLOCK_OUT, true, allowCompact)) {\n        if (atExplicitKey) {\n          keyNode = state.result;\n        } else {\n          valueNode = state.result;\n        }\n      }\n\n      if (!atExplicitKey) {\n        storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, valueNode, _line, _pos);\n        keyTag = keyNode = valueNode = null;\n      }\n\n      skipSeparationSpace(state, true, -1);\n      ch = state.input.charCodeAt(state.position);\n    }\n\n    if (state.lineIndent > nodeIndent && ch !== 0) {\n      throwError(state, 'bad indentation of a mapping entry');\n    } else if (state.lineIndent < nodeIndent) {\n      break;\n    }\n  } //\n  // Epilogue.\n  //\n  // Special case: last mapping's node contains only the key in explicit notation.\n\n\n  if (atExplicitKey) {\n    storeMappingPair(state, _result, overridableKeys, keyTag, keyNode, null);\n  } // Expose the resulting mapping.\n\n\n  if (detected) {\n    state.tag = _tag;\n    state.anchor = _anchor;\n    state.kind = 'mapping';\n    state.result = _result;\n  }\n\n  return detected;\n}\n\nfunction readTagProperty(state) {\n  var _position,\n      isVerbatim = false,\n      isNamed = false,\n      tagHandle,\n      tagName,\n      ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x21\n  /* ! */\n  ) return false;\n\n  if (state.tag !== null) {\n    throwError(state, 'duplication of a tag property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n\n  if (ch === 0x3C\n  /* < */\n  ) {\n      isVerbatim = true;\n      ch = state.input.charCodeAt(++state.position);\n    } else if (ch === 0x21\n  /* ! */\n  ) {\n      isNamed = true;\n      tagHandle = '!!';\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n    tagHandle = '!';\n  }\n\n  _position = state.position;\n\n  if (isVerbatim) {\n    do {\n      ch = state.input.charCodeAt(++state.position);\n    } while (ch !== 0 && ch !== 0x3E\n    /* > */\n    );\n\n    if (state.position < state.length) {\n      tagName = state.input.slice(_position, state.position);\n      ch = state.input.charCodeAt(++state.position);\n    } else {\n      throwError(state, 'unexpected end of the stream within a verbatim tag');\n    }\n  } else {\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      if (ch === 0x21\n      /* ! */\n      ) {\n          if (!isNamed) {\n            tagHandle = state.input.slice(_position - 1, state.position + 1);\n\n            if (!PATTERN_TAG_HANDLE.test(tagHandle)) {\n              throwError(state, 'named tag handle cannot contain such characters');\n            }\n\n            isNamed = true;\n            _position = state.position + 1;\n          } else {\n            throwError(state, 'tag suffix cannot contain exclamation marks');\n          }\n        }\n\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    tagName = state.input.slice(_position, state.position);\n\n    if (PATTERN_FLOW_INDICATORS.test(tagName)) {\n      throwError(state, 'tag suffix cannot contain flow indicator characters');\n    }\n  }\n\n  if (tagName && !PATTERN_TAG_URI.test(tagName)) {\n    throwError(state, 'tag name cannot contain such characters: ' + tagName);\n  }\n\n  if (isVerbatim) {\n    state.tag = tagName;\n  } else if (_hasOwnProperty$2.call(state.tagMap, tagHandle)) {\n    state.tag = state.tagMap[tagHandle] + tagName;\n  } else if (tagHandle === '!') {\n    state.tag = '!' + tagName;\n  } else if (tagHandle === '!!') {\n    state.tag = 'tag:yaml.org,2002:' + tagName;\n  } else {\n    throwError(state, 'undeclared tag handle \"' + tagHandle + '\"');\n  }\n\n  return true;\n}\n\nfunction readAnchorProperty(state) {\n  var _position, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x26\n  /* & */\n  ) return false;\n\n  if (state.anchor !== null) {\n    throwError(state, 'duplication of an anchor property');\n  }\n\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an anchor node must contain at least one character');\n  }\n\n  state.anchor = state.input.slice(_position, state.position);\n  return true;\n}\n\nfunction readAlias(state) {\n  var _position, alias, ch;\n\n  ch = state.input.charCodeAt(state.position);\n  if (ch !== 0x2A\n  /* * */\n  ) return false;\n  ch = state.input.charCodeAt(++state.position);\n  _position = state.position;\n\n  while (ch !== 0 && !is_WS_OR_EOL(ch) && !is_FLOW_INDICATOR(ch)) {\n    ch = state.input.charCodeAt(++state.position);\n  }\n\n  if (state.position === _position) {\n    throwError(state, 'name of an alias node must contain at least one character');\n  }\n\n  alias = state.input.slice(_position, state.position);\n\n  if (!_hasOwnProperty$2.call(state.anchorMap, alias)) {\n    throwError(state, 'unidentified alias \"' + alias + '\"');\n  }\n\n  state.result = state.anchorMap[alias];\n  skipSeparationSpace(state, true, -1);\n  return true;\n}\n\nfunction composeNode(state, parentIndent, nodeContext, allowToSeek, allowCompact) {\n  var allowBlockStyles,\n      allowBlockScalars,\n      allowBlockCollections,\n      indentStatus = 1,\n      // 1: this>parent, 0: this=parent, -1: this<parent\n  atNewLine = false,\n      hasContent = false,\n      typeIndex,\n      typeQuantity,\n      type,\n      flowIndent,\n      blockIndent;\n\n  if (state.listener !== null) {\n    state.listener('open', state);\n  }\n\n  state.tag = null;\n  state.anchor = null;\n  state.kind = null;\n  state.result = null;\n  allowBlockStyles = allowBlockScalars = allowBlockCollections = CONTEXT_BLOCK_OUT === nodeContext || CONTEXT_BLOCK_IN === nodeContext;\n\n  if (allowToSeek) {\n    if (skipSeparationSpace(state, true, -1)) {\n      atNewLine = true;\n\n      if (state.lineIndent > parentIndent) {\n        indentStatus = 1;\n      } else if (state.lineIndent === parentIndent) {\n        indentStatus = 0;\n      } else if (state.lineIndent < parentIndent) {\n        indentStatus = -1;\n      }\n    }\n  }\n\n  if (indentStatus === 1) {\n    while (readTagProperty(state) || readAnchorProperty(state)) {\n      if (skipSeparationSpace(state, true, -1)) {\n        atNewLine = true;\n        allowBlockCollections = allowBlockStyles;\n\n        if (state.lineIndent > parentIndent) {\n          indentStatus = 1;\n        } else if (state.lineIndent === parentIndent) {\n          indentStatus = 0;\n        } else if (state.lineIndent < parentIndent) {\n          indentStatus = -1;\n        }\n      } else {\n        allowBlockCollections = false;\n      }\n    }\n  }\n\n  if (allowBlockCollections) {\n    allowBlockCollections = atNewLine || allowCompact;\n  }\n\n  if (indentStatus === 1 || CONTEXT_BLOCK_OUT === nodeContext) {\n    if (CONTEXT_FLOW_IN === nodeContext || CONTEXT_FLOW_OUT === nodeContext) {\n      flowIndent = parentIndent;\n    } else {\n      flowIndent = parentIndent + 1;\n    }\n\n    blockIndent = state.position - state.lineStart;\n\n    if (indentStatus === 1) {\n      if (allowBlockCollections && (readBlockSequence(state, blockIndent) || readBlockMapping(state, blockIndent, flowIndent)) || readFlowCollection(state, flowIndent)) {\n        hasContent = true;\n      } else {\n        if (allowBlockScalars && readBlockScalar(state, flowIndent) || readSingleQuotedScalar(state, flowIndent) || readDoubleQuotedScalar(state, flowIndent)) {\n          hasContent = true;\n        } else if (readAlias(state)) {\n          hasContent = true;\n\n          if (state.tag !== null || state.anchor !== null) {\n            throwError(state, 'alias node should not have any properties');\n          }\n        } else if (readPlainScalar(state, flowIndent, CONTEXT_FLOW_IN === nodeContext)) {\n          hasContent = true;\n\n          if (state.tag === null) {\n            state.tag = '?';\n          }\n        }\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else if (indentStatus === 0) {\n      // Special case: block sequences are allowed to have same indentation level as the parent.\n      // http://www.yaml.org/spec/1.2/spec.html#id2799784\n      hasContent = allowBlockCollections && readBlockSequence(state, blockIndent);\n    }\n  }\n\n  if (state.tag !== null && state.tag !== '!') {\n    if (state.tag === '?') {\n      // Implicit resolving is not allowed for non-scalar types, and '?'\n      // non-specific tag is only automatically assigned to plain scalars.\n      //\n      // We only need to check kind conformity in case user explicitly assigns '?'\n      // tag, for example like this: \"!<?> [0]\"\n      //\n      if (state.result !== null && state.kind !== 'scalar') {\n        throwError(state, 'unacceptable node kind for !<?> tag; it should be \"scalar\", not \"' + state.kind + '\"');\n      }\n\n      for (typeIndex = 0, typeQuantity = state.implicitTypes.length; typeIndex < typeQuantity; typeIndex += 1) {\n        type = state.implicitTypes[typeIndex];\n\n        if (type.resolve(state.result)) {\n          // `state.result` updated in resolver if matched\n          state.result = type.construct(state.result);\n          state.tag = type.tag;\n\n          if (state.anchor !== null) {\n            state.anchorMap[state.anchor] = state.result;\n          }\n\n          break;\n        }\n      }\n    } else if (_hasOwnProperty$2.call(state.typeMap[state.kind || 'fallback'], state.tag)) {\n      type = state.typeMap[state.kind || 'fallback'][state.tag];\n\n      if (state.result !== null && type.kind !== state.kind) {\n        throwError(state, 'unacceptable node kind for !<' + state.tag + '> tag; it should be \"' + type.kind + '\", not \"' + state.kind + '\"');\n      }\n\n      if (!type.resolve(state.result)) {\n        // `state.result` updated in resolver if matched\n        throwError(state, 'cannot resolve a node with !<' + state.tag + '> explicit tag');\n      } else {\n        state.result = type.construct(state.result);\n\n        if (state.anchor !== null) {\n          state.anchorMap[state.anchor] = state.result;\n        }\n      }\n    } else {\n      throwError(state, 'unknown tag !<' + state.tag + '>');\n    }\n  }\n\n  if (state.listener !== null) {\n    state.listener('close', state);\n  }\n\n  return state.tag !== null || state.anchor !== null || hasContent;\n}\n\nfunction readDocument(state) {\n  var documentStart = state.position,\n      _position,\n      directiveName,\n      directiveArgs,\n      hasDirectives = false,\n      ch;\n\n  state.version = null;\n  state.checkLineBreaks = state.legacy;\n  state.tagMap = {};\n  state.anchorMap = {};\n\n  while ((ch = state.input.charCodeAt(state.position)) !== 0) {\n    skipSeparationSpace(state, true, -1);\n    ch = state.input.charCodeAt(state.position);\n\n    if (state.lineIndent > 0 || ch !== 0x25\n    /* % */\n    ) {\n        break;\n      }\n\n    hasDirectives = true;\n    ch = state.input.charCodeAt(++state.position);\n    _position = state.position;\n\n    while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n      ch = state.input.charCodeAt(++state.position);\n    }\n\n    directiveName = state.input.slice(_position, state.position);\n    directiveArgs = [];\n\n    if (directiveName.length < 1) {\n      throwError(state, 'directive name must not be less than one character in length');\n    }\n\n    while (ch !== 0) {\n      while (is_WHITE_SPACE(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      if (ch === 0x23\n      /* # */\n      ) {\n          do {\n            ch = state.input.charCodeAt(++state.position);\n          } while (ch !== 0 && !is_EOL(ch));\n\n          break;\n        }\n\n      if (is_EOL(ch)) break;\n      _position = state.position;\n\n      while (ch !== 0 && !is_WS_OR_EOL(ch)) {\n        ch = state.input.charCodeAt(++state.position);\n      }\n\n      directiveArgs.push(state.input.slice(_position, state.position));\n    }\n\n    if (ch !== 0) readLineBreak(state);\n\n    if (_hasOwnProperty$2.call(directiveHandlers, directiveName)) {\n      directiveHandlers[directiveName](state, directiveName, directiveArgs);\n    } else {\n      throwWarning(state, 'unknown document directive \"' + directiveName + '\"');\n    }\n  }\n\n  skipSeparationSpace(state, true, -1);\n\n  if (state.lineIndent === 0 && state.input.charCodeAt(state.position) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 1) === 0x2D\n  /* - */\n  && state.input.charCodeAt(state.position + 2) === 0x2D\n  /* - */\n  ) {\n      state.position += 3;\n      skipSeparationSpace(state, true, -1);\n    } else if (hasDirectives) {\n    throwError(state, 'directives end mark is expected');\n  }\n\n  composeNode(state, state.lineIndent - 1, CONTEXT_BLOCK_OUT, false, true);\n  skipSeparationSpace(state, true, -1);\n\n  if (state.checkLineBreaks && PATTERN_NON_ASCII_LINE_BREAKS.test(state.input.slice(documentStart, state.position))) {\n    throwWarning(state, 'non-ASCII line breaks are interpreted as content');\n  }\n\n  state.documents.push(state.result);\n\n  if (state.position === state.lineStart && testDocumentSeparator(state)) {\n    if (state.input.charCodeAt(state.position) === 0x2E\n    /* . */\n    ) {\n        state.position += 3;\n        skipSeparationSpace(state, true, -1);\n      }\n\n    return;\n  }\n\n  if (state.position < state.length - 1) {\n    throwError(state, 'end of the stream or a document separator is expected');\n  } else {\n    return;\n  }\n}\n\nfunction loadDocuments(input, options) {\n  input = String(input);\n  options = options || {};\n\n  if (input.length !== 0) {\n    // Add tailing `\\n` if not exists\n    if (input.charCodeAt(input.length - 1) !== 0x0A\n    /* LF */\n    && input.charCodeAt(input.length - 1) !== 0x0D\n    /* CR */\n    ) {\n        input += '\\n';\n      } // Strip BOM\n\n\n    if (input.charCodeAt(0) === 0xFEFF) {\n      input = input.slice(1);\n    }\n  }\n\n  var state = new State(input, options);\n  var nullpos = input.indexOf('\\0');\n\n  if (nullpos !== -1) {\n    state.position = nullpos;\n    throwError(state, 'null byte is not allowed in input');\n  } // Use 0 as string terminator. That significantly simplifies bounds check.\n\n\n  state.input += '\\0';\n\n  while (state.input.charCodeAt(state.position) === 0x20\n  /* Space */\n  ) {\n    state.lineIndent += 1;\n    state.position += 1;\n  }\n\n  while (state.position < state.length - 1) {\n    readDocument(state);\n  }\n\n  return state.documents;\n}\n\nfunction loadAll(input, iterator, options) {\n  if (iterator !== null && typeof iterator === 'object' && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  var documents = loadDocuments(input, options);\n\n  if (typeof iterator !== 'function') {\n    return documents;\n  }\n\n  for (var index = 0, length = documents.length; index < length; index += 1) {\n    iterator(documents[index]);\n  }\n}\n\nfunction load(input, options) {\n  var documents = loadDocuments(input, options);\n\n  if (documents.length === 0) {\n    /*eslint-disable no-undefined*/\n    return undefined;\n  } else if (documents.length === 1) {\n    return documents[0];\n  }\n\n  throw new exception('expected a single document in the stream, but found more');\n}\n\nfunction safeLoadAll(input, iterator, options) {\n  if (typeof iterator === 'object' && iterator !== null && typeof options === 'undefined') {\n    options = iterator;\n    iterator = null;\n  }\n\n  return loadAll(input, iterator, common.extend({\n    schema: default_safe\n  }, options));\n}\n\nfunction safeLoad(input, options) {\n  return load(input, common.extend({\n    schema: default_safe\n  }, options));\n}\n\nvar loadAll_1 = loadAll;\nvar load_1 = load;\nvar safeLoadAll_1 = safeLoadAll;\nvar safeLoad_1 = safeLoad;\nvar loader = {\n  loadAll: loadAll_1,\n  load: load_1,\n  safeLoadAll: safeLoadAll_1,\n  safeLoad: safeLoad_1\n};\n\n/*eslint-disable no-use-before-define*/\n\n\nvar _toString$2 = Object.prototype.toString;\nvar _hasOwnProperty$3 = Object.prototype.hasOwnProperty;\nvar CHAR_TAB = 0x09;\n/* Tab */\n\nvar CHAR_LINE_FEED = 0x0A;\n/* LF */\n\nvar CHAR_CARRIAGE_RETURN = 0x0D;\n/* CR */\n\nvar CHAR_SPACE = 0x20;\n/* Space */\n\nvar CHAR_EXCLAMATION = 0x21;\n/* ! */\n\nvar CHAR_DOUBLE_QUOTE = 0x22;\n/* \" */\n\nvar CHAR_SHARP = 0x23;\n/* # */\n\nvar CHAR_PERCENT = 0x25;\n/* % */\n\nvar CHAR_AMPERSAND = 0x26;\n/* & */\n\nvar CHAR_SINGLE_QUOTE = 0x27;\n/* ' */\n\nvar CHAR_ASTERISK = 0x2A;\n/* * */\n\nvar CHAR_COMMA = 0x2C;\n/* , */\n\nvar CHAR_MINUS = 0x2D;\n/* - */\n\nvar CHAR_COLON = 0x3A;\n/* : */\n\nvar CHAR_EQUALS = 0x3D;\n/* = */\n\nvar CHAR_GREATER_THAN = 0x3E;\n/* > */\n\nvar CHAR_QUESTION = 0x3F;\n/* ? */\n\nvar CHAR_COMMERCIAL_AT = 0x40;\n/* @ */\n\nvar CHAR_LEFT_SQUARE_BRACKET = 0x5B;\n/* [ */\n\nvar CHAR_RIGHT_SQUARE_BRACKET = 0x5D;\n/* ] */\n\nvar CHAR_GRAVE_ACCENT = 0x60;\n/* ` */\n\nvar CHAR_LEFT_CURLY_BRACKET = 0x7B;\n/* { */\n\nvar CHAR_VERTICAL_LINE = 0x7C;\n/* | */\n\nvar CHAR_RIGHT_CURLY_BRACKET = 0x7D;\n/* } */\n\nvar ESCAPE_SEQUENCES = {};\nESCAPE_SEQUENCES[0x00] = '\\\\0';\nESCAPE_SEQUENCES[0x07] = '\\\\a';\nESCAPE_SEQUENCES[0x08] = '\\\\b';\nESCAPE_SEQUENCES[0x09] = '\\\\t';\nESCAPE_SEQUENCES[0x0A] = '\\\\n';\nESCAPE_SEQUENCES[0x0B] = '\\\\v';\nESCAPE_SEQUENCES[0x0C] = '\\\\f';\nESCAPE_SEQUENCES[0x0D] = '\\\\r';\nESCAPE_SEQUENCES[0x1B] = '\\\\e';\nESCAPE_SEQUENCES[0x22] = '\\\\\"';\nESCAPE_SEQUENCES[0x5C] = '\\\\\\\\';\nESCAPE_SEQUENCES[0x85] = '\\\\N';\nESCAPE_SEQUENCES[0xA0] = '\\\\_';\nESCAPE_SEQUENCES[0x2028] = '\\\\L';\nESCAPE_SEQUENCES[0x2029] = '\\\\P';\nvar DEPRECATED_BOOLEANS_SYNTAX = ['y', 'Y', 'yes', 'Yes', 'YES', 'on', 'On', 'ON', 'n', 'N', 'no', 'No', 'NO', 'off', 'Off', 'OFF'];\n\nfunction compileStyleMap(schema, map) {\n  var result, keys, index, length, tag, style, type;\n  if (map === null) return {};\n  result = {};\n  keys = Object.keys(map);\n\n  for (index = 0, length = keys.length; index < length; index += 1) {\n    tag = keys[index];\n    style = String(map[tag]);\n\n    if (tag.slice(0, 2) === '!!') {\n      tag = 'tag:yaml.org,2002:' + tag.slice(2);\n    }\n\n    type = schema.compiledTypeMap['fallback'][tag];\n\n    if (type && _hasOwnProperty$3.call(type.styleAliases, style)) {\n      style = type.styleAliases[style];\n    }\n\n    result[tag] = style;\n  }\n\n  return result;\n}\n\nfunction encodeHex(character) {\n  var string, handle, length;\n  string = character.toString(16).toUpperCase();\n\n  if (character <= 0xFF) {\n    handle = 'x';\n    length = 2;\n  } else if (character <= 0xFFFF) {\n    handle = 'u';\n    length = 4;\n  } else if (character <= 0xFFFFFFFF) {\n    handle = 'U';\n    length = 8;\n  } else {\n    throw new exception('code point within a string may not be greater than 0xFFFFFFFF');\n  }\n\n  return '\\\\' + handle + common.repeat('0', length - string.length) + string;\n}\n\nfunction State$1(options) {\n  this.schema = options['schema'] || default_full;\n  this.indent = Math.max(1, options['indent'] || 2);\n  this.noArrayIndent = options['noArrayIndent'] || false;\n  this.skipInvalid = options['skipInvalid'] || false;\n  this.flowLevel = common.isNothing(options['flowLevel']) ? -1 : options['flowLevel'];\n  this.styleMap = compileStyleMap(this.schema, options['styles'] || null);\n  this.sortKeys = options['sortKeys'] || false;\n  this.lineWidth = options['lineWidth'] || 80;\n  this.noRefs = options['noRefs'] || false;\n  this.noCompatMode = options['noCompatMode'] || false;\n  this.condenseFlow = options['condenseFlow'] || false;\n  this.implicitTypes = this.schema.compiledImplicit;\n  this.explicitTypes = this.schema.compiledExplicit;\n  this.tag = null;\n  this.result = '';\n  this.duplicates = [];\n  this.usedDuplicates = null;\n} // Indents every line in a string. Empty lines (\\n only) are not indented.\n\n\nfunction indentString(string, spaces) {\n  var ind = common.repeat(' ', spaces),\n      position = 0,\n      next = -1,\n      result = '',\n      line,\n      length = string.length;\n\n  while (position < length) {\n    next = string.indexOf('\\n', position);\n\n    if (next === -1) {\n      line = string.slice(position);\n      position = length;\n    } else {\n      line = string.slice(position, next + 1);\n      position = next + 1;\n    }\n\n    if (line.length && line !== '\\n') result += ind;\n    result += line;\n  }\n\n  return result;\n}\n\nfunction generateNextLine(state, level) {\n  return '\\n' + common.repeat(' ', state.indent * level);\n}\n\nfunction testImplicitResolving(state, str) {\n  var index, length, type;\n\n  for (index = 0, length = state.implicitTypes.length; index < length; index += 1) {\n    type = state.implicitTypes[index];\n\n    if (type.resolve(str)) {\n      return true;\n    }\n  }\n\n  return false;\n} // [33] s-white ::= s-space | s-tab\n\n\nfunction isWhitespace(c) {\n  return c === CHAR_SPACE || c === CHAR_TAB;\n} // Returns true if the character can be printed without escaping.\n// From YAML 1.2: \"any allowed characters known to be non-printable\n// should also be escaped. [However,] This isn’t mandatory\"\n// Derived from nb-char - \\t - #x85 - #xA0 - #x2028 - #x2029.\n\n\nfunction isPrintable(c) {\n  return 0x00020 <= c && c <= 0x00007E || 0x000A1 <= c && c <= 0x00D7FF && c !== 0x2028 && c !== 0x2029 || 0x0E000 <= c && c <= 0x00FFFD && c !== 0xFEFF\n  /* BOM */\n  || 0x10000 <= c && c <= 0x10FFFF;\n} // [34] ns-char ::= nb-char - s-white\n// [27] nb-char ::= c-printable - b-char - c-byte-order-mark\n// [26] b-char  ::= b-line-feed | b-carriage-return\n// [24] b-line-feed       ::=     #xA    /* LF */\n// [25] b-carriage-return ::=     #xD    /* CR */\n// [3]  c-byte-order-mark ::=     #xFEFF\n\n\nfunction isNsChar(c) {\n  return isPrintable(c) && !isWhitespace(c) // byte-order-mark\n  && c !== 0xFEFF // b-char\n  && c !== CHAR_CARRIAGE_RETURN && c !== CHAR_LINE_FEED;\n} // Simplified test for values allowed after the first character in plain style.\n\n\nfunction isPlainSafe(c, prev) {\n  // Uses a subset of nb-char - c-flow-indicator - \":\" - \"#\"\n  // where nb-char ::= c-printable - b-char - c-byte-order-mark.\n  return isPrintable(c) && c !== 0xFEFF // - c-flow-indicator\n  && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // - \":\" - \"#\"\n  // /* An ns-char preceding */ \"#\"\n  && c !== CHAR_COLON && (c !== CHAR_SHARP || prev && isNsChar(prev));\n} // Simplified test for values allowed as the first character in plain style.\n\n\nfunction isPlainSafeFirst(c) {\n  // Uses a subset of ns-char - c-indicator\n  // where ns-char = nb-char - s-white.\n  return isPrintable(c) && c !== 0xFEFF && !isWhitespace(c) // - s-white\n  // - (c-indicator ::=\n  // “-” | “?” | “:” | “,” | “[” | “]” | “{” | “}”\n  && c !== CHAR_MINUS && c !== CHAR_QUESTION && c !== CHAR_COLON && c !== CHAR_COMMA && c !== CHAR_LEFT_SQUARE_BRACKET && c !== CHAR_RIGHT_SQUARE_BRACKET && c !== CHAR_LEFT_CURLY_BRACKET && c !== CHAR_RIGHT_CURLY_BRACKET // | “#” | “&” | “*” | “!” | “|” | “=” | “>” | “'” | “\"”\n  && c !== CHAR_SHARP && c !== CHAR_AMPERSAND && c !== CHAR_ASTERISK && c !== CHAR_EXCLAMATION && c !== CHAR_VERTICAL_LINE && c !== CHAR_EQUALS && c !== CHAR_GREATER_THAN && c !== CHAR_SINGLE_QUOTE && c !== CHAR_DOUBLE_QUOTE // | “%” | “@” | “`”)\n  && c !== CHAR_PERCENT && c !== CHAR_COMMERCIAL_AT && c !== CHAR_GRAVE_ACCENT;\n} // Determines whether block indentation indicator is required.\n\n\nfunction needIndentIndicator(string) {\n  var leadingSpaceRe = /^\\n* /;\n  return leadingSpaceRe.test(string);\n}\n\nvar STYLE_PLAIN = 1,\n    STYLE_SINGLE = 2,\n    STYLE_LITERAL = 3,\n    STYLE_FOLDED = 4,\n    STYLE_DOUBLE = 5; // Determines which scalar styles are possible and returns the preferred style.\n// lineWidth = -1 => no limit.\n// Pre-conditions: str.length > 0.\n// Post-conditions:\n//    STYLE_PLAIN or STYLE_SINGLE => no \\n are in the string.\n//    STYLE_LITERAL => no lines are suitable for folding (or lineWidth is -1).\n//    STYLE_FOLDED => a line > lineWidth and can be folded (and lineWidth != -1).\n\nfunction chooseScalarStyle(string, singleLineOnly, indentPerLevel, lineWidth, testAmbiguousType) {\n  var i;\n  var char, prev_char;\n  var hasLineBreak = false;\n  var hasFoldableLine = false; // only checked if shouldTrackWidth\n\n  var shouldTrackWidth = lineWidth !== -1;\n  var previousLineBreak = -1; // count the first line correctly\n\n  var plain = isPlainSafeFirst(string.charCodeAt(0)) && !isWhitespace(string.charCodeAt(string.length - 1));\n\n  if (singleLineOnly) {\n    // Case: no block styles.\n    // Check for disallowed characters to rule out plain and single.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n\n      if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    }\n  } else {\n    // Case: block styles permitted.\n    for (i = 0; i < string.length; i++) {\n      char = string.charCodeAt(i);\n\n      if (char === CHAR_LINE_FEED) {\n        hasLineBreak = true; // Check if any line can be folded.\n\n        if (shouldTrackWidth) {\n          hasFoldableLine = hasFoldableLine || // Foldable line = too long, and not more-indented.\n          i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n          previousLineBreak = i;\n        }\n      } else if (!isPrintable(char)) {\n        return STYLE_DOUBLE;\n      }\n\n      prev_char = i > 0 ? string.charCodeAt(i - 1) : null;\n      plain = plain && isPlainSafe(char, prev_char);\n    } // in case the end is missing a \\n\n\n\n    hasFoldableLine = hasFoldableLine || shouldTrackWidth && i - previousLineBreak - 1 > lineWidth && string[previousLineBreak + 1] !== ' ';\n  } // Although every style can represent \\n without escaping, prefer block styles\n  // for multiline, since they're more readable and they don't add empty lines.\n  // Also prefer folding a super-long line.\n\n\n  if (!hasLineBreak && !hasFoldableLine) {\n    // Strings interpretable as another type have to be quoted;\n    // e.g. the string 'true' vs. the boolean true.\n    return plain && !testAmbiguousType(string) ? STYLE_PLAIN : STYLE_SINGLE;\n  } // Edge case: block indentation indicator can only have one digit.\n\n\n  if (indentPerLevel > 9 && needIndentIndicator(string)) {\n    return STYLE_DOUBLE;\n  } // At this point we know block styles are valid.\n  // Prefer literal style unless we want to fold.\n\n\n  return hasFoldableLine ? STYLE_FOLDED : STYLE_LITERAL;\n} // Note: line breaking/folding is implemented for only the folded style.\n// NB. We drop the last trailing newline (if any) of a returned block scalar\n//  since the dumper adds its own newline. This always works:\n//    • No ending newline => unaffected; already using strip \"-\" chomping.\n//    • Ending newline    => removed then restored.\n//  Importantly, this keeps the \"+\" chomp indicator from gaining an extra line.\n\n\nfunction writeScalar(state, string, level, iskey) {\n  state.dump = function () {\n    if (string.length === 0) {\n      return \"''\";\n    }\n\n    if (!state.noCompatMode && DEPRECATED_BOOLEANS_SYNTAX.indexOf(string) !== -1) {\n      return \"'\" + string + \"'\";\n    }\n\n    var indent = state.indent * Math.max(1, level); // no 0-indent scalars\n    // As indentation gets deeper, let the width decrease monotonically\n    // to the lower bound min(state.lineWidth, 40).\n    // Note that this implies\n    //  state.lineWidth ≤ 40 + state.indent: width is fixed at the lower bound.\n    //  state.lineWidth > 40 + state.indent: width decreases until the lower bound.\n    // This behaves better than a constant minimum width which disallows narrower options,\n    // or an indent threshold which causes the width to suddenly increase.\n\n    var lineWidth = state.lineWidth === -1 ? -1 : Math.max(Math.min(state.lineWidth, 40), state.lineWidth - indent); // Without knowing if keys are implicit/explicit, assume implicit for safety.\n\n    var singleLineOnly = iskey // No block styles in flow mode.\n    || state.flowLevel > -1 && level >= state.flowLevel;\n\n    function testAmbiguity(string) {\n      return testImplicitResolving(state, string);\n    }\n\n    switch (chooseScalarStyle(string, singleLineOnly, state.indent, lineWidth, testAmbiguity)) {\n      case STYLE_PLAIN:\n        return string;\n\n      case STYLE_SINGLE:\n        return \"'\" + string.replace(/'/g, \"''\") + \"'\";\n\n      case STYLE_LITERAL:\n        return '|' + blockHeader(string, state.indent) + dropEndingNewline(indentString(string, indent));\n\n      case STYLE_FOLDED:\n        return '>' + blockHeader(string, state.indent) + dropEndingNewline(indentString(foldString(string, lineWidth), indent));\n\n      case STYLE_DOUBLE:\n        return '\"' + escapeString(string) + '\"';\n\n      default:\n        throw new exception('impossible error: invalid scalar style');\n    }\n  }();\n} // Pre-conditions: string is valid for a block scalar, 1 <= indentPerLevel <= 9.\n\n\nfunction blockHeader(string, indentPerLevel) {\n  var indentIndicator = needIndentIndicator(string) ? String(indentPerLevel) : ''; // note the special case: the string '\\n' counts as a \"trailing\" empty line.\n\n  var clip = string[string.length - 1] === '\\n';\n  var keep = clip && (string[string.length - 2] === '\\n' || string === '\\n');\n  var chomp = keep ? '+' : clip ? '' : '-';\n  return indentIndicator + chomp + '\\n';\n} // (See the note for writeScalar.)\n\n\nfunction dropEndingNewline(string) {\n  return string[string.length - 1] === '\\n' ? string.slice(0, -1) : string;\n} // Note: a long line without a suitable break point will exceed the width limit.\n// Pre-conditions: every char in str isPrintable, str.length > 0, width > 0.\n\n\nfunction foldString(string, width) {\n  // In folded style, $k$ consecutive newlines output as $k+1$ newlines—\n  // unless they're before or after a more-indented line, or at the very\n  // beginning or end, in which case $k$ maps to $k$.\n  // Therefore, parse each chunk as newline(s) followed by a content line.\n  var lineRe = /(\\n+)([^\\n]*)/g; // first line (possibly an empty line)\n\n  var result = function () {\n    var nextLF = string.indexOf('\\n');\n    nextLF = nextLF !== -1 ? nextLF : string.length;\n    lineRe.lastIndex = nextLF;\n    return foldLine(string.slice(0, nextLF), width);\n  }(); // If we haven't reached the first content line yet, don't add an extra \\n.\n\n\n  var prevMoreIndented = string[0] === '\\n' || string[0] === ' ';\n  var moreIndented; // rest of the lines\n\n  var match;\n\n  while (match = lineRe.exec(string)) {\n    var prefix = match[1],\n        line = match[2];\n    moreIndented = line[0] === ' ';\n    result += prefix + (!prevMoreIndented && !moreIndented && line !== '' ? '\\n' : '') + foldLine(line, width);\n    prevMoreIndented = moreIndented;\n  }\n\n  return result;\n} // Greedy line breaking.\n// Picks the longest line under the limit each time,\n// otherwise settles for the shortest line over the limit.\n// NB. More-indented lines *cannot* be folded, as that would add an extra \\n.\n\n\nfunction foldLine(line, width) {\n  if (line === '' || line[0] === ' ') return line; // Since a more-indented line adds a \\n, breaks can't be followed by a space.\n\n  var breakRe = / [^ ]/g; // note: the match index will always be <= length-2.\n\n  var match; // start is an inclusive index. end, curr, and next are exclusive.\n\n  var start = 0,\n      end,\n      curr = 0,\n      next = 0;\n  var result = ''; // Invariants: 0 <= start <= length-1.\n  //   0 <= curr <= next <= max(0, length-2). curr - start <= width.\n  // Inside the loop:\n  //   A match implies length >= 2, so curr and next are <= length-2.\n\n  while (match = breakRe.exec(line)) {\n    next = match.index; // maintain invariant: curr - start <= width\n\n    if (next - start > width) {\n      end = curr > start ? curr : next; // derive end <= length-2\n\n      result += '\\n' + line.slice(start, end); // skip the space that was output as \\n\n\n      start = end + 1; // derive start <= length-1\n    }\n\n    curr = next;\n  } // By the invariants, start <= length-1, so there is something left over.\n  // It is either the whole string or a part starting from non-whitespace.\n\n\n  result += '\\n'; // Insert a break if the remainder is too long and there is a break available.\n\n  if (line.length - start > width && curr > start) {\n    result += line.slice(start, curr) + '\\n' + line.slice(curr + 1);\n  } else {\n    result += line.slice(start);\n  }\n\n  return result.slice(1); // drop extra \\n joiner\n} // Escapes a double-quoted string.\n\n\nfunction escapeString(string) {\n  var result = '';\n  var char, nextChar;\n  var escapeSeq;\n\n  for (var i = 0; i < string.length; i++) {\n    char = string.charCodeAt(i); // Check for surrogate pairs (reference Unicode 3.0 section \"3.7 Surrogates\").\n\n    if (char >= 0xD800 && char <= 0xDBFF\n    /* high surrogate */\n    ) {\n        nextChar = string.charCodeAt(i + 1);\n\n        if (nextChar >= 0xDC00 && nextChar <= 0xDFFF\n        /* low surrogate */\n        ) {\n            // Combine the surrogate pair and store it escaped.\n            result += encodeHex((char - 0xD800) * 0x400 + nextChar - 0xDC00 + 0x10000); // Advance index one extra since we already used that char here.\n\n            i++;\n            continue;\n          }\n      }\n\n    escapeSeq = ESCAPE_SEQUENCES[char];\n    result += !escapeSeq && isPrintable(char) ? string[i] : escapeSeq || encodeHex(char);\n  }\n\n  return result;\n}\n\nfunction writeFlowSequence(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level, object[index], false, false)) {\n      if (index !== 0) _result += ',' + (!state.condenseFlow ? ' ' : '');\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = '[' + _result + ']';\n}\n\nfunction writeBlockSequence(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      index,\n      length;\n\n  for (index = 0, length = object.length; index < length; index += 1) {\n    // Write only valid elements.\n    if (writeNode(state, level + 1, object[index], true, true)) {\n      if (!compact || index !== 0) {\n        _result += generateNextLine(state, level);\n      }\n\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        _result += '-';\n      } else {\n        _result += '- ';\n      }\n\n      _result += state.dump;\n    }\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '[]'; // Empty sequence if no valid values.\n}\n\nfunction writeFlowMapping(state, level, object) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      pairBuffer;\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n    if (index !== 0) pairBuffer += ', ';\n    if (state.condenseFlow) pairBuffer += '\"';\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (!writeNode(state, level, objectKey, false, false)) {\n      continue; // Skip this pair because of invalid key;\n    }\n\n    if (state.dump.length > 1024) pairBuffer += '? ';\n    pairBuffer += state.dump + (state.condenseFlow ? '\"' : '') + ':' + (state.condenseFlow ? '' : ' ');\n\n    if (!writeNode(state, level, objectValue, false, false)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = '{' + _result + '}';\n}\n\nfunction writeBlockMapping(state, level, object, compact) {\n  var _result = '',\n      _tag = state.tag,\n      objectKeyList = Object.keys(object),\n      index,\n      length,\n      objectKey,\n      objectValue,\n      explicitPair,\n      pairBuffer; // Allow sorting keys so that the output file is deterministic\n\n  if (state.sortKeys === true) {\n    // Default sorting\n    objectKeyList.sort();\n  } else if (typeof state.sortKeys === 'function') {\n    // Custom sort function\n    objectKeyList.sort(state.sortKeys);\n  } else if (state.sortKeys) {\n    // Something is wrong\n    throw new exception('sortKeys must be a boolean or a function');\n  }\n\n  for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n    pairBuffer = '';\n\n    if (!compact || index !== 0) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    objectKey = objectKeyList[index];\n    objectValue = object[objectKey];\n\n    if (!writeNode(state, level + 1, objectKey, true, true, true)) {\n      continue; // Skip this pair because of invalid key.\n    }\n\n    explicitPair = state.tag !== null && state.tag !== '?' || state.dump && state.dump.length > 1024;\n\n    if (explicitPair) {\n      if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n        pairBuffer += '?';\n      } else {\n        pairBuffer += '? ';\n      }\n    }\n\n    pairBuffer += state.dump;\n\n    if (explicitPair) {\n      pairBuffer += generateNextLine(state, level);\n    }\n\n    if (!writeNode(state, level + 1, objectValue, true, explicitPair)) {\n      continue; // Skip this pair because of invalid value.\n    }\n\n    if (state.dump && CHAR_LINE_FEED === state.dump.charCodeAt(0)) {\n      pairBuffer += ':';\n    } else {\n      pairBuffer += ': ';\n    }\n\n    pairBuffer += state.dump; // Both key and value are valid.\n\n    _result += pairBuffer;\n  }\n\n  state.tag = _tag;\n  state.dump = _result || '{}'; // Empty mapping if no valid pairs.\n}\n\nfunction detectType(state, object, explicit) {\n  var _result, typeList, index, length, type, style;\n\n  typeList = explicit ? state.explicitTypes : state.implicitTypes;\n\n  for (index = 0, length = typeList.length; index < length; index += 1) {\n    type = typeList[index];\n\n    if ((type.instanceOf || type.predicate) && (!type.instanceOf || typeof object === 'object' && object instanceof type.instanceOf) && (!type.predicate || type.predicate(object))) {\n      state.tag = explicit ? type.tag : '?';\n\n      if (type.represent) {\n        style = state.styleMap[type.tag] || type.defaultStyle;\n\n        if (_toString$2.call(type.represent) === '[object Function]') {\n          _result = type.represent(object, style);\n        } else if (_hasOwnProperty$3.call(type.represent, style)) {\n          _result = type.represent[style](object, style);\n        } else {\n          throw new exception('!<' + type.tag + '> tag resolver accepts not \"' + style + '\" style');\n        }\n\n        state.dump = _result;\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n} // Serializes `object` and writes it to global `result`.\n// Returns true on success, or false on invalid object.\n//\n\n\nfunction writeNode(state, level, object, block, compact, iskey) {\n  state.tag = null;\n  state.dump = object;\n\n  if (!detectType(state, object, false)) {\n    detectType(state, object, true);\n  }\n\n  var type = _toString$2.call(state.dump);\n\n  if (block) {\n    block = state.flowLevel < 0 || state.flowLevel > level;\n  }\n\n  var objectOrArray = type === '[object Object]' || type === '[object Array]',\n      duplicateIndex,\n      duplicate;\n\n  if (objectOrArray) {\n    duplicateIndex = state.duplicates.indexOf(object);\n    duplicate = duplicateIndex !== -1;\n  }\n\n  if (state.tag !== null && state.tag !== '?' || duplicate || state.indent !== 2 && level > 0) {\n    compact = false;\n  }\n\n  if (duplicate && state.usedDuplicates[duplicateIndex]) {\n    state.dump = '*ref_' + duplicateIndex;\n  } else {\n    if (objectOrArray && duplicate && !state.usedDuplicates[duplicateIndex]) {\n      state.usedDuplicates[duplicateIndex] = true;\n    }\n\n    if (type === '[object Object]') {\n      if (block && Object.keys(state.dump).length !== 0) {\n        writeBlockMapping(state, level, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowMapping(state, level, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object Array]') {\n      var arrayLevel = state.noArrayIndent && level > 0 ? level - 1 : level;\n\n      if (block && state.dump.length !== 0) {\n        writeBlockSequence(state, arrayLevel, state.dump, compact);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + state.dump;\n        }\n      } else {\n        writeFlowSequence(state, arrayLevel, state.dump);\n\n        if (duplicate) {\n          state.dump = '&ref_' + duplicateIndex + ' ' + state.dump;\n        }\n      }\n    } else if (type === '[object String]') {\n      if (state.tag !== '?') {\n        writeScalar(state, state.dump, level, iskey);\n      }\n    } else {\n      if (state.skipInvalid) return false;\n      throw new exception('unacceptable kind of an object to dump ' + type);\n    }\n\n    if (state.tag !== null && state.tag !== '?') {\n      state.dump = '!<' + state.tag + '> ' + state.dump;\n    }\n  }\n\n  return true;\n}\n\nfunction getDuplicateReferences(object, state) {\n  var objects = [],\n      duplicatesIndexes = [],\n      index,\n      length;\n  inspectNode(object, objects, duplicatesIndexes);\n\n  for (index = 0, length = duplicatesIndexes.length; index < length; index += 1) {\n    state.duplicates.push(objects[duplicatesIndexes[index]]);\n  }\n\n  state.usedDuplicates = new Array(length);\n}\n\nfunction inspectNode(object, objects, duplicatesIndexes) {\n  var objectKeyList, index, length;\n\n  if (object !== null && typeof object === 'object') {\n    index = objects.indexOf(object);\n\n    if (index !== -1) {\n      if (duplicatesIndexes.indexOf(index) === -1) {\n        duplicatesIndexes.push(index);\n      }\n    } else {\n      objects.push(object);\n\n      if (Array.isArray(object)) {\n        for (index = 0, length = object.length; index < length; index += 1) {\n          inspectNode(object[index], objects, duplicatesIndexes);\n        }\n      } else {\n        objectKeyList = Object.keys(object);\n\n        for (index = 0, length = objectKeyList.length; index < length; index += 1) {\n          inspectNode(object[objectKeyList[index]], objects, duplicatesIndexes);\n        }\n      }\n    }\n  }\n}\n\nfunction dump(input, options) {\n  options = options || {};\n  var state = new State$1(options);\n  if (!state.noRefs) getDuplicateReferences(input, state);\n  if (writeNode(state, 0, input, true, true)) return state.dump + '\\n';\n  return '';\n}\n\nfunction safeDump(input, options) {\n  return dump(input, common.extend({\n    schema: default_safe\n  }, options));\n}\n\nvar dump_1 = dump;\nvar safeDump_1 = safeDump;\nvar dumper = {\n  dump: dump_1,\n  safeDump: safeDump_1\n};\n\nfunction deprecated(name) {\n  return function () {\n    throw new Error('Function ' + name + ' is deprecated and cannot be used.');\n  };\n}\n\nvar Type$1 = type;\nvar Schema$1 = schema;\nvar FAILSAFE_SCHEMA = failsafe;\nvar JSON_SCHEMA = json;\nvar CORE_SCHEMA = core;\nvar DEFAULT_SAFE_SCHEMA = default_safe;\nvar DEFAULT_FULL_SCHEMA = default_full;\nvar load$1 = loader.load;\nvar loadAll$1 = loader.loadAll;\nvar safeLoad$1 = loader.safeLoad;\nvar safeLoadAll$1 = loader.safeLoadAll;\nvar dump$1 = dumper.dump;\nvar safeDump$1 = dumper.safeDump;\nvar YAMLException$1 = exception; // Deprecated schema names from JS-YAML 2.0.x\n\nvar MINIMAL_SCHEMA = failsafe;\nvar SAFE_SCHEMA = default_safe;\nvar DEFAULT_SCHEMA = default_full; // Deprecated functions from JS-YAML 1.x.x\n\nvar scan = deprecated('scan');\nvar parse = deprecated('parse');\nvar compose = deprecated('compose');\nvar addConstructor = deprecated('addConstructor');\nvar jsYaml = {\n  Type: Type$1,\n  Schema: Schema$1,\n  FAILSAFE_SCHEMA: FAILSAFE_SCHEMA,\n  JSON_SCHEMA: JSON_SCHEMA,\n  CORE_SCHEMA: CORE_SCHEMA,\n  DEFAULT_SAFE_SCHEMA: DEFAULT_SAFE_SCHEMA,\n  DEFAULT_FULL_SCHEMA: DEFAULT_FULL_SCHEMA,\n  load: load$1,\n  loadAll: loadAll$1,\n  safeLoad: safeLoad$1,\n  safeLoadAll: safeLoadAll$1,\n  dump: dump$1,\n  safeDump: safeDump$1,\n  YAMLException: YAMLException$1,\n  MINIMAL_SCHEMA: MINIMAL_SCHEMA,\n  SAFE_SCHEMA: SAFE_SCHEMA,\n  DEFAULT_SCHEMA: DEFAULT_SCHEMA,\n  scan: scan,\n  parse: parse,\n  compose: compose,\n  addConstructor: addConstructor\n};\n\nvar jsYaml$1 = jsYaml;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n/**\n * Redirect - object used to redirect some requests\n * e.g.\n * {\n *      title: 1x1-transparent.gif\n *      comment: http://probablyprogramming.com/2009/03/15/the-tiniest-gif-ever\n *      contentType: image/gif;base64\n *      content: R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==\n * }\n * @typedef {Object} Redirect\n * @property {string} title\n * @property {string} comment\n * @property {string} content\n * @property {string} contentType\n */\n\nvar Redirects = /*#__PURE__*/function () {\n  /**\n   * Converts rawYaml into JS object with sources titles used as keys\n   * @param rawYaml\n   * @returns {Object<Redirect>} - return object with titles in the keys and RedirectSources\n   * in the values\n   */\n  function Redirects(rawYaml) {\n    classCallCheck(this, Redirects);\n\n    try {\n      var arrOfRedirects = jsYaml$1.safeLoad(rawYaml);\n      this.redirects = arrOfRedirects.reduce(function (acc, redirect) {\n        return _objectSpread(_objectSpread({}, acc), {}, defineProperty({}, redirect.title, redirect));\n      }, {});\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log(\"Was unable to load YAML into JS due to: \".concat(e.message));\n      throw e;\n    }\n  }\n  /**\n   * Returns redirect source object\n   * @param {string} title\n   * @return {Redirect}\n   */\n\n\n  createClass(Redirects, [{\n    key: \"getRedirect\",\n    value: function getRedirect(title) {\n      var _this = this;\n\n      if (Object.prototype.hasOwnProperty.call(this.redirects, title)) {\n        return this.redirects[title];\n      } // look title among aliases\n\n\n      var values = Object.keys(this.redirects).map(function (key) {\n        return _this.redirects[key];\n      });\n      return values.find(function (redirect) {\n        var aliases = redirect.aliases;\n\n        if (!aliases) {\n          return false;\n        }\n\n        return aliases.indexOf(title) > -1;\n      });\n    }\n  }]);\n\n  return Redirects;\n}();\n\n/**\n * Finds redirect resource by it's name\n * @param {string} name - redirect name\n */\n\nvar getRedirectByName = function getRedirectByName(name) {\n  var redirects = Object.keys(redirectsList).map(function (key) {\n    return redirectsList[key];\n  });\n  return redirects.find(function (r) {\n    return r.names && r.names.indexOf(name) > -1;\n  });\n};\n/**\n * @typedef {Object} Source - redirect properties\n * @property {string} name redirect name\n * @property {Array<string>} args Arguments for redirect function\n * @property {'extension'|'test'} [engine] -\n * Defines the final form of redirect string presentation\n * @property {boolean} [verbose] flag to enable printing to console debug information\n */\n\n/**\n * Returns redirect code by param\n * @param {Source} source\n * @returns {string} redirect code\n */\n\n\nvar getRedirectCode = function getRedirectCode(source) {\n  var redirect = getRedirectByName(source.name);\n  var result = attachDependencies(redirect);\n  result = addCall(redirect, result); // redirect code for different sources is checked in tests\n  // so it should be just a code without any source and props passed\n\n  result = source.engine === 'test' ? wrapInNonameFunc(result) : passSourceAndProps(source, result);\n  return result;\n};\n\nvar redirectsCjs = {\n  Redirects: Redirects,\n  getCode: getRedirectCode,\n  isAdgRedirectRule: validator.isAdgRedirectRule,\n  isValidAdgRedirectRule: validator.isValidAdgRedirectRule,\n  isAdgRedirectCompatibleWithUbo: validator.isAdgRedirectCompatibleWithUbo,\n  isUboRedirectCompatibleWithAdg: validator.isUboRedirectCompatibleWithAdg,\n  isAbpRedirectCompatibleWithAdg: validator.isAbpRedirectCompatibleWithAdg,\n  convertUboRedirectToAdg: convertUboRedirectToAdg,\n  convertAbpRedirectToAdg: convertAbpRedirectToAdg,\n  convertRedirectToAdg: convertRedirectToAdg,\n  convertAdgRedirectToUbo: convertAdgRedirectToUbo\n};\n\n/**\n * @typedef {Object} Source - scriptlet properties\n * @property {string} name Scriptlet name\n * @property {Array<string>} args Arguments for scriptlet function\n * @property {'extension'|'corelibs'|'test'} engine -\n * Defines the final form of scriptlet string presentation\n * @property {string} [version]\n * @property {boolean} [verbose] flag to enable printing to console debug information\n * @property {string} [ruleText] Source rule text is used for debugging purposes\n * @property {string} [domainName] domain name where scriptlet is applied; for debugging purposes\n */\n\n/**\n * Returns scriptlet code by param\n * @param {Source} source\n * @returns {string} scriptlet code\n */\n\nfunction getScriptletCode(source) {\n  if (!validator.isValidScriptletName(source.name)) {\n    return null;\n  }\n\n  var scriptlet = validator.getScriptletByName(source.name);\n  var result = attachDependencies(scriptlet);\n  result = addCall(scriptlet, result);\n  result = source.engine === 'corelibs' || source.engine === 'test' ? wrapInNonameFunc(result) : passSourceAndProps(source, result);\n  return result;\n}\n/**\n * Scriptlets variable\n *\n * @returns {Object} object with methods:\n * `invoke` method receives one argument with `Source` type\n * `validate` method receives one argument with `String` type\n */\n\n\nvar scriptletsObject = function () {\n  return {\n    invoke: getScriptletCode,\n    isValidScriptletName: validator.isValidScriptletName,\n    isValidScriptletRule: isValidScriptletRule,\n    isAdgScriptletRule: validator.isAdgScriptletRule,\n    isUboScriptletRule: validator.isUboScriptletRule,\n    isAbpSnippetRule: validator.isAbpSnippetRule,\n    convertUboToAdg: convertUboScriptletToAdg,\n    convertAbpToAdg: convertAbpSnippetToAdg,\n    convertScriptletToAdg: convertScriptletToAdg,\n    convertAdgToUbo: convertAdgScriptletToUbo,\n    redirects: redirectsCjs\n  };\n}();\n\n/**\n * Add module exports to be used as node package\n */\n\nmodule.exports = scriptletsObject;\n\n/**\n * -------------------------------------------\n * |                                         |\n * |  If you want to add your own scriptlet  |\n * |  please put your code below             |\n * |                                         |\n * -------------------------------------------\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/scriptlets/dist/cjs/scriptlets.cjs.js\n");

/***/ }),

/***/ "./node_modules/webextension-polyfill-ts/lib/index.js":
/*!************************************************************!*\
  !*** ./node_modules/webextension-polyfill-ts/lib/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\nexports.browser = __webpack_require__(/*! webextension-polyfill */ \"./node_modules/webextension-polyfill/dist/browser-polyfill.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zYW1wbGUtYWRibG9ja2VyLy4vbm9kZV9tb2R1bGVzL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cy9saWIvaW5kZXguanM/NzI4YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxDQUFDLGNBQWMsRUFBQzs7QUFFN0QsbUlBQWtEIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL3dlYmV4dGVuc2lvbi1wb2x5ZmlsbC10cy9saWIvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcblxuZXhwb3J0cy5icm93c2VyID0gcmVxdWlyZShcIndlYmV4dGVuc2lvbi1wb2x5ZmlsbFwiKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/webextension-polyfill-ts/lib/index.js\n");

/***/ }),

/***/ "./node_modules/webextension-polyfill/dist/browser-polyfill.js":
/*!*********************************************************************!*\
  !*** ./node_modules/webextension-polyfill/dist/browser-polyfill.js ***!
  \*********************************************************************/
/***/ (function(module, exports) {

eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (global, factory) {\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [module], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else { var mod; }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (module) {\n  /* webextension-polyfill - v0.7.0 - Tue Nov 10 2020 20:24:04 */\n\n  /* -*- Mode: indent-tabs-mode: nil; js-indent-level: 2 -*- */\n\n  /* vim: set sts=2 sw=2 et tw=80: */\n\n  /* This Source Code Form is subject to the terms of the Mozilla Public\n   * License, v. 2.0. If a copy of the MPL was not distributed with this\n   * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n  \"use strict\";\n\n  if (typeof browser === \"undefined\" || Object.getPrototypeOf(browser) !== Object.prototype) {\n    const CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE = \"The message port closed before a response was received.\";\n    const SEND_RESPONSE_DEPRECATION_WARNING = \"Returning a Promise is the preferred way to send a reply from an onMessage/onMessageExternal listener, as the sendResponse will be removed from the specs (See https://developer.mozilla.org/docs/Mozilla/Add-ons/WebExtensions/API/runtime/onMessage)\"; // Wrapping the bulk of this polyfill in a one-time-use function is a minor\n    // optimization for Firefox. Since Spidermonkey does not fully parse the\n    // contents of a function until the first time it's called, and since it will\n    // never actually need to be called, this allows the polyfill to be included\n    // in Firefox nearly for free.\n\n    const wrapAPIs = extensionAPIs => {\n      // NOTE: apiMetadata is associated to the content of the api-metadata.json file\n      // at build time by replacing the following \"include\" with the content of the\n      // JSON file.\n      const apiMetadata = {\n        \"alarms\": {\n          \"clear\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"clearAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"get\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"getAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          }\n        },\n        \"bookmarks\": {\n          \"create\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"get\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getChildren\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getRecent\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getSubTree\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getTree\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"move\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          },\n          \"remove\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeTree\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"search\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"update\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          }\n        },\n        \"browserAction\": {\n          \"disable\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"enable\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"getBadgeBackgroundColor\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getBadgeText\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getPopup\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getTitle\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"openPopup\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"setBadgeBackgroundColor\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"setBadgeText\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"setIcon\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"setPopup\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"setTitle\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          }\n        },\n        \"browsingData\": {\n          \"remove\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          },\n          \"removeCache\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeCookies\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeDownloads\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeFormData\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeHistory\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeLocalStorage\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removePasswords\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removePluginData\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"settings\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          }\n        },\n        \"commands\": {\n          \"getAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          }\n        },\n        \"contextMenus\": {\n          \"remove\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"update\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          }\n        },\n        \"cookies\": {\n          \"get\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getAll\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getAllCookieStores\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"remove\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"set\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          }\n        },\n        \"devtools\": {\n          \"inspectedWindow\": {\n            \"eval\": {\n              \"minArgs\": 1,\n              \"maxArgs\": 2,\n              \"singleCallbackArg\": false\n            }\n          },\n          \"panels\": {\n            \"create\": {\n              \"minArgs\": 3,\n              \"maxArgs\": 3,\n              \"singleCallbackArg\": true\n            },\n            \"elements\": {\n              \"createSidebarPane\": {\n                \"minArgs\": 1,\n                \"maxArgs\": 1\n              }\n            }\n          }\n        },\n        \"downloads\": {\n          \"cancel\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"download\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"erase\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getFileIcon\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"open\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"pause\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeFile\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"resume\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"search\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"show\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          }\n        },\n        \"extension\": {\n          \"isAllowedFileSchemeAccess\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"isAllowedIncognitoAccess\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          }\n        },\n        \"history\": {\n          \"addUrl\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"deleteAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"deleteRange\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"deleteUrl\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getVisits\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"search\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          }\n        },\n        \"i18n\": {\n          \"detectLanguage\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getAcceptLanguages\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          }\n        },\n        \"identity\": {\n          \"launchWebAuthFlow\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          }\n        },\n        \"idle\": {\n          \"queryState\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          }\n        },\n        \"management\": {\n          \"get\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"getSelf\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"setEnabled\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          },\n          \"uninstallSelf\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          }\n        },\n        \"notifications\": {\n          \"clear\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"create\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"getAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"getPermissionLevel\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"update\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          }\n        },\n        \"pageAction\": {\n          \"getPopup\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getTitle\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"hide\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"setIcon\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"setPopup\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"setTitle\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          },\n          \"show\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1,\n            \"fallbackToNoCallback\": true\n          }\n        },\n        \"permissions\": {\n          \"contains\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"remove\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"request\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          }\n        },\n        \"runtime\": {\n          \"getBackgroundPage\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"getPlatformInfo\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"openOptionsPage\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"requestUpdateCheck\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"sendMessage\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 3\n          },\n          \"sendNativeMessage\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          },\n          \"setUninstallURL\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          }\n        },\n        \"sessions\": {\n          \"getDevices\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"getRecentlyClosed\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"restore\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          }\n        },\n        \"storage\": {\n          \"local\": {\n            \"clear\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 0\n            },\n            \"get\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 1\n            },\n            \"getBytesInUse\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 1\n            },\n            \"remove\": {\n              \"minArgs\": 1,\n              \"maxArgs\": 1\n            },\n            \"set\": {\n              \"minArgs\": 1,\n              \"maxArgs\": 1\n            }\n          },\n          \"managed\": {\n            \"get\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 1\n            },\n            \"getBytesInUse\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 1\n            }\n          },\n          \"sync\": {\n            \"clear\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 0\n            },\n            \"get\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 1\n            },\n            \"getBytesInUse\": {\n              \"minArgs\": 0,\n              \"maxArgs\": 1\n            },\n            \"remove\": {\n              \"minArgs\": 1,\n              \"maxArgs\": 1\n            },\n            \"set\": {\n              \"minArgs\": 1,\n              \"maxArgs\": 1\n            }\n          }\n        },\n        \"tabs\": {\n          \"captureVisibleTab\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 2\n          },\n          \"create\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"detectLanguage\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"discard\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"duplicate\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"executeScript\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"get\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getCurrent\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          },\n          \"getZoom\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"getZoomSettings\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"goBack\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"goForward\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"highlight\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"insertCSS\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"move\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          },\n          \"query\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"reload\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 2\n          },\n          \"remove\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"removeCSS\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"sendMessage\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 3\n          },\n          \"setZoom\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"setZoomSettings\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"update\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          }\n        },\n        \"topSites\": {\n          \"get\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          }\n        },\n        \"webNavigation\": {\n          \"getAllFrames\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"getFrame\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          }\n        },\n        \"webRequest\": {\n          \"handlerBehaviorChanged\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 0\n          }\n        },\n        \"windows\": {\n          \"create\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"get\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 2\n          },\n          \"getAll\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"getCurrent\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"getLastFocused\": {\n            \"minArgs\": 0,\n            \"maxArgs\": 1\n          },\n          \"remove\": {\n            \"minArgs\": 1,\n            \"maxArgs\": 1\n          },\n          \"update\": {\n            \"minArgs\": 2,\n            \"maxArgs\": 2\n          }\n        }\n      };\n\n      if (Object.keys(apiMetadata).length === 0) {\n        throw new Error(\"api-metadata.json has not been included in browser-polyfill\");\n      }\n      /**\n       * A WeakMap subclass which creates and stores a value for any key which does\n       * not exist when accessed, but behaves exactly as an ordinary WeakMap\n       * otherwise.\n       *\n       * @param {function} createItem\n       *        A function which will be called in order to create the value for any\n       *        key which does not exist, the first time it is accessed. The\n       *        function receives, as its only argument, the key being created.\n       */\n\n\n      class DefaultWeakMap extends WeakMap {\n        constructor(createItem, items = undefined) {\n          super(items);\n          this.createItem = createItem;\n        }\n\n        get(key) {\n          if (!this.has(key)) {\n            this.set(key, this.createItem(key));\n          }\n\n          return super.get(key);\n        }\n\n      }\n      /**\n       * Returns true if the given object is an object with a `then` method, and can\n       * therefore be assumed to behave as a Promise.\n       *\n       * @param {*} value The value to test.\n       * @returns {boolean} True if the value is thenable.\n       */\n\n\n      const isThenable = value => {\n        return value && typeof value === \"object\" && typeof value.then === \"function\";\n      };\n      /**\n       * Creates and returns a function which, when called, will resolve or reject\n       * the given promise based on how it is called:\n       *\n       * - If, when called, `chrome.runtime.lastError` contains a non-null object,\n       *   the promise is rejected with that value.\n       * - If the function is called with exactly one argument, the promise is\n       *   resolved to that value.\n       * - Otherwise, the promise is resolved to an array containing all of the\n       *   function's arguments.\n       *\n       * @param {object} promise\n       *        An object containing the resolution and rejection functions of a\n       *        promise.\n       * @param {function} promise.resolve\n       *        The promise's resolution function.\n       * @param {function} promise.rejection\n       *        The promise's rejection function.\n       * @param {object} metadata\n       *        Metadata about the wrapped method which has created the callback.\n       * @param {integer} metadata.maxResolvedArgs\n       *        The maximum number of arguments which may be passed to the\n       *        callback created by the wrapped async function.\n       *\n       * @returns {function}\n       *        The generated callback function.\n       */\n\n\n      const makeCallback = (promise, metadata) => {\n        return (...callbackArgs) => {\n          if (extensionAPIs.runtime.lastError) {\n            promise.reject(extensionAPIs.runtime.lastError);\n          } else if (metadata.singleCallbackArg || callbackArgs.length <= 1 && metadata.singleCallbackArg !== false) {\n            promise.resolve(callbackArgs[0]);\n          } else {\n            promise.resolve(callbackArgs);\n          }\n        };\n      };\n\n      const pluralizeArguments = numArgs => numArgs == 1 ? \"argument\" : \"arguments\";\n      /**\n       * Creates a wrapper function for a method with the given name and metadata.\n       *\n       * @param {string} name\n       *        The name of the method which is being wrapped.\n       * @param {object} metadata\n       *        Metadata about the method being wrapped.\n       * @param {integer} metadata.minArgs\n       *        The minimum number of arguments which must be passed to the\n       *        function. If called with fewer than this number of arguments, the\n       *        wrapper will raise an exception.\n       * @param {integer} metadata.maxArgs\n       *        The maximum number of arguments which may be passed to the\n       *        function. If called with more than this number of arguments, the\n       *        wrapper will raise an exception.\n       * @param {integer} metadata.maxResolvedArgs\n       *        The maximum number of arguments which may be passed to the\n       *        callback created by the wrapped async function.\n       *\n       * @returns {function(object, ...*)}\n       *       The generated wrapper function.\n       */\n\n\n      const wrapAsyncFunction = (name, metadata) => {\n        return function asyncFunctionWrapper(target, ...args) {\n          if (args.length < metadata.minArgs) {\n            throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);\n          }\n\n          if (args.length > metadata.maxArgs) {\n            throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);\n          }\n\n          return new Promise((resolve, reject) => {\n            if (metadata.fallbackToNoCallback) {\n              // This API method has currently no callback on Chrome, but it return a promise on Firefox,\n              // and so the polyfill will try to call it with a callback first, and it will fallback\n              // to not passing the callback if the first call fails.\n              try {\n                target[name](...args, makeCallback({\n                  resolve,\n                  reject\n                }, metadata));\n              } catch (cbError) {\n                console.warn(`${name} API method doesn't seem to support the callback parameter, ` + \"falling back to call it without a callback: \", cbError);\n                target[name](...args); // Update the API method metadata, so that the next API calls will not try to\n                // use the unsupported callback anymore.\n\n                metadata.fallbackToNoCallback = false;\n                metadata.noCallback = true;\n                resolve();\n              }\n            } else if (metadata.noCallback) {\n              target[name](...args);\n              resolve();\n            } else {\n              target[name](...args, makeCallback({\n                resolve,\n                reject\n              }, metadata));\n            }\n          });\n        };\n      };\n      /**\n       * Wraps an existing method of the target object, so that calls to it are\n       * intercepted by the given wrapper function. The wrapper function receives,\n       * as its first argument, the original `target` object, followed by each of\n       * the arguments passed to the original method.\n       *\n       * @param {object} target\n       *        The original target object that the wrapped method belongs to.\n       * @param {function} method\n       *        The method being wrapped. This is used as the target of the Proxy\n       *        object which is created to wrap the method.\n       * @param {function} wrapper\n       *        The wrapper function which is called in place of a direct invocation\n       *        of the wrapped method.\n       *\n       * @returns {Proxy<function>}\n       *        A Proxy object for the given method, which invokes the given wrapper\n       *        method in its place.\n       */\n\n\n      const wrapMethod = (target, method, wrapper) => {\n        return new Proxy(method, {\n          apply(targetMethod, thisObj, args) {\n            return wrapper.call(thisObj, target, ...args);\n          }\n\n        });\n      };\n\n      let hasOwnProperty = Function.call.bind(Object.prototype.hasOwnProperty);\n      /**\n       * Wraps an object in a Proxy which intercepts and wraps certain methods\n       * based on the given `wrappers` and `metadata` objects.\n       *\n       * @param {object} target\n       *        The target object to wrap.\n       *\n       * @param {object} [wrappers = {}]\n       *        An object tree containing wrapper functions for special cases. Any\n       *        function present in this object tree is called in place of the\n       *        method in the same location in the `target` object tree. These\n       *        wrapper methods are invoked as described in {@see wrapMethod}.\n       *\n       * @param {object} [metadata = {}]\n       *        An object tree containing metadata used to automatically generate\n       *        Promise-based wrapper functions for asynchronous. Any function in\n       *        the `target` object tree which has a corresponding metadata object\n       *        in the same location in the `metadata` tree is replaced with an\n       *        automatically-generated wrapper function, as described in\n       *        {@see wrapAsyncFunction}\n       *\n       * @returns {Proxy<object>}\n       */\n\n      const wrapObject = (target, wrappers = {}, metadata = {}) => {\n        let cache = Object.create(null);\n        let handlers = {\n          has(proxyTarget, prop) {\n            return prop in target || prop in cache;\n          },\n\n          get(proxyTarget, prop, receiver) {\n            if (prop in cache) {\n              return cache[prop];\n            }\n\n            if (!(prop in target)) {\n              return undefined;\n            }\n\n            let value = target[prop];\n\n            if (typeof value === \"function\") {\n              // This is a method on the underlying object. Check if we need to do\n              // any wrapping.\n              if (typeof wrappers[prop] === \"function\") {\n                // We have a special-case wrapper for this method.\n                value = wrapMethod(target, target[prop], wrappers[prop]);\n              } else if (hasOwnProperty(metadata, prop)) {\n                // This is an async method that we have metadata for. Create a\n                // Promise wrapper for it.\n                let wrapper = wrapAsyncFunction(prop, metadata[prop]);\n                value = wrapMethod(target, target[prop], wrapper);\n              } else {\n                // This is a method that we don't know or care about. Return the\n                // original method, bound to the underlying object.\n                value = value.bind(target);\n              }\n            } else if (typeof value === \"object\" && value !== null && (hasOwnProperty(wrappers, prop) || hasOwnProperty(metadata, prop))) {\n              // This is an object that we need to do some wrapping for the children\n              // of. Create a sub-object wrapper for it with the appropriate child\n              // metadata.\n              value = wrapObject(value, wrappers[prop], metadata[prop]);\n            } else if (hasOwnProperty(metadata, \"*\")) {\n              // Wrap all properties in * namespace.\n              value = wrapObject(value, wrappers[prop], metadata[\"*\"]);\n            } else {\n              // We don't need to do any wrapping for this property,\n              // so just forward all access to the underlying object.\n              Object.defineProperty(cache, prop, {\n                configurable: true,\n                enumerable: true,\n\n                get() {\n                  return target[prop];\n                },\n\n                set(value) {\n                  target[prop] = value;\n                }\n\n              });\n              return value;\n            }\n\n            cache[prop] = value;\n            return value;\n          },\n\n          set(proxyTarget, prop, value, receiver) {\n            if (prop in cache) {\n              cache[prop] = value;\n            } else {\n              target[prop] = value;\n            }\n\n            return true;\n          },\n\n          defineProperty(proxyTarget, prop, desc) {\n            return Reflect.defineProperty(cache, prop, desc);\n          },\n\n          deleteProperty(proxyTarget, prop) {\n            return Reflect.deleteProperty(cache, prop);\n          }\n\n        }; // Per contract of the Proxy API, the \"get\" proxy handler must return the\n        // original value of the target if that value is declared read-only and\n        // non-configurable. For this reason, we create an object with the\n        // prototype set to `target` instead of using `target` directly.\n        // Otherwise we cannot return a custom object for APIs that\n        // are declared read-only and non-configurable, such as `chrome.devtools`.\n        //\n        // The proxy handlers themselves will still use the original `target`\n        // instead of the `proxyTarget`, so that the methods and properties are\n        // dereferenced via the original targets.\n\n        let proxyTarget = Object.create(target);\n        return new Proxy(proxyTarget, handlers);\n      };\n      /**\n       * Creates a set of wrapper functions for an event object, which handles\n       * wrapping of listener functions that those messages are passed.\n       *\n       * A single wrapper is created for each listener function, and stored in a\n       * map. Subsequent calls to `addListener`, `hasListener`, or `removeListener`\n       * retrieve the original wrapper, so that  attempts to remove a\n       * previously-added listener work as expected.\n       *\n       * @param {DefaultWeakMap<function, function>} wrapperMap\n       *        A DefaultWeakMap object which will create the appropriate wrapper\n       *        for a given listener function when one does not exist, and retrieve\n       *        an existing one when it does.\n       *\n       * @returns {object}\n       */\n\n\n      const wrapEvent = wrapperMap => ({\n        addListener(target, listener, ...args) {\n          target.addListener(wrapperMap.get(listener), ...args);\n        },\n\n        hasListener(target, listener) {\n          return target.hasListener(wrapperMap.get(listener));\n        },\n\n        removeListener(target, listener) {\n          target.removeListener(wrapperMap.get(listener));\n        }\n\n      }); // Keep track if the deprecation warning has been logged at least once.\n\n\n      let loggedSendResponseDeprecationWarning = false;\n      const onMessageWrappers = new DefaultWeakMap(listener => {\n        if (typeof listener !== \"function\") {\n          return listener;\n        }\n        /**\n         * Wraps a message listener function so that it may send responses based on\n         * its return value, rather than by returning a sentinel value and calling a\n         * callback. If the listener function returns a Promise, the response is\n         * sent when the promise either resolves or rejects.\n         *\n         * @param {*} message\n         *        The message sent by the other end of the channel.\n         * @param {object} sender\n         *        Details about the sender of the message.\n         * @param {function(*)} sendResponse\n         *        A callback which, when called with an arbitrary argument, sends\n         *        that value as a response.\n         * @returns {boolean}\n         *        True if the wrapped listener returned a Promise, which will later\n         *        yield a response. False otherwise.\n         */\n\n\n        return function onMessage(message, sender, sendResponse) {\n          let didCallSendResponse = false;\n          let wrappedSendResponse;\n          let sendResponsePromise = new Promise(resolve => {\n            wrappedSendResponse = function (response) {\n              if (!loggedSendResponseDeprecationWarning) {\n                console.warn(SEND_RESPONSE_DEPRECATION_WARNING, new Error().stack);\n                loggedSendResponseDeprecationWarning = true;\n              }\n\n              didCallSendResponse = true;\n              resolve(response);\n            };\n          });\n          let result;\n\n          try {\n            result = listener(message, sender, wrappedSendResponse);\n          } catch (err) {\n            result = Promise.reject(err);\n          }\n\n          const isResultThenable = result !== true && isThenable(result); // If the listener didn't returned true or a Promise, or called\n          // wrappedSendResponse synchronously, we can exit earlier\n          // because there will be no response sent from this listener.\n\n          if (result !== true && !isResultThenable && !didCallSendResponse) {\n            return false;\n          } // A small helper to send the message if the promise resolves\n          // and an error if the promise rejects (a wrapped sendMessage has\n          // to translate the message into a resolved promise or a rejected\n          // promise).\n\n\n          const sendPromisedResult = promise => {\n            promise.then(msg => {\n              // send the message value.\n              sendResponse(msg);\n            }, error => {\n              // Send a JSON representation of the error if the rejected value\n              // is an instance of error, or the object itself otherwise.\n              let message;\n\n              if (error && (error instanceof Error || typeof error.message === \"string\")) {\n                message = error.message;\n              } else {\n                message = \"An unexpected error occurred\";\n              }\n\n              sendResponse({\n                __mozWebExtensionPolyfillReject__: true,\n                message\n              });\n            }).catch(err => {\n              // Print an error on the console if unable to send the response.\n              console.error(\"Failed to send onMessage rejected reply\", err);\n            });\n          }; // If the listener returned a Promise, send the resolved value as a\n          // result, otherwise wait the promise related to the wrappedSendResponse\n          // callback to resolve and send it as a response.\n\n\n          if (isResultThenable) {\n            sendPromisedResult(result);\n          } else {\n            sendPromisedResult(sendResponsePromise);\n          } // Let Chrome know that the listener is replying.\n\n\n          return true;\n        };\n      });\n\n      const wrappedSendMessageCallback = ({\n        reject,\n        resolve\n      }, reply) => {\n        if (extensionAPIs.runtime.lastError) {\n          // Detect when none of the listeners replied to the sendMessage call and resolve\n          // the promise to undefined as in Firefox.\n          // See https://github.com/mozilla/webextension-polyfill/issues/130\n          if (extensionAPIs.runtime.lastError.message === CHROME_SEND_MESSAGE_CALLBACK_NO_RESPONSE_MESSAGE) {\n            resolve();\n          } else {\n            reject(extensionAPIs.runtime.lastError);\n          }\n        } else if (reply && reply.__mozWebExtensionPolyfillReject__) {\n          // Convert back the JSON representation of the error into\n          // an Error instance.\n          reject(new Error(reply.message));\n        } else {\n          resolve(reply);\n        }\n      };\n\n      const wrappedSendMessage = (name, metadata, apiNamespaceObj, ...args) => {\n        if (args.length < metadata.minArgs) {\n          throw new Error(`Expected at least ${metadata.minArgs} ${pluralizeArguments(metadata.minArgs)} for ${name}(), got ${args.length}`);\n        }\n\n        if (args.length > metadata.maxArgs) {\n          throw new Error(`Expected at most ${metadata.maxArgs} ${pluralizeArguments(metadata.maxArgs)} for ${name}(), got ${args.length}`);\n        }\n\n        return new Promise((resolve, reject) => {\n          const wrappedCb = wrappedSendMessageCallback.bind(null, {\n            resolve,\n            reject\n          });\n          args.push(wrappedCb);\n          apiNamespaceObj.sendMessage(...args);\n        });\n      };\n\n      const staticWrappers = {\n        runtime: {\n          onMessage: wrapEvent(onMessageWrappers),\n          onMessageExternal: wrapEvent(onMessageWrappers),\n          sendMessage: wrappedSendMessage.bind(null, \"sendMessage\", {\n            minArgs: 1,\n            maxArgs: 3\n          })\n        },\n        tabs: {\n          sendMessage: wrappedSendMessage.bind(null, \"sendMessage\", {\n            minArgs: 2,\n            maxArgs: 3\n          })\n        }\n      };\n      const settingMetadata = {\n        clear: {\n          minArgs: 1,\n          maxArgs: 1\n        },\n        get: {\n          minArgs: 1,\n          maxArgs: 1\n        },\n        set: {\n          minArgs: 1,\n          maxArgs: 1\n        }\n      };\n      apiMetadata.privacy = {\n        network: {\n          \"*\": settingMetadata\n        },\n        services: {\n          \"*\": settingMetadata\n        },\n        websites: {\n          \"*\": settingMetadata\n        }\n      };\n      return wrapObject(extensionAPIs, staticWrappers, apiMetadata);\n    };\n\n    if (typeof chrome != \"object\" || !chrome || !chrome.runtime || !chrome.runtime.id) {\n      throw new Error(\"This script should only be loaded in a browser extension.\");\n    } // The build process adds a UMD wrapper around this file, which makes the\n    // `module` variable available.\n\n\n    module.exports = wrapAPIs(chrome);\n  } else {\n    module.exports = browser;\n  }\n});\n//# sourceMappingURL=browser-polyfill.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/webextension-polyfill/dist/browser-polyfill.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/content.ts");
/******/ 	
/******/ })()
;